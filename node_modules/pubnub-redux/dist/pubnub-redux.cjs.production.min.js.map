{"version":3,"file":"pubnub-redux.cjs.production.min.js","sources":["../src/features/membership/MembershipActionType.enum.ts","../src/features/members/ChannelMembersActionType.enum.ts","../src/features/membership/commands/RemoveMemberships.ts","../src/features/membership/commands/FetchMemberships.ts","../src/features/membership/commands/SetMemberships.ts","../src/features/message/MessageActionType.enum.ts","../src/features/members/commands/FetchChannelMembers.ts","../src/features/members/commands/SetChannelMembers.ts","../src/features/members/commands/RemoveChannelMembers.ts","../src/features/signal/SignalActionType.enum.ts","../src/features/message/commands/SendMessage.ts","../src/features/channel/ChannelDataActionType.enum.ts","../src/features/signal/commands/SendSignal.ts","../src/features/message/commands/FetchMessageHistory.ts","../src/features/user/UserDataActionType.enum.ts","../src/features/channel/commands/RemoveChannelData.ts","../src/features/channel/commands/FetchChannelData.ts","../src/features/channel/commands/FetchAllChannelData.ts","../src/features/channel/commands/SetChannelData.ts","../src/features/presence/PresenceActionType.enum.ts","../src/features/user/commands/RemoveUserData.ts","../src/features/user/commands/FetchUserData.ts","../src/features/user/commands/FetchAllUserData.ts","../src/features/user/commands/SetUserData.ts","../src/features/presence/PresenceCategory.enum.ts","../src/features/presence/commands/FetchHereNow.ts","../src/features/presence/commands/FetchPresenceState.ts","../src/features/user/UserDataListener.ts","../src/features/channel/ChannelDataListener.ts","../src/features/membership/MembershipListener.ts","../src/features/message/MessageListener.ts","../src/features/presence/PresenceListener.ts","../src/features/errorStatus/ErrorStatusCategory.enum.ts","../src/features/errorStatus/ErrorStatusActionType.enum.ts","../src/features/signal/SignalListener.ts","../src/features/networkStatus/NetworkStatusActionType.enum.ts","../src/features/networkStatus/NetworkStatusCategory.enum.ts","../src/features/errorStatus/ErrorStatusListener.ts","../src/features/subscriptionStatus/SubscriptionStatusActionType.enum.ts","../src/features/subscriptionStatus/SubscriptionStatusCategory.enum.ts","../src/features/networkStatus/NetworkStatusListener.ts","../src/features/subscriptionStatus/SubscriptionStatusListener.ts","../src/foundations/CombineListeners.ts","../src/features/channel/ChannelDataReducer.ts","../src/features/members/ChannelMembersReducer.ts","../src/features/channel/ChannelsListReducer.ts","../src/features/membership/MembershipReducer.ts","../src/features/message/MessageReducer.ts","../src/features/networkStatus/NetworkStatusReducer.ts","../src/features/presence/PresenceReducer.ts","../src/features/helpers/PubNubListener.ts","../src/features/signal/SignalReducer.ts","../src/features/user/UserDataReducer.ts","../src/features/user/UsersListReducer.ts"],"sourcesContent":["export enum MembershipActionType {\n  // fetchMemberships()\n  FETCH_MEMBERSHIPS_COMMAND = 'pubnub/FETCH_MEMBERSHIPS_COMMAND',\n  FETCHING_MEMBERSHIPS = 'pubnub/FETCHING_MEMBERSHIPS',\n  MEMBERSHIPS_RETRIEVED = 'pubnub/MEMBERSHIPS_RETRIEVED',\n  ERROR_FETCHING_MEMBERSHIPS = 'pubnub/ERROR_FETCHING_MEMBERSHIPS',\n  // setMemberships()\n  SET_MEMBERSHIPS_COMMAND = 'pubnub/SET_MEMBERSHIPS_COMMAND',\n  SETTING_MEMBERSHIPS = 'pubnub/SETTING_MEMBERSHIPS',\n  MEMBERSHIPS_SET = 'pubnub/MEMBERSHIPS_SET',\n  ERROR_SETTING_MEMBERSHIPS = 'pubnub/ERROR_SETTING_MEMBERSHIPS',\n  // removeMemberships()\n  REMOVE_MEMBERSHIPS_COMMAND = 'pubnub/REMOVE_MEMBERSHIPS_COMMAND',\n  REMOVING_MEMBERSHIPS = 'pubnub/REMOVING_MEMBERSHIPS',\n  MEMBERSHIPS_REMOVED = 'pubnub/MEMBERSHIPS_REMOVED',\n  ERROR_REMOVING_MEMBERSHIPS = 'pubnub/ERROR_REMOVING_MEMBERSHIPS',\n  // objects events\n  MEMBERSHIP_REMOVED_EVENT = 'pubnub/MEMBERSHIP_REMOVED_EVENT',\n  MEMBERSHIP_SET_EVENT = 'pubnub/MEMBERSHIP_SET_EVENT',\n}\n","export enum ChannelMembersActionType {\n  // fetchChannelMembers()\n  FETCH_CHANNEL_MEMBERS_COMMAND = 'pubnub/FETCH_CHANNEL_MEMBERS_COMMAND',\n  FETCHING_CHANNEL_MEMBERS = 'pubnub/FETCHING_CHANNEL_MEMBERS',\n  CHANNEL_MEMBERS_RETRIEVED = 'pubnub/CHANNEL_MEMBERS_RETRIEVED',\n  ERROR_FETCHING_CHANNEL_MEMBERS = 'pubnub/ERROR_FETCHING_CHANNEL_MEMBERS',\n  // setChannelMembers()\n  SET_CHANNEL_MEMBERS_COMMAND = 'pubnub/SET_CHANNEL_MEMBERS_COMMAND',\n  SETTING_CHANNEL_MEMBERS = 'pubnub/SETTING_CHANNEL_MEMBERS',\n  CHANNEL_MEMBERS_SET = 'pubnub/CHANNEL_MEMBERS_SET',\n  ERROR_SETTING_CHANNEL_MEMBERS = 'pubnub/ERROR_SETTING_CHANNEL_MEMBERS',\n  // removeChannelMembers()\n  REMOVE_CHANNEL_MEMBERS_COMMAND = 'pubnub/REMOVE_CHANNEL_MEMBERS_COMMAND',\n  REMOVING_CHANNEL_MEMBERS = 'pubnub/REMOVING_CHANNEL_MEMBERS',\n  CHANNEL_MEMBERS_REMOVED = 'pubnub/CHANNEL_MEMBERS_REMOVED',\n  ERROR_REMOVING_CHANNEL_MEMBERS = 'pubnub/ERROR_REMOVING_CHANNEL_MEMBERS',\n}\n","import { Dispatch } from 'redux';\nimport {\n  RemovingChannelsAction,\n  MembershipsRemovedAction,\n  SetMembershipsSuccess,\n  ErrorRemovingMembershipsAction,\n  SetMembershipsError,\n  SetMembershipsRequest,\n  RemoveMembershipsRequest,\n} from '../MembershipActions';\nimport { MembershipActionType } from '../MembershipActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\nimport { ObjectCustom } from 'pubnub';\n\nexport const removingMemberships = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsRequest<ChannelCustom>,\n  meta?: Meta\n): RemovingChannelsAction<ChannelCustom, Meta> => ({\n  type: MembershipActionType.REMOVING_MEMBERSHIPS,\n  payload,\n  meta,\n});\n\nexport const membershipsRemoved = <\n  MembershipCustom extends ObjectCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsSuccess<MembershipCustom, ChannelCustom>,\n  meta?: Meta\n): MembershipsRemovedAction<MembershipCustom, ChannelCustom, Meta> => ({\n  type: MembershipActionType.MEMBERSHIPS_REMOVED,\n  payload,\n  meta,\n});\n\nexport const errorRemovingMemberships = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsError<ChannelCustom>,\n  meta?: Meta\n): ErrorRemovingMembershipsAction<ChannelCustom, Meta> => ({\n  type: MembershipActionType.ERROR_REMOVING_MEMBERSHIPS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const removeMemberships = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: RemoveMembershipsRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<\n      MembershipsRemovedAction<MembershipCustom, ChannelCustom, Meta>\n    >((resolve, reject) => {\n      dispatch(removingMemberships<ChannelCustom, Meta>(request, meta));\n\n      pubnub.api.objects.removeMemberships<MembershipCustom, ChannelCustom>(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorRemovingMemberships(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = membershipsRemoved<\n              MembershipCustom,\n              ChannelCustom,\n              Meta\n            >(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = MembershipActionType.REMOVE_MEMBERSHIPS_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  FetchingMembershipsAction,\n  MembershipsRetrievedAction,\n  FetchMembershipsSuccess,\n  ErrorFetchingMembershipsAction,\n  FetchMembershipsError,\n  FetchMembershipsRequest,\n} from '../MembershipActions';\nimport { MembershipActionType } from '../MembershipActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingMemberships = <Meta extends ActionMeta>(\n  payload: FetchMembershipsRequest,\n  meta?: Meta\n): FetchingMembershipsAction<Meta> => ({\n  type: MembershipActionType.FETCHING_MEMBERSHIPS,\n  payload,\n  meta,\n});\n\nexport const membershipsRetrieved = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchMembershipsSuccess<MembershipCustom, ChannelCustom>,\n  meta?: Meta\n): MembershipsRetrievedAction<MembershipCustom, ChannelCustom, Meta> => ({\n  type: MembershipActionType.MEMBERSHIPS_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingMemberships = <Meta extends ActionMeta>(\n  payload: FetchMembershipsError,\n  meta?: Meta\n): ErrorFetchingMembershipsAction<Meta> => ({\n  type: MembershipActionType.ERROR_FETCHING_MEMBERSHIPS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchMemberships = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchMembershipsRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<\n      MembershipsRetrievedAction<MembershipCustom, ChannelCustom, Meta>\n    >((resolve, reject) => {\n      dispatch(fetchingMemberships<Meta>(request, meta));\n\n      pubnub.api.objects.getMemberships<MembershipCustom, ChannelCustom>(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorFetchingMemberships<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = membershipsRetrieved<\n              MembershipCustom,\n              ChannelCustom,\n              Meta\n            >(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = MembershipActionType.FETCH_MEMBERSHIPS_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  SettingMembershipsAction,\n  MembershipsSetAction,\n  SetMembershipsSuccess,\n  ErrorSettingMembershipsAction,\n  SetMembershipsError,\n  SetMembershipsRequest,\n} from '../MembershipActions';\nimport { MembershipActionType } from '../MembershipActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const settingMemberships = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsRequest<ChannelCustom>,\n  meta?: Meta\n): SettingMembershipsAction<ChannelCustom, Meta> => ({\n  type: MembershipActionType.SETTING_MEMBERSHIPS,\n  payload,\n  meta,\n});\n\nexport const membershipsSet = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsSuccess<MembershipCustom, ChannelCustom>,\n  meta?: Meta\n): MembershipsSetAction<MembershipCustom, ChannelCustom, Meta> => ({\n  type: MembershipActionType.MEMBERSHIPS_SET,\n  payload,\n  meta,\n});\n\nexport const errorSettingMemberships = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsError<ChannelCustom>,\n  meta?: Meta\n): ErrorSettingMembershipsAction<ChannelCustom, Meta> => ({\n  type: MembershipActionType.ERROR_SETTING_MEMBERSHIPS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const setMemberships = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SetMembershipsRequest<ChannelCustom>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<MembershipsSetAction<MembershipCustom, ChannelCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(settingMemberships<ChannelCustom, Meta>(request, meta));\n\n        pubnub.api.objects.setMemberships<MembershipCustom, ChannelCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(\n                errorSettingMemberships<ChannelCustom, Meta>(payload, meta)\n              );\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = membershipsSet<\n                MembershipCustom,\n                ChannelCustom,\n                Meta\n              >(payload, meta);\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = MembershipActionType.SET_MEMBERSHIPS_COMMAND;\n\n  return thunkFunction;\n};\n","export enum MessageActionType {\n  SEND_MESSAGE_COMMAND = 'pubnub/SEND_MESSAGE_COMMAND',\n  FETCH_MESSAGE_HISTORY_COMMAND = 'pubnub/FETCH_MESSAGE_HISTORY_COMMAND',\n  MESSAGE_RECEIVED = 'pubnub/MESSAGE_RECEIVED',\n  SENDING_MESSAGE = 'pubnub/SENDING_MESSAGE',\n  MESSAGE_SENT = 'pubnub/MESSAGE_SENT',\n  ERROR_SENDING_MESSAGE = 'pubnub/ERROR_SENDING_MESSAGE',\n  FETCHING_MESSAGE_HISTORY = 'pubnub/FETCHING_MESSAGE_HISTORY',\n  MESSAGE_HISTORY_RETRIEVED = 'pubnub/MESSAGE_HISTORY_RETRIEVED',\n  ERROR_FETCHING_MESSAGE_HISTORY = 'pubnub/ERROR_FETCHING_MESSAGE_HISTORY',\n}\n","import { Dispatch } from 'redux';\nimport {\n  ChannelMembersRetrievedAction,\n  ErrorFetchingChannelMembersAction,\n  FetchingChannelMembersAction,\n  FetchChannelMembersError,\n  FetchChannelMembersSuccess,\n  FetchChannelMembersRequest,\n} from '../ChannelMembersActions';\nimport { ChannelMembersActionType } from '../ChannelMembersActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingChannelMembers = <Meta extends ActionMeta>(\n  payload: FetchChannelMembersRequest,\n  meta?: Meta\n): FetchingChannelMembersAction<Meta> => ({\n  type: ChannelMembersActionType.FETCHING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n});\n\nexport const channelMembersRetrieved = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchChannelMembersSuccess<MembershipCustom, UserCustom>,\n  meta?: Meta\n): ChannelMembersRetrievedAction<MembershipCustom, UserCustom, Meta> => ({\n  type: ChannelMembersActionType.CHANNEL_MEMBERS_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingChannelMembers = <Meta extends ActionMeta>(\n  payload: FetchChannelMembersError,\n  meta?: Meta\n): ErrorFetchingChannelMembersAction<Meta> => ({\n  type: ChannelMembersActionType.ERROR_FETCHING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchChannelMembers = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchChannelMembersRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<\n      ChannelMembersRetrievedAction<MembershipCustom, UserCustom, Meta>\n    >((resolve, reject) => {\n      dispatch(fetchingChannelMembers<Meta>(request, meta));\n\n      pubnub.api.objects.getChannelMembers<MembershipCustom, UserCustom>(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorFetchingChannelMembers<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = channelMembersRetrieved<\n              MembershipCustom,\n              UserCustom,\n              Meta\n            >(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = ChannelMembersActionType.FETCH_CHANNEL_MEMBERS_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  SettingChannelMembersAction,\n  ChannelMembersSetAction,\n  ErrorSettingChannelMembersAction,\n  SetChannelMembersError,\n  SetChannelMembersSuccess,\n  SetChannelMembersRequest,\n} from '../ChannelMembersActions';\nimport { ChannelMembersActionType } from '../ChannelMembersActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const settingChannelMembers = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelMembersRequest<UserCustom>,\n  meta?: Meta\n): SettingChannelMembersAction<UserCustom, Meta> => ({\n  type: ChannelMembersActionType.SETTING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n});\n\nexport const channelMembersSet = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelMembersSuccess<MembershipCustom, UserCustom>,\n  meta?: Meta\n): ChannelMembersSetAction<MembershipCustom, UserCustom, Meta> => ({\n  type: ChannelMembersActionType.CHANNEL_MEMBERS_SET,\n  payload,\n  meta,\n});\n\nexport const errorSettingChannelMembers = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelMembersError<UserCustom>,\n  meta?: Meta\n): ErrorSettingChannelMembersAction<UserCustom, Meta> => ({\n  type: ChannelMembersActionType.ERROR_SETTING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const setChannelMembers = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SetChannelMembersRequest<MembershipCustom>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<ChannelMembersSetAction<MembershipCustom, UserCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(settingChannelMembers(request, meta));\n\n        pubnub.api.objects.setChannelMembers<MembershipCustom, UserCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(\n                errorSettingChannelMembers<MembershipCustom, Meta>(\n                  payload,\n                  meta\n                )\n              );\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = channelMembersSet<\n                MembershipCustom,\n                UserCustom,\n                Meta\n              >(payload, meta);\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = ChannelMembersActionType.SET_CHANNEL_MEMBERS_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  RemovingChannelMembersAction,\n  ChannelMembersRemovedAction,\n  ErrorRemovingChannelMembersAction,\n  SetChannelMembersError,\n  SetChannelMembersSuccess,\n  RemoveChannelMembersRequest,\n} from '../ChannelMembersActions';\nimport { ChannelMembersActionType } from '../ChannelMembersActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const removingChannelMembers = <Meta extends ActionMeta>(\n  payload: RemoveChannelMembersRequest,\n  meta?: Meta\n): RemovingChannelMembersAction<Meta> => ({\n  type: ChannelMembersActionType.REMOVING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n});\n\nexport const channelMembersRemoved = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelMembersSuccess<MembershipCustom, UserCustom>,\n  meta?: Meta\n): ChannelMembersRemovedAction<MembershipCustom, UserCustom, Meta> => ({\n  type: ChannelMembersActionType.CHANNEL_MEMBERS_REMOVED,\n  payload,\n  meta,\n});\n\nexport const errorRemovingChannelMembers = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelMembersError<UserCustom>,\n  meta?: Meta\n): ErrorRemovingChannelMembersAction<UserCustom, Meta> => ({\n  type: ChannelMembersActionType.ERROR_REMOVING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const removeChannelMembers = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: RemoveChannelMembersRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<\n      ChannelMembersRemovedAction<MembershipCustom, UserCustom, Meta>\n    >((resolve, reject) => {\n      dispatch(removingChannelMembers<Meta>(request, meta));\n\n      pubnub.api.objects.removeChannelMembers<MembershipCustom, UserCustom>(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(\n              errorRemovingChannelMembers<MembershipCustom, Meta>(payload, meta)\n            );\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = channelMembersRemoved<\n              MembershipCustom,\n              UserCustom,\n              Meta\n            >(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = ChannelMembersActionType.REMOVE_CHANNEL_MEMBERS_COMMAND;\n\n  return thunkFunction;\n};\n","export enum SignalActionType {\n  SEND_SIGNAL_COMMAND = 'pubnub/SEND_SIGNAL_COMMAND',\n  SIGNAL_RECEIVED = 'pubnub/SIGNAL_RECEIVED',\n  SENDING_SIGNAL = 'pubnub/SENDING_SIGNAL',\n  SIGNAL_SENT = 'pubnub/SIGNAL_SENT',\n  ERROR_SENDING_SIGNAL = 'pubnub/ERROR_SENDING_SIGNAL',\n}\n","import { Dispatch } from 'redux';\nimport {\n  SendMessageRequest,\n  SendingMessageAction,\n  MessageSentAction,\n  SendMessageSuccess,\n  ErrorSendingMessageAction,\n  SendMessageError,\n} from '../MessageActions';\nimport { MessageActionType } from '../MessageActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport const sendingMessage = <\n  MessageContentType extends object,\n  MessageMeta extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendMessageRequest<MessageContentType, MessageMeta>,\n  meta?: Meta\n): SendingMessageAction<MessageContentType, MessageMeta, Meta> => ({\n  type: MessageActionType.SENDING_MESSAGE,\n  payload,\n  meta,\n});\n\nexport const messageSent = <\n  MessageContentType extends object,\n  MessageMeta extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendMessageSuccess<MessageContentType, MessageMeta>,\n  meta?: Meta\n): MessageSentAction<MessageContentType, MessageMeta, Meta> => ({\n  type: MessageActionType.MESSAGE_SENT,\n  payload,\n  meta,\n});\n\nexport const errorSendingMessage = <\n  MessageContentType extends object,\n  MessageMeta extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendMessageError<MessageContentType, MessageMeta>,\n  meta?: Meta\n): ErrorSendingMessageAction<MessageContentType, MessageMeta, Meta> => ({\n  type: MessageActionType.ERROR_SENDING_MESSAGE,\n  payload,\n  meta,\n});\n\nexport const sendMessage = <\n  MessageContentType extends object = {},\n  MessageMeta extends object = {},\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SendMessageRequest<MessageContentType, MessageMeta>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<MessageSentAction<MessageContentType, MessageMeta, Meta>>(\n      (resolve, reject) => {\n        dispatch(sendingMessage(request, meta));\n\n        pubnub.api.publish(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(\n                errorSendingMessage<MessageContentType, MessageMeta, Meta>(\n                  payload,\n                  meta\n                )\n              );\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = messageSent<MessageContentType, MessageMeta, Meta>(\n                payload,\n                meta\n              );\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = MessageActionType.SEND_MESSAGE_COMMAND;\n\n  return thunkFunction;\n};\n","export enum ChannelDataActionType {\n  // fetchAllChannelData()\n  FETCH_ALL_CHANNEL_DATA_COMMAND = 'pubnub/FETCH_ALL_CHANNEL_DATA_COMMAND',\n  FETCHING_ALL_CHANNEL_DATA = 'pubnub/FETCHING_ALL_CHANNEL_DATA',\n  ALL_CHANNEL_DATA_RETRIEVED = 'pubnub/ALL_CHANNEL_DATA_RETRIEVED',\n  ERROR_FETCHING_ALL_CHANNEL_DATA = 'pubnub/ERROR_FETCHING_ALL_CHANNEL_DATA',\n  // fetchChannelData()\n  FETCH_CHANNEL_DATA_COMMAND = 'pubnub/FETCH_CHANNEL_DATA_COMMAND',\n  FETCHING_CHANNEL_DATA = 'pubnub/FETCHING_CHANNEL_DATA',\n  CHANNEL_DATA_RETRIEVED = 'pubnub/CHANNEL_DATA_RETRIEVED',\n  ERROR_FETCHING_CHANNEL_DATA = 'pubnub/ERROR_FETCHING_CHANNEL_DATA',\n  // setChannelData()\n  SET_CHANNEL_DATA_COMMAND = 'pubnub/SET_CHANNEL_DATA_COMMAND',\n  SETTING_CHANNEL_DATA = 'pubnub/SETTING_CHANNEL_DATA',\n  CHANNEL_DATA_SET = 'pubnub/CHANNEL_DATA_SET',\n  ERROR_SETTING_CHANNEL_DATA = 'pubnub/ERROR_SETTING_CHANNEL_DATA',\n  // removeChannelData()\n  REMOVE_CHANNEL_DATA_COMMAND = 'pubnub/REMOVE_CHANNEL_DATA_COMMAND',\n  REMOVING_CHANNEL_DATA = 'pubnub/REMOVING_CHANNEL_DATA',\n  CHANNEL_DATA_REMOVED = 'pubnub/CHANNEL_DATA_REMOVED',\n  ERROR_REMOVING_CHANNEL_DATA = 'pubnub/ERROR_REMOVING_CHANNEL_DATA',\n  // objects events\n  CHANNEL_DATA_SET_EVENT = 'pubnub/CHANNEL_DATA_SET_EVENT',\n  CHANNEL_DATA_REMOVED_EVENT = 'pubnub/CHANNEL_DATA_REMOVED_EVENT',\n}\n","import { Dispatch } from 'redux';\nimport {\n  SendSignalRequest,\n  SendingSignalAction,\n  SignalSentAction,\n  SendSignalSuccess,\n  ErrorSendingSignalAction,\n  SendSignalError,\n} from '../SignalActions';\nimport { SignalActionType } from '../SignalActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport const sendingSignal = <\n  SignalContentType extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendSignalRequest<SignalContentType>,\n  meta?: Meta\n): SendingSignalAction<SignalContentType, Meta> => ({\n  type: SignalActionType.SENDING_SIGNAL,\n  payload,\n  meta,\n});\n\nexport const signalSent = <\n  SignalContentType extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendSignalSuccess<SignalContentType>,\n  meta?: Meta\n): SignalSentAction<SignalContentType, Meta> => ({\n  type: SignalActionType.SIGNAL_SENT,\n  payload,\n  meta,\n});\n\nexport const errorSendingSignal = <\n  SignalContentType extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendSignalError<SignalContentType>,\n  meta?: Meta\n): ErrorSendingSignalAction<SignalContentType, Meta> => ({\n  type: SignalActionType.ERROR_SENDING_SIGNAL,\n  payload,\n  meta,\n});\n\nexport const sendSignal = <\n  SignalContentType extends object = {},\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SendSignalRequest<SignalContentType>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<SignalSentAction<SignalContentType, Meta>>(\n      (resolve, reject) => {\n        dispatch(sendingSignal(request, meta));\n\n        pubnub.api.signal(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(\n                errorSendingSignal<SignalContentType, Meta>(payload, meta)\n              );\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = signalSent<SignalContentType, Meta>(payload, meta);\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = SignalActionType.SEND_SIGNAL_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  FetchMessageHistoryRequest,\n  FetchMessageHistoryResponse,\n  FetchMessageHistoryError,\n  FetchingMessageHistoryAction,\n  ErrorFetchingMessageHistoryAction,\n  MessageHistoryRetrievedAction,\n  FetchMessageHistorySuccess,\n} from '../../message/MessageActions';\nimport { MessageActionType } from '../../message/MessageActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta } from 'foundations/ActionMeta';\nimport Pubnub from 'pubnub';\n\nexport const fetchingMessageHistory = <Meta extends ActionMeta>(\n  payload: FetchMessageHistoryRequest,\n  meta?: Meta\n): FetchingMessageHistoryAction<Meta> => ({\n  type: MessageActionType.FETCHING_MESSAGE_HISTORY,\n  payload,\n  meta,\n});\n\nexport const messageHistoryRetrieved = <\n  MessageContentType,\n  Meta extends ActionMeta\n>(\n  payload: FetchMessageHistorySuccess<MessageContentType>,\n  meta?: Meta\n): MessageHistoryRetrievedAction<MessageContentType, Meta> => ({\n  type: MessageActionType.MESSAGE_HISTORY_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingMessageHistory = <Meta extends ActionMeta>(\n  payload: FetchMessageHistoryError,\n  meta?: Meta\n): ErrorFetchingMessageHistoryAction<Meta> => ({\n  type: MessageActionType.ERROR_FETCHING_MESSAGE_HISTORY,\n  payload,\n  meta,\n});\n\nexport const fetchMessageHistory = <\n  MessageContentType,\n  Meta extends ActionMeta\n>(\n  request: FetchMessageHistoryRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<MessageHistoryRetrievedAction<MessageContentType, Meta>>(\n      (resolve, reject) => {\n        dispatch(fetchingMessageHistory(request, meta));\n\n        pubnub.api.history(\n          {\n            ...(request as Pubnub.HistoryParameters),\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(errorFetchingMessageHistory<Meta>(payload, meta));\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response: response as FetchMessageHistoryResponse<\n                  MessageContentType\n                >,\n                status,\n              };\n\n              const action = messageHistoryRetrieved<MessageContentType, Meta>(\n                payload,\n                meta\n              );\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = MessageActionType.FETCH_MESSAGE_HISTORY_COMMAND;\n\n  return thunkFunction;\n};\n","export enum UserDataActionType {\n  // fetchAllUserData()\n  FETCH_ALL_USER_DATA_COMMAND = 'pubnub/FETCH_ALL_USER_DATA_COMMAND',\n  FETCHING_ALL_USER_DATA = 'pubnub/FETCHING_ALL_USER_DATA',\n  ALL_USER_DATA_RETRIEVED = 'pubnub/ALL_USER_DATA_RETRIEVED',\n  ERROR_FETCHING_ALL_USER_DATA = 'pubnub/ERROR_FETCHING_ALL_USER_DATA',\n  // fetchUserData()\n  FETCH_USER_DATA_COMMAND = 'pubnub/FETCH_USER_DATA_COMMAND',\n  FETCHING_USER_DATA = 'pubnub/FETCHING_USER_DATA',\n  USER_DATA_RETRIEVED = 'pubnub/USER_DATA_RETRIEVED',\n  ERROR_FETCHING_USER_DATA = 'pubnub/ERROR_FETCHING_USER_DATA',\n  // setUserData()\n  SET_USER_DATA_COMMAND = 'pubnub/SET_USER_DATA_COMMAND',\n  SETTING_USER_DATA = 'pubnub/SETTING_USER_DATA',\n  USER_DATA_SET = 'pubnub/USER_DATA_SET',\n  ERROR_SETTING_USER_DATA = 'pubnub/ERROR_SETTING_USER_DATA',\n  // removeUserData()\n  REMOVE_USER_DATA_COMMAND = 'pubnub/REMOVE_USER_DATA_COMMAND',\n  REMOVING_USER_DATA = 'pubnub/REMOVING_USER_DATA',\n  USER_DATA_REMOVED = 'pubnub/USER_DATA_REMOVED',\n  ERROR_REMOVING_USER_DATA = 'pubnub/ERROR_REMOVING_USER_DATA',\n  // objects events\n  USER_DATA_SET_EVENT = 'pubnub/USER_DATA_SET_EVENT',\n  USER_DATA_REMOVED_EVENT = 'pubnub/USER_DATA_REMOVED_EVENT',\n}\n","import { Dispatch } from 'redux';\nimport {\n  ChannelDataRemovedAction,\n  RemovingChannelDataAction,\n  ErrorRemovingChannelDataAction,\n  RemoveChannelRequest,\n  RemoveChannelError,\n  RemoveChannelSuccess,\n} from '../ChannelDataActions';\nimport { ChannelDataActionType } from '../ChannelDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport const removingChannelData = <Meta extends ActionMeta>(\n  payload: RemoveChannelRequest,\n  meta?: Meta\n): RemovingChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.REMOVING_CHANNEL_DATA,\n  payload,\n  meta,\n});\n\nexport const channelDataRemoved = <Meta extends ActionMeta>(\n  payload: RemoveChannelSuccess,\n  meta?: Meta\n): ChannelDataRemovedAction<Meta> => ({\n  type: ChannelDataActionType.CHANNEL_DATA_REMOVED,\n  payload,\n  meta,\n});\n\nexport const errorRemovingChannelData = <Meta extends ActionMeta>(\n  payload: RemoveChannelError,\n  meta?: Meta\n): ErrorRemovingChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.ERROR_REMOVING_CHANNEL_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const removeChannelData = <Meta extends ActionMeta = AnyMeta>(\n  request: RemoveChannelRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<ChannelDataRemovedAction<Meta>>((resolve, reject) => {\n      dispatch(removingChannelData<Meta>(request, meta));\n\n      pubnub.api.objects.removeChannelMetadata(\n        { channel: request.channel },\n        (status) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorRemovingChannelData<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              status,\n            };\n\n            const action = channelDataRemoved<Meta>(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = ChannelDataActionType.REMOVE_CHANNEL_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport { ChannelDataActionType } from '../ChannelDataActionType.enum';\nimport {\n  ErrorFetchingChannelDataAction,\n  ChannelDataRetrievedAction,\n  FetchingChannelDataAction,\n  FetchChannelDataError,\n  FetchChannelDataSuccess,\n  FetchChannelDataRequest,\n} from '../ChannelDataActions';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingChannelData = <Meta extends ActionMeta>(\n  payload: FetchChannelDataRequest,\n  meta?: Meta\n): FetchingChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.FETCHING_CHANNEL_DATA,\n  payload,\n  meta,\n});\n\nexport const channelDataRetrieved = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchChannelDataSuccess<ChannelCustom>,\n  meta?: Meta\n): ChannelDataRetrievedAction<ChannelCustom, Meta> => ({\n  type: ChannelDataActionType.CHANNEL_DATA_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingChannelData = <Meta extends ActionMeta>(\n  payload: FetchChannelDataError,\n  meta?: Meta\n): ErrorFetchingChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.ERROR_FETCHING_CHANNEL_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchChannelData = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchChannelDataRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<ChannelDataRetrievedAction<ChannelCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(\n          fetchingChannelData<Meta>(\n            {\n              ...request,\n            },\n            meta\n          )\n        );\n\n        pubnub.api.objects.getChannelMetadata<ChannelCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(errorFetchingChannelData<Meta>(payload, meta));\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = channelDataRetrieved<ChannelCustom, Meta>(\n                payload,\n                meta\n              );\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = ChannelDataActionType.FETCH_CHANNEL_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  ErrorFetchingAllChannelDataAction,\n  AllChannelDataRetrievedAction,\n  FetchingAllChannelDataAction,\n  FetchAllChannelDataError,\n  FetchAllChannelDataSuccess,\n  FetchAllChannelDataRequest,\n} from '../ChannelDataActions';\nimport { ChannelDataActionType } from '../ChannelDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingAllChannelData = <Meta extends ActionMeta>(\n  payload: FetchAllChannelDataRequest,\n  meta?: Meta\n): FetchingAllChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.FETCHING_ALL_CHANNEL_DATA,\n  payload,\n  meta,\n});\n\nexport const allChannelDataRetrieved = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchAllChannelDataSuccess<ChannelCustom>,\n  meta?: Meta\n): AllChannelDataRetrievedAction<ChannelCustom, Meta> => ({\n  type: ChannelDataActionType.ALL_CHANNEL_DATA_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingAllChannelData = <Meta extends ActionMeta>(\n  payload: FetchAllChannelDataError,\n  meta?: Meta\n): ErrorFetchingAllChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.ERROR_FETCHING_ALL_CHANNEL_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchAllChannelData = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchAllChannelDataRequest = {},\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<AllChannelDataRetrievedAction<ChannelCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(fetchingAllChannelData<Meta>(request, meta));\n\n        pubnub.api.objects.getAllChannelMetadata<ChannelCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(errorFetchingAllChannelData<Meta>(payload, meta));\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = allChannelDataRetrieved<ChannelCustom, Meta>(\n                payload,\n                meta\n              );\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = ChannelDataActionType.FETCH_ALL_CHANNEL_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  SettingChannelDataAction,\n  ChannelDataSetAction,\n  ErrorSettingChannelDataAction,\n  SetChannelDataError,\n  SetChannelDataSuccess,\n  SetChannelDataRequest,\n} from '../ChannelDataActions';\nimport { ChannelDataActionType } from '../ChannelDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const settingChannelData = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelDataRequest<ChannelCustom>,\n  meta?: Meta\n): SettingChannelDataAction<ChannelCustom, Meta> => ({\n  type: ChannelDataActionType.SETTING_CHANNEL_DATA,\n  payload,\n  meta,\n});\n\nexport const channelDataSet = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelDataSuccess<ChannelCustom>,\n  meta?: Meta\n): ChannelDataSetAction<ChannelCustom, Meta> => ({\n  type: ChannelDataActionType.CHANNEL_DATA_SET,\n  payload,\n  meta,\n});\n\nexport const errorSettingChannelData = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelDataError<ChannelCustom>,\n  meta?: Meta\n): ErrorSettingChannelDataAction<ChannelCustom, Meta> => ({\n  type: ChannelDataActionType.ERROR_SETTING_CHANNEL_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const setChannelData = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SetChannelDataRequest<ChannelCustom>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<ChannelDataSetAction<ChannelCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(settingChannelData<ChannelCustom, Meta>(request, meta));\n\n        pubnub.api.objects.setChannelMetadata<ChannelCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(\n                errorSettingChannelData<ChannelCustom, Meta>(payload, meta)\n              );\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = channelDataSet<ChannelCustom, Meta>(payload, meta);\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = ChannelDataActionType.SET_CHANNEL_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","export enum PresenceActionType {\n  HERE_NOW_COMMAND = 'pubnub/HERE_NOW_COMMAND',\n  PRESENCE_STATE_COMMAND = 'pubnub/PRESENCE_STATE_COMMAND',\n  FETCHING_HERE_NOW = 'pubnub/FETCHING_HERE_NOW',\n  HERE_NOW_RETRIEVED = 'pubnub/HERE_NOW_RETRIEVED',\n  ERROR_FETCHING_HERE_NOW = 'pubnub/ERROR_FETCHING_HERE_NOW',\n  FETCHING_PRESENCE_STATE = 'pubnub/FETCHING_PRESENCE_STATE',\n  PRESENCE_STATE_RETRIEVED = 'pubnub/PRESENCE_STATE_RETRIEVED',\n  ERROR_FETCHING_PRESENCE_STATE = 'pubnub/ERROR_FETCHING_PRESENCE_STATE',\n  JOIN_EVENT = 'pubnub/JOIN_EVENT',\n  LEAVE_EVENT = 'pubnub/LEAVE_EVENT',\n  TIMEOUT_EVENT = 'pubnub/TIMEOUT_EVENT',\n  STATE_CHANGE_EVENT = 'pubnub/STATE_CHANGE_EVENT',\n}\n","import { Dispatch } from 'redux';\nimport {\n  UserDataRemovedAction,\n  RemovingUserDataAction,\n  ErrorRemovingUserDataAction,\n  DeleteUserDataRequest,\n  DeleteUserDataError,\n  DeleteUserDataSuccess,\n} from '../UserDataActions';\nimport { UserDataActionType } from '../UserDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport const removingUserData = <Meta extends ActionMeta>(\n  payload: DeleteUserDataRequest,\n  meta?: Meta\n): RemovingUserDataAction<Meta> => ({\n  type: UserDataActionType.REMOVING_USER_DATA,\n  payload,\n  meta,\n});\n\nexport const UserDataRemoved = <Meta extends ActionMeta>(\n  payload: DeleteUserDataSuccess,\n  meta?: Meta\n): UserDataRemovedAction<Meta> => ({\n  type: UserDataActionType.USER_DATA_REMOVED,\n  payload,\n  meta,\n});\n\nexport const errorRemovingUserData = <Meta extends ActionMeta>(\n  payload: DeleteUserDataError,\n  meta?: Meta\n): ErrorRemovingUserDataAction<Meta> => ({\n  type: UserDataActionType.ERROR_REMOVING_USER_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const removeUserData = <Meta extends ActionMeta = AnyMeta>(\n  request: DeleteUserDataRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<UserDataRemovedAction<Meta>>((resolve, reject) => {\n      dispatch(removingUserData<Meta>(request, meta));\n\n      pubnub.api.objects.removeUUIDMetadata(\n        { uuid: request.uuid },\n        (status) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorRemovingUserData<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              status,\n            };\n\n            const action = UserDataRemoved<Meta>(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = UserDataActionType.REMOVE_USER_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport { UserDataActionType } from '../UserDataActionType.enum';\nimport {\n  ErrorFetchingUserDataAction,\n  UserDataRetrievedAction,\n  FetchingUserDataAction,\n  FetchUserDataError,\n  FetchUserDataSuccess,\n  FetchUserDataRequest,\n} from '../UserDataActions';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingUserData = <Meta extends ActionMeta>(\n  payload: FetchUserDataRequest,\n  meta?: Meta\n): FetchingUserDataAction<Meta> => ({\n  type: UserDataActionType.FETCHING_USER_DATA,\n  payload,\n  meta,\n});\n\nexport const UserDataRetrieved = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchUserDataSuccess<UserCustom>,\n  meta?: Meta\n): UserDataRetrievedAction<UserCustom, Meta> => ({\n  type: UserDataActionType.USER_DATA_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingUserData = <Meta extends ActionMeta>(\n  payload: FetchUserDataError,\n  meta?: Meta\n): ErrorFetchingUserDataAction<Meta> => ({\n  type: UserDataActionType.ERROR_FETCHING_USER_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchUserData = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchUserDataRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<UserDataRetrievedAction<UserCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(\n          fetchingUserData<Meta>(\n            {\n              ...request,\n            },\n            meta\n          )\n        );\n\n        pubnub.api.objects.getUUIDMetadata<UserCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(errorFetchingUserData<Meta>(payload, meta));\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = UserDataRetrieved<UserCustom, Meta>(payload, meta);\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = UserDataActionType.FETCH_USER_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  ErrorFetchingAllUserDataAction,\n  AllUserDataRetrievedAction,\n  FetchingAllUserDataAction,\n  FetchAllUserDataError,\n  FetchAllUserDataSuccess,\n  FetchAllUserDataRequest,\n} from '../UserDataActions';\nimport { UserDataActionType } from '../UserDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingAllUserData = <Meta extends ActionMeta>(\n  payload: FetchAllUserDataRequest,\n  meta?: Meta\n): FetchingAllUserDataAction<Meta> => ({\n  type: UserDataActionType.FETCHING_ALL_USER_DATA,\n  payload,\n  meta,\n});\n\nexport const allUserDataRetrieved = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchAllUserDataSuccess<UserCustom>,\n  meta?: Meta\n): AllUserDataRetrievedAction<UserCustom, Meta> => ({\n  type: UserDataActionType.ALL_USER_DATA_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingAllUserData = <Meta extends ActionMeta = AnyMeta>(\n  payload: FetchAllUserDataError,\n  meta?: Meta\n): ErrorFetchingAllUserDataAction<Meta> => ({\n  type: UserDataActionType.ERROR_FETCHING_ALL_USER_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchAllUserData = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchAllUserDataRequest = {},\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<AllUserDataRetrievedAction<UserCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(fetchingAllUserData<Meta>(request, meta));\n\n        pubnub.api.objects.getAllUUIDMetadata<UserCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(errorFetchingAllUserData<Meta>(payload, meta));\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = allUserDataRetrieved<UserCustom, Meta>(\n                payload,\n                meta\n              );\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = UserDataActionType.FETCH_ALL_USER_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  SettingUserDataAction,\n  UserDataSetAction,\n  ErrorSettingUserDataAction,\n  UserDataError,\n  UserDataSuccess,\n  SetUserDataRequest,\n} from '../UserDataActions';\nimport { UserDataActionType } from '../UserDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const settingUserData = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetUserDataRequest<UserCustom>,\n  meta?: Meta\n): SettingUserDataAction<Meta> => ({\n  type: UserDataActionType.SETTING_USER_DATA,\n  payload,\n  meta,\n});\n\nexport const UserDataSet = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: UserDataSuccess<UserCustom>,\n  meta?: Meta\n): UserDataSetAction<UserCustom, Meta> => ({\n  type: UserDataActionType.USER_DATA_SET,\n  payload,\n  meta,\n});\n\nexport const errorSettingUserData = <Meta extends ActionMeta>(\n  payload: UserDataError,\n  meta?: Meta\n): ErrorSettingUserDataAction<Meta> => ({\n  type: UserDataActionType.ERROR_SETTING_USER_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const setUserData = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SetUserDataRequest<UserCustom>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<UserDataSetAction<UserCustom, Meta>>((resolve, reject) => {\n      dispatch(settingUserData<UserCustom, Meta>(request, meta));\n\n      pubnub.api.objects.setUUIDMetadata<UserCustom>(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorSettingUserData<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = UserDataSet<UserCustom, Meta>(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = UserDataActionType.SET_USER_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","export enum PresenceCategory {\n  JOIN = 'join',\n  STATE_CHANGE = 'state-change',\n  LEAVE = 'leave',\n  TIMEOUT = 'timeout',\n}\n","import { Dispatch } from 'redux';\nimport {\n  HereNowRequest,\n  HereNowError,\n  FetchingHereNowAction,\n  ErrorFetchingHereNowAction,\n  HereNowRetrievedAction,\n  HereNowSuccess,\n} from '../PresenceActions';\nimport { PresenceActionType } from '../PresenceActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta } from 'foundations/ActionMeta';\n\nexport const fetchingHereNow = <Meta extends ActionMeta>(\n  payload: HereNowRequest,\n  meta?: Meta\n): FetchingHereNowAction<Meta> => ({\n  type: PresenceActionType.FETCHING_HERE_NOW,\n  payload,\n  meta,\n});\n\nexport const hereNowRetrieved = <Meta extends ActionMeta>(\n  payload: HereNowSuccess,\n  meta?: Meta\n): HereNowRetrievedAction<Meta> => ({\n  type: PresenceActionType.HERE_NOW_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingHereNow = <Meta extends ActionMeta>(\n  payload: HereNowError,\n  meta?: Meta\n): ErrorFetchingHereNowAction<Meta> => ({\n  type: PresenceActionType.ERROR_FETCHING_HERE_NOW,\n  payload,\n  meta,\n});\n\nexport const fetchHereNow = <Meta extends ActionMeta>(\n  request: HereNowRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<HereNowRetrievedAction<Meta>>((resolve, reject) => {\n      dispatch(fetchingHereNow(request, meta));\n\n      pubnub.api.hereNow(\n        {\n          ...request,\n          includeUUIDs: true,\n          includeState: false,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorFetchingHereNow<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = hereNowRetrieved<Meta>(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = PresenceActionType.HERE_NOW_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  PresenceStateRequest,\n  PresenceStateError,\n  FetchingPresenceStateAction,\n  ErrorFetchingPresenceStateAction,\n  PresenceStateRetrievedAction,\n  PresenceStateSuccess,\n} from '../PresenceActions';\nimport { PresenceActionType } from '../PresenceActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta } from 'foundations/ActionMeta';\n\nexport const fetchingPresenceState = <Meta extends ActionMeta>(\n  payload: PresenceStateRequest,\n  meta?: Meta\n): FetchingPresenceStateAction<Meta> => ({\n  type: PresenceActionType.FETCHING_PRESENCE_STATE,\n  payload,\n  meta,\n});\n\nexport const presenceStateRetrieved = <Meta extends ActionMeta>(\n  payload: PresenceStateSuccess,\n  meta?: Meta\n): PresenceStateRetrievedAction<Meta> => ({\n  type: PresenceActionType.PRESENCE_STATE_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingPresenceState = <Meta extends ActionMeta>(\n  payload: PresenceStateError,\n  meta?: Meta\n): ErrorFetchingPresenceStateAction<Meta> => ({\n  type: PresenceActionType.ERROR_FETCHING_PRESENCE_STATE,\n  payload,\n  meta,\n});\n\nexport const fetchPresenceState = <Meta extends ActionMeta>(\n  request: PresenceStateRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<PresenceStateRetrievedAction<Meta>>((resolve, reject) => {\n      dispatch(fetchingPresenceState(request, meta));\n\n      pubnub.api.getState(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorFetchingPresenceState<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = presenceStateRetrieved<Meta>(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = PresenceActionType.PRESENCE_STATE_COMMAND;\n\n  return thunkFunction;\n};\n","import Pubnub from 'pubnub';\nimport { Dispatch } from 'redux';\nimport {\n  UserDataSetEventAction,\n  UserDataRemovedEventAction,\n  UserDataListenerActions,\n  UserDataEventMessage,\n  UsersListenerPayload,\n} from './UserDataActions';\nimport { UserDataActionType } from './UserDataActionType.enum';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const UserDataSet = <UserCustom extends ObjectsCustom>(\n  payload: UserDataEventMessage<UserCustom>\n): UserDataSetEventAction<UserCustom> => ({\n  type: UserDataActionType.USER_DATA_SET_EVENT,\n  payload,\n});\n\nexport const UserDataRemoved = <UserCustom extends ObjectsCustom>(\n  payload: UserDataEventMessage<UserCustom>\n): UserDataRemovedEventAction<UserCustom> => ({\n  type: UserDataActionType.USER_DATA_REMOVED_EVENT,\n  payload,\n});\n\nexport const createUserDataListener = <\n  UserCustom extends ObjectsCustom = ObjectsCustom\n>(\n  dispatch: Dispatch<UserDataListenerActions<UserCustom>>\n): Pubnub.ListenerParameters => ({\n  objects: (payload) => {\n    if (payload.message.type !== 'uuid') {\n      return;\n    }\n    switch (payload.message.event) {\n      case 'set':\n        dispatch(\n          UserDataSet<UserCustom>(\n            ((payload as unknown) as UsersListenerPayload<UserCustom>).message\n          )\n        );\n        break;\n      case 'delete':\n        dispatch(UserDataRemoved<UserCustom>(payload.message));\n        break;\n      default:\n        break;\n    }\n  },\n});\n","import Pubnub from 'pubnub';\nimport { Dispatch } from 'redux';\nimport {\n  ChannelDataSetEventAction,\n  ChannelDataRemovedEventAction,\n  ChannelDataListenerActions,\n  ChannelDataEventMessage,\n  Channel,\n} from './ChannelDataActions';\nimport { ChannelDataActionType } from './ChannelDataActionType.enum';\nimport { ObjectsCustom, GetChannelCustom } from 'foundations/ObjectsCustom';\n\nexport const channelDataSet = <ChannelCustom extends ObjectsCustom>(\n  payload: ChannelDataEventMessage<ChannelCustom>\n): ChannelDataSetEventAction<ChannelCustom> => ({\n  type: ChannelDataActionType.CHANNEL_DATA_SET_EVENT,\n  payload,\n});\n\nexport const channelDataRemoved = <ChannelCustom extends ObjectsCustom>(\n  payload: ChannelDataEventMessage<ChannelCustom>\n): ChannelDataRemovedEventAction<ChannelCustom> => ({\n  type: ChannelDataActionType.CHANNEL_DATA_REMOVED_EVENT,\n  payload,\n});\n\nexport const createChannelDataListener = <ChannelType extends Channel>(\n  dispatch: Dispatch<ChannelDataListenerActions<GetChannelCustom<ChannelType>>>\n) => ({\n  objects: (\n    payload: Pubnub.ObjectsEvent<\n      ObjectsCustom,\n      GetChannelCustom<ChannelType>,\n      ObjectsCustom\n    >\n  ) => {\n    if (payload.message.type !== 'channel') {\n      return;\n    }\n    switch (payload.message.event) {\n      case 'set':\n        dispatch(\n          channelDataSet<GetChannelCustom<ChannelType>>(payload.message)\n        );\n        break;\n      case 'delete':\n        dispatch(\n          channelDataRemoved<GetChannelCustom<ChannelType>>(payload.message)\n        );\n        break;\n      default:\n        break;\n    }\n  },\n});\n","import Pubnub from 'pubnub';\nimport { Dispatch } from 'redux';\nimport {\n  MembershipListenerActions,\n  MembershipSetEventAction,\n  MembershipRemovedEventAction,\n  MembershipEventMessage,\n} from './MembershipActions';\nimport { MembershipActionType } from './MembershipActionType.enum';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nconst membershipSetEventRecieved = <MembershipCustom extends ObjectsCustom>(\n  payload: MembershipEventMessage<MembershipCustom>\n): MembershipSetEventAction<MembershipCustom> => ({\n  type: MembershipActionType.MEMBERSHIP_SET_EVENT,\n  payload,\n});\n\nconst membershipRemovedEventRecieved = <MembershipCustom extends ObjectsCustom>(\n  payload: MembershipEventMessage<MembershipCustom>\n): MembershipRemovedEventAction<MembershipCustom> => ({\n  type: MembershipActionType.MEMBERSHIP_REMOVED_EVENT,\n  payload,\n});\n\nexport const createMembershipListener = <\n  MembershipCustom extends ObjectsCustom\n>(\n  dispatch: Dispatch<MembershipListenerActions<MembershipCustom>>\n): Pubnub.ListenerParameters => ({\n  objects: (payload) => {\n    if (payload.message.type === 'membership') {\n      switch (payload.message.event) {\n        case 'set':\n          dispatch(\n            membershipSetEventRecieved<MembershipCustom>(\n              (payload as Pubnub.SetMembershipEvent<MembershipCustom>).message\n            )\n          );\n          break;\n        case 'delete':\n          dispatch(\n            membershipRemovedEventRecieved<MembershipCustom>(payload.message)\n          );\n          break;\n        default:\n          break;\n      }\n    }\n  },\n});\n","import Pubnub from 'pubnub';\nimport { Dispatch } from 'redux';\nimport { MessageReceivedAction, Message } from './MessageActions';\nimport { MessageActionType } from './MessageActionType.enum';\n\nexport const messageReceived = <MessageType extends Message>(\n  payload: MessageType\n): MessageReceivedAction<MessageType> => ({\n  type: MessageActionType.MESSAGE_RECEIVED,\n  payload,\n});\n\nexport const createMessageListener = <MessageType extends Message>(\n  dispatch: Dispatch<MessageReceivedAction<MessageType>>\n): Pubnub.ListenerParameters => ({\n  message: (payload) =>\n    dispatch(messageReceived<MessageType>((payload as unknown) as MessageType)),\n});\n","import { Dispatch } from 'redux';\nimport Pubnub from 'pubnub';\nimport {\n  PresenceListenerActions,\n  JoinEventAction,\n  LeaveEventAction,\n  TimeoutEventAction,\n  StateChangeEventAction,\n  PresenceEventMessage,\n} from './PresenceActions';\nimport { PresenceActionType } from './PresenceActionType.enum';\nimport { PresenceCategory } from './PresenceCategory.enum';\n\nexport const userJoin = (payload: PresenceEventMessage): JoinEventAction => ({\n  type: PresenceActionType.JOIN_EVENT,\n  payload,\n});\n\nexport const userLeave = (payload: PresenceEventMessage): LeaveEventAction => ({\n  type: PresenceActionType.LEAVE_EVENT,\n  payload,\n});\n\nexport const userTimeout = (\n  payload: PresenceEventMessage\n): TimeoutEventAction => ({\n  type: PresenceActionType.TIMEOUT_EVENT,\n  payload,\n});\n\nexport const userStateChange = (\n  payload: PresenceEventMessage\n): StateChangeEventAction => ({\n  type: PresenceActionType.STATE_CHANGE_EVENT,\n  payload,\n});\n\nexport const createPresenceListener = (\n  dispatch: Dispatch<PresenceListenerActions>\n): Pubnub.ListenerParameters => ({\n  presence: (payload) => {\n    switch (payload.action) {\n      case PresenceCategory.JOIN:\n        dispatch(userJoin(payload));\n        break;\n      case PresenceCategory.LEAVE:\n        dispatch(userLeave(payload));\n        break;\n      case PresenceCategory.TIMEOUT:\n        dispatch(userTimeout(payload));\n        break;\n      case PresenceCategory.STATE_CHANGE:\n        dispatch(userStateChange(payload));\n        break;\n      default:\n        break;\n    }\n  },\n});\n","export enum ErrorStatusCategory {\n  PN_NETWORK_ISSUES_CATEGORY = 'PNNetworkIssuesCategory',\n  PN_ACCES_DENIED_CATEGORY = 'PNAccessDeniedCategory',\n  PN_MALFORMED_RESPONSE_CATEGORY = 'PNMalformedResponseCategory',\n  PN_BAD_REQUEST_CATEGORY = 'PNBadRequestCategory',\n  PN_DECRYPTION_ERROR_CATEGORY = 'PNDecryptionErrorCategory',\n  PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY = 'PNRequestMessageCountExceedCategory',\n  PN_UNKNOWN_CATEGORY = 'PNUnknownCategory',\n}\n","export enum ErrorStatusActionType {\n  NETWORK_ISSUES_EVENT = 'pubnub/NETWORK_ISSUES_EVENT',\n  ACCESS_DENIED_EVENT = 'pubnub/ACCESS_DENIED_EVENT',\n  MALFORMED_RESPONSE_EVENT = 'pubnub/MALFORMED_RESPONSE_EVENT',\n  BAD_REQUEST_EVENT = 'pubnub/BAD_REQUEST_EVENT',\n  DECRYPTION_ERROR_EVENT = 'pubnub/DECRYPTION_ERROR_EVENT',\n  TIMEOUT_CONNECTION_EVENT = 'pubnub/TIMEOUT_CONNECTION_EVENT',\n  REQUEST_MESSAGE_COUNT_EXCEED_EVENT = 'pubnub/REQUEST_MESSAGE_COUNT_EXCEED_EVENT',\n  UNKNOWN_EVENT = 'pubnub/UNKNOWN_EVENT',\n}\n","import Pubnub from 'pubnub';\nimport { Dispatch } from 'redux';\nimport { SignalReceivedAction, Signal } from './SignalActions';\nimport { SignalActionType } from './SignalActionType.enum';\n\nexport const signalReceived = <SignalType extends Signal>(\n  payload: SignalType\n): SignalReceivedAction<SignalType> => ({\n  type: SignalActionType.SIGNAL_RECEIVED,\n  payload,\n});\n\nexport const createSignalListener = <SignalType extends Signal>(\n  dispatch: Dispatch<SignalReceivedAction<SignalType>>\n): Pubnub.ListenerParameters => ({\n  signal: (payload) =>\n    dispatch(signalReceived<SignalType>((payload as unknown) as SignalType)),\n});\n","export enum NetworkStatusActionType {\n  NETWORK_UP_EVENT = 'pubnub/NETWORK_UP_EVENT',\n  NETWORK_DOWN_EVENT = 'pubnub/NETWORK_DOWN_EVENT',\n}\n","export enum NetworkStatusCategory {\n  PN_NETWORK_UP_CATEGORY = 'PNNetworkUpCategory',\n  PN_NETWORK_DOWN_CATEGORY = 'PNNetworkDownCategory',\n  PN_RECONNECTED_CATEGORY = 'PNReconnectedCategory',\n  PN_CONNECTED_CATEGORY = 'PNConnectedCategory',\n  PN_TIMEOUT_CATEGORY = 'PNTimeoutCategory',\n}\n","import { Dispatch } from 'redux';\nimport { ErrorStatusCategory } from './ErrorStatusCategory.enum';\nimport { ErrorStatusActionType } from './ErrorStatusActionType.enum';\nimport {\n  NetworkIssuesEventAction,\n  AccessDeniedEventAction,\n  MalformedResponseEventAction,\n  BadRequestEventAction,\n  DecryptionErrorEventAction,\n  TimeoutConnectionEventAction,\n  RequestMessageCountExceedEventAction,\n  UnknownEventAction,\n  ErrorStatusResponse,\n} from './ErrorStatusActions';\n\nexport const networkIssues = (\n  payload: ErrorStatusResponse\n): NetworkIssuesEventAction => ({\n  type: ErrorStatusActionType.NETWORK_ISSUES_EVENT,\n  payload,\n});\n\nexport const accessDenied = (\n  payload: ErrorStatusResponse\n): AccessDeniedEventAction => ({\n  type: ErrorStatusActionType.ACCESS_DENIED_EVENT,\n  payload,\n});\n\nexport const malformedResponse = (\n  payload: ErrorStatusResponse\n): MalformedResponseEventAction => ({\n  type: ErrorStatusActionType.MALFORMED_RESPONSE_EVENT,\n  payload,\n});\n\nexport const badRequest = (\n  payload: ErrorStatusResponse\n): BadRequestEventAction => ({\n  type: ErrorStatusActionType.BAD_REQUEST_EVENT,\n  payload,\n});\n\nexport const decryptionError = (\n  payload: ErrorStatusResponse\n): DecryptionErrorEventAction => ({\n  type: ErrorStatusActionType.DECRYPTION_ERROR_EVENT,\n  payload,\n});\n\nexport const timeoutConnection = (\n  payload: ErrorStatusResponse\n): TimeoutConnectionEventAction => ({\n  type: ErrorStatusActionType.TIMEOUT_CONNECTION_EVENT,\n  payload,\n});\n\nexport const requestMessageCountExceeded = (\n  payload: ErrorStatusResponse\n): RequestMessageCountExceedEventAction => ({\n  type: ErrorStatusActionType.REQUEST_MESSAGE_COUNT_EXCEED_EVENT,\n  payload,\n});\n\nexport const unknown = (payload: ErrorStatusResponse): UnknownEventAction => ({\n  type: ErrorStatusActionType.UNKNOWN_EVENT,\n  payload,\n});\n\nexport type ErrorStatusListenerActions =\n  | NetworkIssuesEventAction\n  | AccessDeniedEventAction\n  | MalformedResponseEventAction\n  | BadRequestEventAction\n  | RequestMessageCountExceedEventAction\n  | DecryptionErrorEventAction\n  | TimeoutConnectionEventAction\n  | UnknownEventAction;\n\nexport const createErrorStatusListener = (\n  dispatch: Dispatch<ErrorStatusListenerActions>\n) => ({\n  status: (payload: ErrorStatusResponse) => {\n    switch (payload.category) {\n      case ErrorStatusCategory.PN_ACCES_DENIED_CATEGORY:\n        dispatch(accessDenied(payload));\n        break;\n      case ErrorStatusCategory.PN_MALFORMED_RESPONSE_CATEGORY:\n        dispatch(malformedResponse(payload));\n        break;\n      case ErrorStatusCategory.PN_BAD_REQUEST_CATEGORY:\n        dispatch(badRequest(payload));\n        break;\n      case ErrorStatusCategory.PN_DECRYPTION_ERROR_CATEGORY:\n        dispatch(decryptionError(payload));\n        break;\n      case ErrorStatusCategory.PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY:\n        dispatch(requestMessageCountExceeded(payload));\n        break;\n      case ErrorStatusCategory.PN_UNKNOWN_CATEGORY:\n        dispatch(unknown(payload));\n        break;\n      default:\n        break;\n    }\n  },\n});\n","export enum SubscriptionStatusActionType {\n  RECONNECTED_EVENT = 'pubnub/RECONNECTED_EVENT',\n  CONNECTED_EVENT = 'pubnub/CONNECTED_EVENT',\n}\n","export enum SubscriptionStatusCategory {\n  PN_CONNECTED_CATEGORY = 'PNConnectedCategory',\n  PN_RECONNECTED_CATEGORY = 'PNReconnectedCategory',\n}\n","import { Dispatch } from 'redux';\nimport {\n  NetworkUpEventAction,\n  NetworkDownEventAction,\n  NetworkStatusResponse,\n} from './NetworkStatusActions';\nimport { NetworkStatusActionType } from './NetworkStatusActionType.enum';\nimport { NetworkStatusCategory } from './NetworkStatusCategory.enum';\n\nexport const networkUp = (): NetworkUpEventAction => ({\n  type: NetworkStatusActionType.NETWORK_UP_EVENT,\n});\n\nexport const networkDown = (): NetworkDownEventAction => ({\n  type: NetworkStatusActionType.NETWORK_DOWN_EVENT,\n});\n\nexport type NetworkStatusListenerActions =\n  | NetworkUpEventAction\n  | NetworkDownEventAction;\n\nexport const createNetworkStatusListener = (\n  dispatch: Dispatch<NetworkStatusListenerActions>\n) => ({\n  status: (payload: NetworkStatusResponse) => {\n    switch (payload.category) {\n      case NetworkStatusCategory.PN_NETWORK_UP_CATEGORY:\n        dispatch(networkUp());\n        break;\n      case NetworkStatusCategory.PN_NETWORK_DOWN_CATEGORY:\n        dispatch(networkDown());\n        break;\n      case NetworkStatusCategory.PN_RECONNECTED_CATEGORY:\n        dispatch(networkUp());\n        break;\n      case NetworkStatusCategory.PN_CONNECTED_CATEGORY:\n        dispatch(networkUp());\n        break;\n      case NetworkStatusCategory.PN_TIMEOUT_CATEGORY:\n        dispatch(networkDown());\n        break;\n      default:\n        break;\n    }\n  },\n});\n","import { Dispatch } from 'redux';\nimport {\n  ReconnectedAction,\n  ConnectedAction,\n  SubscriptionStatusResponse,\n} from './SubscribeStatusActions';\nimport { SubscriptionStatusActionType } from './SubscriptionStatusActionType.enum';\nimport { SubscriptionStatusCategory } from './SubscriptionStatusCategory.enum';\n\nexport const reconnected = (\n  payload: SubscriptionStatusResponse\n): ReconnectedAction => ({\n  type: SubscriptionStatusActionType.RECONNECTED_EVENT,\n  payload,\n});\n\nexport const connected = (\n  payload: SubscriptionStatusResponse\n): ConnectedAction => ({\n  type: SubscriptionStatusActionType.CONNECTED_EVENT,\n  payload,\n});\n\nexport type SubscriptionStatusListenerActions =\n  | ReconnectedAction\n  | ConnectedAction;\n\nexport const createSubscriptionStatusListener = (\n  dispatch: Dispatch<SubscriptionStatusListenerActions>\n) => ({\n  status: (payload: SubscriptionStatusResponse) => {\n    switch (payload.category) {\n      case SubscriptionStatusCategory.PN_CONNECTED_CATEGORY:\n        dispatch(connected(payload));\n        break;\n      case SubscriptionStatusCategory.PN_RECONNECTED_CATEGORY:\n        dispatch(reconnected(payload));\n        break;\n      default:\n        break;\n    }\n  },\n});\n","import Pubnub, {\n  PresenceEvent,\n  SignalEvent,\n  MessageActionEvent,\n  StatusEvent,\n  ObjectsEvent,\n} from 'pubnub';\n\n/**\n * Combines multiple listener objects into one object that supports all of them.\n *\n * @param listeners Array of listener objects.\n * @returns The combined listener Object.\n */\nexport const combineListeners = (...listeners: Pubnub.ListenerParameters[]) => {\n  return Object.assign({}, ...mergeListenersByType(listeners));\n};\n\n/**\n * Take a list of listeners and combine listeners of the same type together.\n *\n * @param listeners Array of listener objects.\n * @returns Array of listener objects with like types combined to single listener object.\n */\nconst mergeListenersByType = (\n  listeners: Pubnub.ListenerParameters[]\n): Pubnub.ListenerParameters[] => {\n  const result: Pubnub.ListenerParameters[] = [];\n  const incomingListeners: {\n    [key in keyof Pubnub.ListenerParameters]: Pubnub.ListenerParameters[];\n  } = {};\n\n  // group the listeners by type so we can combine them\n  listeners.forEach((listener) => {\n    const allowedListeners = [\n      'status',\n      'message',\n      'presence',\n      'signal',\n      'messageAction',\n      'objects',\n    ] as const;\n    for (const listenerType of allowedListeners) {\n      if (listener[listenerType] !== undefined) {\n        if (incomingListeners[listenerType] === undefined) {\n          incomingListeners[listenerType] = [];\n        }\n\n        incomingListeners[listenerType]?.push(listener);\n      }\n    }\n  });\n\n  // merge the grouped listeners and add to the result list\n  Object.entries(incomingListeners).forEach(\n    ([listenerType, listenersOfType]) => {\n      if (listenersOfType && listenersOfType.length === 1) {\n        // only one listener for this type so add directly to the result list\n        result.push(listenersOfType[0]);\n      } else if (listenersOfType && listenersOfType.length > 1) {\n        // multiple listeners for this type so combine them and add to the result list\n        result.push(\n          createCombinedListener(\n            listenerType as keyof Pubnub.ListenerParameters,\n            listenersOfType\n          )\n        );\n      }\n    }\n  );\n\n  return result;\n};\n\n/**\n * Take a list of listeners of the same type and combine to single listener object.\n * For example an array of status listener objects combined to a single status listener object.\n *\n * @param listenerType The listener type.\n * @param listeners The Array of listeners of the same type.\n */\nconst createCombinedListener = (\n  listenerType: keyof Pubnub.ListenerParameters,\n  listeners: Pubnub.ListenerParameters[]\n): Pubnub.ListenerParameters => {\n  // returns a single listener which invokes each of the incomming listeners\n  return {\n    [listenerType]: (\n      payload: MessageEvent &\n        PresenceEvent &\n        SignalEvent &\n        StatusEvent &\n        MessageActionEvent &\n        ObjectsEvent\n    ) => {\n      listeners.forEach((listener) => {\n        const currentListener = listener[listenerType];\n\n        if (currentListener !== undefined) {\n          currentListener(payload);\n        }\n      });\n    },\n  };\n};\n","import { AnyAction } from 'redux';\nimport {\n  ChannelDataActions,\n  ChannelDataListenerActions,\n  SetChannelDataSuccess,\n  RemoveChannelSuccess,\n  FetchAllChannelDataSuccess,\n  FetchChannelDataSuccess,\n  Channel,\n  SetChannelDataEventMessage,\n  RemoveChannelDataEventMessage,\n} from './ChannelDataActions';\nimport { ChannelDataActionType } from './ChannelDataActionType.enum';\nimport {\n  MembershipActions,\n  FetchMembershipsSuccess,\n  MembershipsRetrievedAction,\n} from '../membership/MembershipActions';\nimport { MembershipActionType } from '../membership/MembershipActionType.enum';\nimport { AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom, GetChannelCustom } from 'foundations/ObjectsCustom';\n\nexport type ChannelsByIdState<ChannelType extends Channel> = {\n  byId: {\n    [channelId: string]: ChannelType;\n  };\n};\n\nconst createInitialState = () => ({\n  byId: {},\n});\n\nconst channelDataSet = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: SetChannelDataSuccess<GetChannelCustom<ChannelType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  // partial update\n  newState.byId[payload.response.data.id] = {\n    ...state.byId[payload.response.data.id],\n    ...payload.response.data,\n  };\n\n  return newState;\n};\n\nconst channelDataRemoved = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: RemoveChannelSuccess\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  delete newState.byId[payload.request.channel];\n\n  return newState;\n};\n\nconst allChannelDataRetrieved = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: FetchAllChannelDataSuccess<GetChannelCustom<ChannelType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  payload.response.data.forEach((item) => {\n    newState.byId[item.id] = (item as unknown) as ChannelType;\n  });\n\n  return newState;\n};\n\nconst channelDataRetrieved = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: FetchChannelDataSuccess<GetChannelCustom<ChannelType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  newState.byId[payload.response.data.id] = (payload.response\n    .data as unknown) as ChannelType;\n\n  return newState;\n};\n\nconst channelDataSetEventReceived = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: SetChannelDataEventMessage<GetChannelCustom<ChannelType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  // partial update\n  newState.byId[payload.data.id] = {\n    ...state.byId[payload.data.id],\n    ...payload.data,\n  };\n\n  return newState;\n};\n\nconst channelDataRemovedEventReceived = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: RemoveChannelDataEventMessage\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  delete newState.byId[payload.data.id];\n\n  return newState;\n};\n\nconst membershipRetrieved = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelType extends Channel\n>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: FetchMembershipsSuccess<\n    MembershipCustom,\n    GetChannelCustom<ChannelType>\n  >\n) => {\n  let newState = state;\n\n  if (payload.response.data.length > 0) {\n    newState = {\n      byId: {\n        ...state.byId,\n      },\n    };\n\n    for (let i = 0; i < payload.response.data.length; i++) {\n      const currentMembership = payload.response.data[i];\n\n      // important: consumers *must* include ChannelFields for the state to be updated\n      if (currentMembership.channel && 'eTag' in currentMembership.channel) {\n        newState.byId[\n          currentMembership.channel.id\n        ] = (currentMembership.channel as unknown) as ChannelType;\n      }\n    }\n  }\n\n  return newState;\n};\n\ntype ChannelDataReducerActions<\n  ChannelCustom extends ObjectsCustom,\n  MembershipCustom extends ObjectsCustom\n> =\n  | ChannelDataActions<ChannelCustom, AnyMeta>\n  | ChannelDataListenerActions<ChannelCustom>\n  | MembershipsRetrievedAction<ChannelCustom, MembershipCustom, AnyMeta>\n  | MembershipActions<ChannelCustom, MembershipCustom, AnyMeta>;\n\nexport type ChannelDataReducer<\n  ChannelType extends Channel,\n  ChannelAction extends AnyAction\n> = (\n  state: ChannelsByIdState<ChannelType> | undefined,\n  action: ChannelAction\n) => ChannelsByIdState<ChannelType>;\n\nexport const createChannelDataReducer = <\n  ChannelType extends Channel = Channel,\n  MembershipCustom extends ObjectsCustom = ObjectsCustom,\n  ChannelAction extends AnyAction = ChannelDataReducerActions<\n    GetChannelCustom<ChannelType>,\n    MembershipCustom\n  >\n>(): ChannelDataReducer<ChannelType, ChannelAction> => (\n  state: ChannelsByIdState<ChannelType> = createInitialState(),\n  action: ChannelAction\n): ChannelsByIdState<ChannelType> => {\n  switch (action.type) {\n    case ChannelDataActionType.CHANNEL_DATA_SET:\n      return channelDataSet<ChannelType>(state, action.payload);\n    case ChannelDataActionType.CHANNEL_DATA_REMOVED:\n      return channelDataRemoved<ChannelType>(state, action.payload);\n    case ChannelDataActionType.ALL_CHANNEL_DATA_RETRIEVED:\n      return allChannelDataRetrieved<ChannelType>(state, action.payload);\n    case ChannelDataActionType.CHANNEL_DATA_RETRIEVED:\n      return channelDataRetrieved<ChannelType>(state, action.payload);\n    case ChannelDataActionType.CHANNEL_DATA_SET_EVENT:\n      return channelDataSetEventReceived<ChannelType>(state, action.payload);\n    case ChannelDataActionType.CHANNEL_DATA_REMOVED_EVENT:\n      return channelDataRemovedEventReceived<ChannelType>(\n        state,\n        action.payload\n      );\n    case MembershipActionType.MEMBERSHIPS_RETRIEVED:\n      return membershipRetrieved<MembershipCustom, ChannelType>(\n        state,\n        action.payload\n      );\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport {\n  ChannelMembersActions,\n  FetchChannelMembersSuccess,\n  SetChannelMembersSuccess,\n} from './ChannelMembersActions';\nimport { ChannelMembersActionType } from './ChannelMembersActionType.enum';\nimport {\n  MembershipListenerActions,\n  SetMembershipEventMessage,\n  RemoveMembershipEventMessage,\n} from 'features/membership/MembershipActions';\nimport { MembershipActionType } from '../membership/MembershipActionType.enum';\nimport { AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport type MembersByChannelIdState<MembershipCustom extends ObjectsCustom> = {\n  byId: {\n    [channelId: string]: { id: string; custom: MembershipCustom | null }[];\n  };\n};\n\nconst createInitialState = () => ({\n  byId: {},\n});\n\nconst channelMembershipRemoveEventRecieved = <\n  MembershipCustom extends ObjectsCustom\n>(\n  state: MembersByChannelIdState<MembershipCustom>,\n  payload: RemoveMembershipEventMessage\n) => {\n  if (\n    state.byId[payload.data.channel.id] &&\n    state.byId[payload.data.channel.id].filter(\n      (membership) => membership.id === payload.data.uuid.id\n    ).length > 0\n  ) {\n    const newState = {\n      byId: { ...state.byId },\n    };\n\n    newState.byId[payload.data.channel.id] = newState.byId[\n      payload.data.channel.id\n    ].filter((membership) => membership.id !== payload.data.uuid.id);\n\n    return newState;\n  }\n\n  return state;\n};\n\nconst channelMembershipSetEventRecieved = <\n  MembershipCustom extends ObjectsCustom\n>(\n  state: MembersByChannelIdState<MembershipCustom>,\n  payload: SetMembershipEventMessage<MembershipCustom>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  let clonedChannel = [...(newState.byId[payload.data.channel.id] || [])];\n\n  let exists = false;\n  clonedChannel = clonedChannel.map((uuid) => {\n    if (uuid.id === payload.data.uuid.id) {\n      exists = true;\n      return {\n        id: uuid.id,\n        custom: payload.data.custom,\n      };\n    } else {\n      return uuid;\n    }\n  });\n  if (!exists) {\n    clonedChannel.push({\n      id: payload.data.uuid.id,\n      custom: payload.data.custom,\n    });\n  }\n\n  newState.byId[payload.data.channel.id] = clonedChannel;\n\n  return newState;\n};\n\nconst channelMembersResult = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom\n>(\n  state: MembersByChannelIdState<MembershipCustom>,\n  payload:\n    | FetchChannelMembersSuccess<MembershipCustom, UserCustom>\n    | SetChannelMembersSuccess<MembershipCustom, UserCustom>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  const memberships = payload.response.data.map((complete) => ({\n    id: complete.uuid.id,\n    custom: complete.custom || null,\n  }));\n\n  newState.byId[payload.request.channel] = memberships;\n\n  return newState;\n};\n\ntype ChannelMembersReducerActions<\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom\n> =\n  | ChannelMembersActions<MembershipCustom, UserCustom, AnyMeta>\n  | MembershipListenerActions<MembershipCustom>;\n\nexport type ChannelMembersReducer<\n  MembershipCustom extends ObjectsCustom,\n  MembersAction extends AnyAction\n> = (\n  state: MembersByChannelIdState<MembershipCustom> | undefined,\n  action: MembersAction\n) => MembersByChannelIdState<MembershipCustom>;\n\nexport const createChannelMembersReducer = <\n  MembershipCustom extends ObjectsCustom = ObjectsCustom,\n  UserCustom extends ObjectsCustom = ObjectsCustom,\n  MembersAction extends AnyAction = ChannelMembersReducerActions<\n    MembershipCustom,\n    UserCustom\n  >\n>(): ChannelMembersReducer<MembershipCustom, MembersAction> => (\n  state = createInitialState(),\n  action: MembersAction\n): MembersByChannelIdState<MembershipCustom> => {\n  switch (action.type) {\n    case ChannelMembersActionType.CHANNEL_MEMBERS_RETRIEVED:\n    case ChannelMembersActionType.CHANNEL_MEMBERS_SET:\n    case ChannelMembersActionType.CHANNEL_MEMBERS_REMOVED:\n      return channelMembersResult<MembershipCustom, UserCustom>(\n        state,\n        action.payload\n      );\n    case MembershipActionType.MEMBERSHIP_SET_EVENT:\n      return channelMembershipSetEventRecieved<MembershipCustom>(\n        state,\n        action.payload\n      );\n    case MembershipActionType.MEMBERSHIP_REMOVED_EVENT:\n      return channelMembershipRemoveEventRecieved<MembershipCustom>(\n        state,\n        action.payload\n      );\n    default:\n      return state;\n  }\n};\n","import {\n  AllChannelDataRetrievedAction,\n  FetchAllChannelDataSuccess,\n} from './ChannelDataActions';\nimport { ChannelDataActionType } from './ChannelDataActionType.enum';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\ninterface ChannelListState {\n  channelIds: string[];\n}\n\nconst createInitialState = (): ChannelListState => ({\n  channelIds: [],\n});\n\nconst allChannelDataRetrieved = <ChannelCustom extends ObjectsCustom>(\n  payload: FetchAllChannelDataSuccess<ChannelCustom>\n) => ({ channelIds: payload.response.data.map((channel) => channel.id) });\n\nexport const createChannelsListReducer = <\n  ChannelCustom extends ObjectsCustom = ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>() => (\n  state: ChannelListState = createInitialState(),\n  action: AllChannelDataRetrievedAction<ChannelCustom, Meta>\n): ChannelListState => {\n  switch (action.type) {\n    case ChannelDataActionType.ALL_CHANNEL_DATA_RETRIEVED:\n      return allChannelDataRetrieved<ChannelCustom>(action.payload);\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport {\n  FetchMembershipsSuccess,\n  SetMembershipsSuccess,\n  MembershipListenerActions,\n  MembershipActions,\n  MembershipEventMessage,\n  SetMembershipEventMessage,\n} from './MembershipActions';\nimport { MembershipActionType } from './MembershipActionType.enum';\nimport { AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport type MembershipByUuidState<MembershipCustom extends ObjectsCustom> = {\n  byId: {\n    [uuid: string]: {\n      id: string;\n      custom: MembershipCustom | null;\n    }[];\n  };\n};\n\nconst createInitialState = () => ({\n  byId: {},\n});\n\nconst uuidRemovedFromChannel = <MembershipCustom extends ObjectsCustom>(\n  state: MembershipByUuidState<MembershipCustom>,\n  payload: MembershipEventMessage<MembershipCustom>\n) => {\n  if (\n    state.byId[payload.data.uuid.id] &&\n    state.byId[payload.data.uuid.id].filter(\n      (membership) => membership.id === payload.data.channel.id\n    ).length > 0\n  ) {\n    const newState = {\n      byId: { ...state.byId },\n    };\n\n    newState.byId[payload.data.uuid.id] = newState.byId[\n      payload.data.uuid.id\n    ].filter((membership) => membership.id !== payload.data.channel.id);\n\n    return newState;\n  }\n\n  return state;\n};\n\nconst uuidMembershipUpdatedOnChannel = <MembershipCustom extends ObjectsCustom>(\n  state: MembershipByUuidState<MembershipCustom>,\n  payload: SetMembershipEventMessage<MembershipCustom>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  let clonedUUID = [...(newState.byId[payload.data.uuid.id] || [])];\n\n  let exists = false;\n  clonedUUID = clonedUUID.map((channel) => {\n    if (channel.id === payload.data.channel.id) {\n      exists = true;\n      return {\n        ...channel,\n        custom: payload.data.custom,\n      };\n    } else {\n      return channel;\n    }\n  });\n  if (!exists) {\n    clonedUUID.push({\n      id: payload.data.channel.id,\n      custom: payload.data.custom,\n    });\n  }\n\n  newState.byId[payload.data.uuid.id] = clonedUUID;\n\n  return newState;\n};\n\nconst membershipResult = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom\n>(\n  state: MembershipByUuidState<MembershipCustom>,\n  payload:\n    | FetchMembershipsSuccess<MembershipCustom, ChannelCustom>\n    | SetMembershipsSuccess<MembershipCustom, ChannelCustom>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  const memberships = payload.response.data.map((complete) => ({\n    id: complete.channel.id,\n    custom: complete.custom || null,\n  }));\n\n  newState.byId[payload.request.uuid] = memberships;\n\n  return newState;\n};\n\ntype MembershipReducerActions<\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom\n> =\n  | MembershipActions<MembershipCustom, ChannelCustom, AnyMeta>\n  | MembershipListenerActions<MembershipCustom>;\n\nexport type MembershipReducer<\n  MembershipCustom extends ObjectsCustom,\n  MembershipAction extends AnyAction\n> = (\n  state: MembershipByUuidState<MembershipCustom> | undefined,\n  action: MembershipAction\n) => MembershipByUuidState<MembershipCustom>;\n\nexport const createMembershipReducer = <\n  MembershipCustom extends ObjectsCustom = ObjectsCustom,\n  ChannelCustom extends ObjectsCustom = ObjectsCustom,\n  MembershipAction extends AnyAction = MembershipReducerActions<\n    MembershipCustom,\n    ChannelCustom\n  >\n>(): MembershipReducer<MembershipCustom, MembershipAction> => (\n  state = createInitialState(),\n  action: MembershipAction\n): MembershipByUuidState<MembershipCustom> => {\n  switch (action.type) {\n    case MembershipActionType.MEMBERSHIPS_RETRIEVED:\n    case MembershipActionType.MEMBERSHIPS_SET:\n    case MembershipActionType.MEMBERSHIPS_REMOVED:\n      return membershipResult<MembershipCustom, ChannelCustom>(\n        state,\n        action.payload\n      );\n    case MembershipActionType.MEMBERSHIP_SET_EVENT:\n      return uuidMembershipUpdatedOnChannel<MembershipCustom>(\n        state,\n        action.payload\n      );\n    case MembershipActionType.MEMBERSHIP_REMOVED_EVENT:\n      return uuidRemovedFromChannel<MembershipCustom>(state, action.payload);\n    default:\n      return state;\n  }\n};\n","import {\n  Message,\n  MessageActions,\n  FetchMessageHistorySuccess,\n} from './MessageActions';\nimport { MessageActionType } from './MessageActionType.enum';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport type MessageState<MessageType extends Message> = {\n  byId: {\n    [channel: string]: MessageType[];\n  };\n};\n\nconst createInitialState = <\n  MessageType extends Message\n>(): MessageState<MessageType> => ({\n  byId: {},\n});\n\nconst messageReceived = <MessageType extends Message>(\n  state: MessageState<MessageType>,\n  payload: MessageType\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  if (newState.byId[payload.channel] === undefined) {\n    newState.byId[payload.channel] = [];\n  }\n\n  newState.byId[payload.channel] = [...newState.byId[payload.channel], payload];\n\n  return newState;\n};\n\nconst messageHistoryRetrieved = <\n  MessageContentType,\n  MessageType extends Message\n>(\n  state: MessageState<MessageType>,\n  payload: FetchMessageHistorySuccess<MessageContentType>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  if (newState.byId[payload.request.channel] === undefined) {\n    newState.byId[payload.request.channel] = [];\n  }\n\n  const results: MessageType[] = payload.response.messages.map(\n    (m) =>\n      (({\n        channel: payload.request.channel,\n        message: m.entry as MessageContentType,\n        timetoken: m.timetoken,\n      } as unknown) as MessageType)\n  );\n\n  newState.byId[payload.request.channel] = [\n    ...newState.byId[payload.request.channel],\n    ...results,\n  ];\n\n  return newState;\n};\n\nexport const createMessageReducer = <\n  MessageType extends Message = Message,\n  MessageContentType extends object = {},\n  MessageMetaType extends object = {},\n  Meta extends ActionMeta = AnyMeta\n>() => (\n  state: MessageState<MessageType> = createInitialState<MessageType>(),\n  action: MessageActions<MessageType, MessageContentType, MessageMetaType, Meta>\n): MessageState<MessageType> => {\n  switch (action.type) {\n    case MessageActionType.MESSAGE_RECEIVED:\n      return messageReceived<MessageType>(state, action.payload);\n    case MessageActionType.MESSAGE_HISTORY_RETRIEVED:\n      return messageHistoryRetrieved<MessageContentType, MessageType>(\n        state,\n        action.payload\n      );\n    default:\n      return state;\n  }\n};\n","import { NetworkStatusListenerActions } from './NetworkStatusListener';\nimport { NetworkStatusActionType } from './NetworkStatusActionType.enum';\n\nexport interface NetworkStatusState {\n  isConnected: boolean;\n}\n\ntype NetworkStatusInitializerFunction = () => boolean;\n\nexport const createNetworkStatusReducer = (\n  initializer: NetworkStatusInitializerFunction | boolean\n) => {\n  let initialState: NetworkStatusState;\n\n  if (typeof initializer === 'boolean') {\n    initialState = { isConnected: initializer };\n  } else if (typeof initializer === 'function') {\n    initialState = { isConnected: initializer() };\n    if (typeof initialState.isConnected !== 'boolean') {\n      throw new Error(\n        'The initializer function must return a boolean value (true or false)'\n      );\n    }\n  } else {\n    throw new Error(\n      'The initializer parameter must be a boolean value (true or false) or function'\n    );\n  }\n\n  return function networkStatusReducer(\n    state = initialState,\n    action: NetworkStatusListenerActions\n  ): NetworkStatusState {\n    switch (action.type) {\n      case NetworkStatusActionType.NETWORK_UP_EVENT:\n        return {\n          isConnected: true,\n        };\n      case NetworkStatusActionType.NETWORK_DOWN_EVENT:\n        return {\n          isConnected: false,\n        };\n      default:\n        return state;\n    }\n  };\n};\n","import { AnyAction } from 'redux';\nimport { PresenceActionType } from './PresenceActionType.enum';\nimport {\n  PresenceListenerActions,\n  PresenceEventMessage,\n  Presence,\n  HereNowResponse,\n  HereNowSuccess,\n  HereNowRetrievedAction,\n  PresenceStateRetrievedAction,\n} from './PresenceActions';\nimport { PresenceState } from './PresenceState';\n\nexport interface PresencebyIdState<ReceivedPresence extends Presence> {\n  byId: {\n    [channelId: string]: {\n      name: string;\n      occupants: ReceivedPresence[];\n      occupancy: number;\n    };\n  };\n  totalOccupancy: number;\n}\n\nconst createInitialState = () => {\n  return {\n    byId: {},\n    totalOccupancy: 0,\n  };\n};\n\nconst hereNow = <ReceivedPresence extends Presence<PresenceState>>(\n  state: PresencebyIdState<ReceivedPresence>,\n  payload: HereNowSuccess<ReceivedPresence>\n) => {\n  const newState = {\n    byId: {\n      ...state.byId,\n      ...payload.response.channels,\n    },\n    totalOccupancy: payload.response.totalOccupancy,\n  };\n\n  return newState;\n};\n\nconst getState = <ReceivedPresence extends Presence<PresenceState>>(\n  state: PresencebyIdState<ReceivedPresence>,\n  payload: HereNowResponse<ReceivedPresence>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n    totalOccupancy: state.totalOccupancy,\n  };\n\n  Object.keys(payload.channels).forEach((channel) => {\n    // update occupant state if exists\n    if (newState.byId[channel]) {\n      newState.byId[channel] = payload.channels[channel];\n    }\n  });\n\n  return newState;\n};\n\nconst userJoined = <ReceivedPresence extends Presence<PresenceState>>(\n  state: PresencebyIdState<ReceivedPresence>,\n  payload: PresenceEventMessage<ReceivedPresence>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n    totalOccupancy: state.totalOccupancy,\n  };\n\n  let occupants: ReceivedPresence[] = [];\n\n  // remove occupant if exists\n  if (newState.byId[payload.channel]) {\n    occupants = newState.byId[payload.channel].occupants;\n\n    newState.byId[payload.channel].occupants = occupants.filter(\n      (occupant) => occupant.uuid !== payload.uuid\n    );\n\n    newState.byId[payload.channel].occupancy =\n      newState.byId[payload.channel].occupants.length;\n\n    if (occupants.length === newState.byId[payload.channel].occupants.length) {\n      newState.totalOccupancy++;\n    }\n  } else {\n    newState.totalOccupancy++;\n  }\n\n  // add occupant and update occupancy\n  newState.byId[payload.channel] = {\n    name: payload.channel,\n    occupants: [\n      ...occupants,\n      {\n        uuid: payload.uuid,\n        state: payload.state,\n      } as ReceivedPresence,\n    ],\n    occupancy: payload.occupancy,\n  };\n\n  return newState;\n};\n\nconst userLeft = <ReceivedPresence extends Presence<PresenceState>>(\n  state: PresencebyIdState<ReceivedPresence>,\n  payload: PresenceEventMessage<ReceivedPresence>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n    totalOccupancy: state.totalOccupancy,\n  };\n\n  // remove occupant if exists\n  if (newState.byId[payload.channel]) {\n    const occupants = newState.byId[payload.channel].occupants;\n\n    newState.byId[payload.channel].occupants = occupants.filter(\n      (occupant) => occupant.uuid !== payload.uuid\n    );\n\n    if (occupants.length > newState.byId[payload.channel].occupants.length) {\n      newState.byId[payload.channel].occupancy--;\n      newState.totalOccupancy--;\n    }\n  }\n\n  return newState;\n};\n\nconst userStateChange = <ReceivedPresence extends Presence<PresenceState>>(\n  state: PresencebyIdState<ReceivedPresence>,\n  payload: PresenceEventMessage<ReceivedPresence>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n    totalOccupancy: state.totalOccupancy,\n  };\n\n  // update occupant state if exists\n  if (newState.byId[payload.channel]) {\n    const occupants = newState.byId[payload.channel].occupants;\n\n    occupants.forEach((occupant) => {\n      if (occupant.uuid === payload.uuid) {\n        occupant.state = payload.state;\n      }\n    });\n  }\n\n  return newState;\n};\n\nexport type PresenceActions<RetrievedPresence extends Presence> =\n  | HereNowRetrievedAction<RetrievedPresence>\n  | PresenceStateRetrievedAction<RetrievedPresence>\n  | PresenceListenerActions;\n\nexport type PresenceReducer<\n  StoredPresence extends Presence,\n  PresenceAction extends AnyAction\n> = (\n  state: PresencebyIdState<StoredPresence> | undefined,\n  action: PresenceAction\n) => PresencebyIdState<StoredPresence>;\n\nexport const createPresenceReducer = <\n  StoredPresence extends Presence<PresenceState> = Presence,\n  PresenceAction extends AnyAction = PresenceActions<StoredPresence>\n>(): PresenceReducer<StoredPresence, PresenceAction> => (\n  state: PresencebyIdState<StoredPresence> = createInitialState(),\n  action: PresenceAction\n): PresencebyIdState<StoredPresence> => {\n  switch (action.type) {\n    case PresenceActionType.HERE_NOW_RETRIEVED:\n      return hereNow<StoredPresence>(state, action.payload);\n    case PresenceActionType.PRESENCE_STATE_RETRIEVED:\n      return getState<StoredPresence>(state, action.payload);\n    case PresenceActionType.JOIN_EVENT:\n      return userJoined<StoredPresence>(state, action.payload);\n    case PresenceActionType.LEAVE_EVENT:\n    case PresenceActionType.TIMEOUT_EVENT:\n      return userLeft<StoredPresence>(state, action.payload);\n    case PresenceActionType.STATE_CHANGE_EVENT:\n      return userStateChange<StoredPresence>(state, action.payload);\n    default:\n      return state;\n  }\n};\n","import { Dispatch } from 'redux';\nimport { createMessageListener } from '../message/MessageListener';\nimport { createPresenceListener } from '../presence/PresenceListener';\nimport { createSignalListener } from '../signal/SignalListener';\nimport { createErrorStatusListener } from '../errorStatus/ErrorStatusListener';\nimport { createNetworkStatusListener } from '../networkStatus/NetworkStatusListener';\nimport { createSubscriptionStatusListener } from '../subscriptionStatus/SubscriptionStatusListener';\nimport { createMembershipListener } from '../membership/MembershipListener';\nimport { createChannelDataListener } from '../channel/ChannelDataListener';\nimport { createUserDataListener } from '../user/UserDataListener';\nimport { combineListeners } from '../../foundations/CombineListeners';\n\nexport const createPubNubListener = (dispatch: Dispatch) =>\n  combineListeners(\n    createMessageListener(dispatch),\n    createPresenceListener(dispatch),\n    createSignalListener(dispatch),\n    createErrorStatusListener(dispatch),\n    createErrorStatusListener(dispatch),\n    createNetworkStatusListener(dispatch),\n    createSubscriptionStatusListener(dispatch),\n    createUserDataListener(dispatch),\n    createChannelDataListener(dispatch),\n    createMembershipListener(dispatch)\n  );\n","import { Signal, SignalActions } from './SignalActions';\nimport { SignalActionType } from './SignalActionType.enum';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport type SignalState<SignalType extends Signal> = {\n  byId: {\n    [channel: string]: SignalType[];\n  };\n};\n\nconst createInitialState = <\n  SignalType extends Signal\n>(): SignalState<SignalType> => ({\n  byId: {},\n});\n\nconst signalReceived = <SignalType extends Signal>(\n  state: SignalState<SignalType>,\n  payload: SignalType\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  if (newState.byId[payload.channel] === undefined) {\n    newState.byId[payload.channel] = [];\n  }\n\n  newState.byId[payload.channel] = [...newState.byId[payload.channel], payload];\n\n  return newState;\n};\n\nexport const createSignalReducer = <\n  SignalType extends Signal = Signal,\n  SignalContentType extends object = {},\n  Meta extends ActionMeta = AnyMeta\n>() => (\n  state: SignalState<SignalType> = createInitialState<SignalType>(),\n  action: SignalActions<SignalType, SignalContentType, Meta>\n): SignalState<SignalType> => {\n  switch (action.type) {\n    case SignalActionType.SIGNAL_RECEIVED:\n      return signalReceived<SignalType>(state, action.payload);\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport {\n  UserDataActions,\n  UserDataListenerActions,\n  UserDataSuccess,\n  DeleteUserDataSuccess,\n  FetchAllUserDataSuccess,\n  FetchUserDataSuccess,\n  UserData,\n  UserDataEventMessage,\n  SetUserDataEventMessage,\n} from './UserDataActions';\nimport { UserDataActionType } from './UserDataActionType.enum';\nimport {\n  ChannelMembersActions,\n  FetchChannelMembersSuccess,\n} from 'features/members/ChannelMembersActions';\nimport { MembershipActions } from 'features/membership/MembershipActions';\nimport { ChannelMembersActionType } from '../members/ChannelMembersActionType.enum';\nimport { AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom, GetUserCustom } from 'foundations/ObjectsCustom';\n\nexport interface UserDataByIdState<UserDataType extends UserData> {\n  byId: {\n    [uuid: string]: UserDataType;\n  };\n}\n\nconst createInitialState = () => ({\n  byId: {},\n});\n\nconst UserDataSet = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: UserDataSuccess<GetUserCustom<UserDataType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  // partial update\n  newState.byId[payload.response.data.id] = {\n    ...state.byId[payload.response.data.id],\n    ...payload.response.data,\n  };\n\n  return newState;\n};\n\nconst UserDataRemoved = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: DeleteUserDataSuccess\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  delete newState.byId[payload.request.uuid];\n\n  return newState;\n};\n\nconst allUserDataRetrieved = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: FetchAllUserDataSuccess<GetUserCustom<UserDataType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  payload.response.data.forEach((item) => {\n    newState.byId[item.id] = (item as unknown) as UserDataType;\n  });\n\n  return newState;\n};\n\nconst UserDataRetrieved = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: FetchUserDataSuccess<GetUserCustom<UserDataType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  newState.byId[payload.response.data.id] = (payload.response\n    .data as unknown) as UserDataType;\n\n  return newState;\n};\n\nconst UserDataSetEventReceived = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: SetUserDataEventMessage<GetUserCustom<UserDataType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  // partial update\n  newState.byId[payload.data.id] = {\n    ...state.byId[payload.data.id],\n    ...payload.data,\n  };\n\n  return newState;\n};\n\nconst UserDataRemovedEventReceived = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: UserDataEventMessage<GetUserCustom<UserDataType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  delete newState.byId[payload.data.id];\n\n  return newState;\n};\n\nconst membersRetrieved = <\n  UserDataType extends UserData,\n  MembershipCustom extends ObjectsCustom\n>(\n  state: UserDataByIdState<UserDataType>,\n  payload: FetchChannelMembersSuccess<\n    MembershipCustom,\n    GetUserCustom<UserDataType>\n  >\n) => {\n  let newState = state;\n\n  if (payload.response.data.length > 0) {\n    newState = {\n      byId: {\n        ...state.byId,\n      },\n    };\n\n    for (let i = 0; i < payload.response.data.length; i++) {\n      const currentMember = payload.response.data[i];\n\n      // important: consumers *must* include UUIDFields for the state to be updated\n      if (currentMember.uuid && 'eTag' in currentMember.uuid) {\n        newState.byId[\n          currentMember.uuid.id\n        ] = (currentMember.uuid as unknown) as UserDataType;\n      }\n    }\n  }\n\n  return newState;\n};\n\ntype UserDataReducerActions<\n  UserCustom extends ObjectsCustom,\n  MembershipCustom extends ObjectsCustom\n> =\n  | UserDataActions<UserCustom, AnyMeta>\n  | UserDataListenerActions<UserCustom>\n  | ChannelMembersActions<UserCustom, MembershipCustom, AnyMeta>\n  | MembershipActions<UserCustom, MembershipCustom, AnyMeta>;\n\nexport type UserDataReducer<\n  UserDataType extends UserData,\n  UserDataAction extends AnyAction\n> = (\n  state: UserDataByIdState<UserDataType> | undefined,\n  action: UserDataAction\n) => UserDataByIdState<UserDataType>;\n\nexport const createUserDataReducer = <\n  UserDataType extends UserData = UserData,\n  MembershipCustom extends ObjectsCustom = ObjectsCustom,\n  UserDataAction extends AnyAction = UserDataReducerActions<\n    GetUserCustom<UserDataType>,\n    MembershipCustom\n  >\n>(): UserDataReducer<UserDataType, UserDataAction> => (\n  state: UserDataByIdState<UserDataType> = createInitialState(),\n  action: UserDataAction\n): UserDataByIdState<UserDataType> => {\n  switch (action.type) {\n    case UserDataActionType.USER_DATA_SET:\n      return UserDataSet<UserDataType>(state, action.payload);\n    case UserDataActionType.USER_DATA_REMOVED:\n      return UserDataRemoved<UserDataType>(state, action.payload);\n    case UserDataActionType.ALL_USER_DATA_RETRIEVED:\n      return allUserDataRetrieved<UserDataType>(state, action.payload);\n    case UserDataActionType.USER_DATA_RETRIEVED:\n      return UserDataRetrieved<UserDataType>(state, action.payload);\n    case UserDataActionType.USER_DATA_SET_EVENT:\n      return UserDataSetEventReceived<UserDataType>(state, action.payload);\n    case UserDataActionType.USER_DATA_REMOVED_EVENT:\n      return UserDataRemovedEventReceived<UserDataType>(state, action.payload);\n    case ChannelMembersActionType.CHANNEL_MEMBERS_RETRIEVED:\n      return membersRetrieved<UserDataType, MembershipCustom>(\n        state,\n        action.payload\n      );\n    default:\n      return state;\n  }\n};\n","import {\n  AllUserDataRetrievedAction,\n  FetchAllUserDataSuccess,\n} from './UserDataActions';\nimport { UserDataActionType } from './UserDataActionType.enum';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\ninterface UsersListState {\n  uuids: string[];\n}\n\nconst createInitialState = (): UsersListState => ({\n  uuids: [],\n});\n\nconst allUserDataRetrieved = <UserCustom extends ObjectsCustom>(\n  payload: FetchAllUserDataSuccess<UserCustom>\n) => ({ uuids: payload.response.data.map((uuid) => uuid.id) });\n\nexport const createUsersListReducer = <\n  UserCustom extends ObjectsCustom = ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>() => (\n  state: UsersListState = createInitialState(),\n  action: AllUserDataRetrievedAction<UserCustom, Meta>\n): UsersListState => {\n  switch (action.type) {\n    case UserDataActionType.ALL_USER_DATA_RETRIEVED:\n      return allUserDataRetrieved(action.payload);\n    default:\n      return state;\n  }\n};\n"],"names":["MembershipActionType","ChannelMembersActionType","removingMemberships","payload","meta","type","REMOVING_MEMBERSHIPS","membershipsRemoved","MEMBERSHIPS_REMOVED","errorRemovingMemberships","ERROR_REMOVING_MEMBERSHIPS","error","fetchingMemberships","FETCHING_MEMBERSHIPS","membershipsRetrieved","MEMBERSHIPS_RETRIEVED","errorFetchingMemberships","ERROR_FETCHING_MEMBERSHIPS","settingMemberships","SETTING_MEMBERSHIPS","membershipsSet","MEMBERSHIPS_SET","errorSettingMemberships","ERROR_SETTING_MEMBERSHIPS","MessageActionType","fetchingChannelMembers","FETCHING_CHANNEL_MEMBERS","channelMembersRetrieved","CHANNEL_MEMBERS_RETRIEVED","errorFetchingChannelMembers","ERROR_FETCHING_CHANNEL_MEMBERS","settingChannelMembers","SETTING_CHANNEL_MEMBERS","channelMembersSet","CHANNEL_MEMBERS_SET","errorSettingChannelMembers","ERROR_SETTING_CHANNEL_MEMBERS","removingChannelMembers","REMOVING_CHANNEL_MEMBERS","channelMembersRemoved","CHANNEL_MEMBERS_REMOVED","errorRemovingChannelMembers","ERROR_REMOVING_CHANNEL_MEMBERS","SignalActionType","sendingMessage","SENDING_MESSAGE","messageSent","MESSAGE_SENT","errorSendingMessage","ERROR_SENDING_MESSAGE","ChannelDataActionType","sendingSignal","SENDING_SIGNAL","signalSent","SIGNAL_SENT","errorSendingSignal","ERROR_SENDING_SIGNAL","fetchingMessageHistory","FETCHING_MESSAGE_HISTORY","messageHistoryRetrieved","MESSAGE_HISTORY_RETRIEVED","errorFetchingMessageHistory","ERROR_FETCHING_MESSAGE_HISTORY","UserDataActionType","removingChannelData","REMOVING_CHANNEL_DATA","channelDataRemoved","CHANNEL_DATA_REMOVED","errorRemovingChannelData","ERROR_REMOVING_CHANNEL_DATA","fetchingChannelData","FETCHING_CHANNEL_DATA","channelDataRetrieved","CHANNEL_DATA_RETRIEVED","errorFetchingChannelData","ERROR_FETCHING_CHANNEL_DATA","fetchingAllChannelData","FETCHING_ALL_CHANNEL_DATA","allChannelDataRetrieved","ALL_CHANNEL_DATA_RETRIEVED","errorFetchingAllChannelData","ERROR_FETCHING_ALL_CHANNEL_DATA","settingChannelData","SETTING_CHANNEL_DATA","channelDataSet","CHANNEL_DATA_SET","errorSettingChannelData","ERROR_SETTING_CHANNEL_DATA","PresenceActionType","removingUserData","REMOVING_USER_DATA","UserDataRemoved","USER_DATA_REMOVED","errorRemovingUserData","ERROR_REMOVING_USER_DATA","fetchingUserData","FETCHING_USER_DATA","UserDataRetrieved","USER_DATA_RETRIEVED","errorFetchingUserData","ERROR_FETCHING_USER_DATA","fetchingAllUserData","FETCHING_ALL_USER_DATA","allUserDataRetrieved","ALL_USER_DATA_RETRIEVED","errorFetchingAllUserData","ERROR_FETCHING_ALL_USER_DATA","settingUserData","SETTING_USER_DATA","UserDataSet","USER_DATA_SET","errorSettingUserData","ERROR_SETTING_USER_DATA","PresenceCategory","fetchingHereNow","FETCHING_HERE_NOW","hereNowRetrieved","HERE_NOW_RETRIEVED","errorFetchingHereNow","ERROR_FETCHING_HERE_NOW","fetchingPresenceState","FETCHING_PRESENCE_STATE","presenceStateRetrieved","PRESENCE_STATE_RETRIEVED","errorFetchingPresenceState","ERROR_FETCHING_PRESENCE_STATE","createUserDataListener","dispatch","objects","message","event","USER_DATA_SET_EVENT","USER_DATA_REMOVED_EVENT","createChannelDataListener","CHANNEL_DATA_SET_EVENT","CHANNEL_DATA_REMOVED_EVENT","createMembershipListener","MEMBERSHIP_SET_EVENT","membershipSetEventRecieved","MEMBERSHIP_REMOVED_EVENT","membershipRemovedEventRecieved","createMessageListener","MESSAGE_RECEIVED","messageReceived","ErrorStatusCategory","ErrorStatusActionType","createPresenceListener","presence","action","JOIN","JOIN_EVENT","userJoin","LEAVE","LEAVE_EVENT","userLeave","TIMEOUT","TIMEOUT_EVENT","userTimeout","STATE_CHANGE","STATE_CHANGE_EVENT","userStateChange","createSignalListener","signal","SIGNAL_RECEIVED","signalReceived","NetworkStatusActionType","NetworkStatusCategory","accessDenied","ACCESS_DENIED_EVENT","malformedResponse","MALFORMED_RESPONSE_EVENT","badRequest","BAD_REQUEST_EVENT","decryptionError","DECRYPTION_ERROR_EVENT","requestMessageCountExceeded","REQUEST_MESSAGE_COUNT_EXCEED_EVENT","unknown","UNKNOWN_EVENT","createErrorStatusListener","status","category","PN_ACCES_DENIED_CATEGORY","PN_MALFORMED_RESPONSE_CATEGORY","PN_BAD_REQUEST_CATEGORY","PN_DECRYPTION_ERROR_CATEGORY","PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY","PN_UNKNOWN_CATEGORY","SubscriptionStatusActionType","SubscriptionStatusCategory","networkUp","NETWORK_UP_EVENT","networkDown","NETWORK_DOWN_EVENT","createNetworkStatusListener","PN_NETWORK_UP_CATEGORY","PN_NETWORK_DOWN_CATEGORY","PN_RECONNECTED_CATEGORY","PN_CONNECTED_CATEGORY","PN_TIMEOUT_CATEGORY","reconnected","RECONNECTED_EVENT","connected","CONNECTED_EVENT","createSubscriptionStatusListener","combineListeners","listeners","Object","assign","mergeListenersByType","result","incomingListeners","forEach","listener","listenerType","undefined","push","entries","listenersOfType","length","createCombinedListener","currentListener","state","byId","newState","response","data","id","request","channel","item","channelDataSetEventReceived","channelDataRemovedEventReceived","i","currentMembership","membershipRetrieved","memberships","map","complete","uuid","custom","channelMembersResult","clonedChannel","exists","channelMembershipSetEventRecieved","filter","membership","channelMembershipRemoveEventRecieved","channelIds","membershipResult","clonedUUID","uuidMembershipUpdatedOnChannel","uuidRemovedFromChannel","results","messages","m","entry","timetoken","initializer","initialState","isConnected","Error","totalOccupancy","channels","hereNow","keys","getState","occupants","occupant","occupancy","name","userJoined","userLeft","UserDataSetEventReceived","UserDataRemovedEventReceived","currentMember","membersRetrieved","uuids","thunkFunction","_getState","pubnub","Promise","resolve","reject","api","getAllChannelMetadata","FETCH_ALL_CHANNEL_DATA_COMMAND","getAllUUIDMetadata","FETCH_ALL_USER_DATA_COMMAND","getChannelMetadata","FETCH_CHANNEL_DATA_COMMAND","getChannelMembers","FETCH_CHANNEL_MEMBERS_COMMAND","includeUUIDs","includeState","HERE_NOW_COMMAND","getMemberships","FETCH_MEMBERSHIPS_COMMAND","history","FETCH_MESSAGE_HISTORY_COMMAND","PRESENCE_STATE_COMMAND","getUUIDMetadata","FETCH_USER_DATA_COMMAND","NETWORK_ISSUES_EVENT","removeChannelMetadata","REMOVE_CHANNEL_DATA_COMMAND","removeChannelMembers","REMOVE_CHANNEL_MEMBERS_COMMAND","removeMemberships","REMOVE_MEMBERSHIPS_COMMAND","removeUUIDMetadata","REMOVE_USER_DATA_COMMAND","publish","SEND_MESSAGE_COMMAND","SEND_SIGNAL_COMMAND","setChannelMetadata","SET_CHANNEL_DATA_COMMAND","setChannelMembers","SET_CHANNEL_MEMBERS_COMMAND","setMemberships","SET_MEMBERSHIPS_COMMAND","setUUIDMetadata","SET_USER_DATA_COMMAND","TIMEOUT_CONNECTION_EVENT"],"mappings":"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"}
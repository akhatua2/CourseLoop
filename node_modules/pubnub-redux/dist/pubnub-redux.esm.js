function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var MembershipActionType;

(function (MembershipActionType) {
  // fetchMemberships()
  MembershipActionType["FETCH_MEMBERSHIPS_COMMAND"] = "pubnub/FETCH_MEMBERSHIPS_COMMAND";
  MembershipActionType["FETCHING_MEMBERSHIPS"] = "pubnub/FETCHING_MEMBERSHIPS";
  MembershipActionType["MEMBERSHIPS_RETRIEVED"] = "pubnub/MEMBERSHIPS_RETRIEVED";
  MembershipActionType["ERROR_FETCHING_MEMBERSHIPS"] = "pubnub/ERROR_FETCHING_MEMBERSHIPS"; // setMemberships()

  MembershipActionType["SET_MEMBERSHIPS_COMMAND"] = "pubnub/SET_MEMBERSHIPS_COMMAND";
  MembershipActionType["SETTING_MEMBERSHIPS"] = "pubnub/SETTING_MEMBERSHIPS";
  MembershipActionType["MEMBERSHIPS_SET"] = "pubnub/MEMBERSHIPS_SET";
  MembershipActionType["ERROR_SETTING_MEMBERSHIPS"] = "pubnub/ERROR_SETTING_MEMBERSHIPS"; // removeMemberships()

  MembershipActionType["REMOVE_MEMBERSHIPS_COMMAND"] = "pubnub/REMOVE_MEMBERSHIPS_COMMAND";
  MembershipActionType["REMOVING_MEMBERSHIPS"] = "pubnub/REMOVING_MEMBERSHIPS";
  MembershipActionType["MEMBERSHIPS_REMOVED"] = "pubnub/MEMBERSHIPS_REMOVED";
  MembershipActionType["ERROR_REMOVING_MEMBERSHIPS"] = "pubnub/ERROR_REMOVING_MEMBERSHIPS"; // objects events

  MembershipActionType["MEMBERSHIP_REMOVED_EVENT"] = "pubnub/MEMBERSHIP_REMOVED_EVENT";
  MembershipActionType["MEMBERSHIP_SET_EVENT"] = "pubnub/MEMBERSHIP_SET_EVENT";
})(MembershipActionType || (MembershipActionType = {}));

var removingMemberships = function removingMemberships(payload, meta) {
  return {
    type: MembershipActionType.REMOVING_MEMBERSHIPS,
    payload: payload,
    meta: meta
  };
};
var membershipsRemoved = function membershipsRemoved(payload, meta) {
  return {
    type: MembershipActionType.MEMBERSHIPS_REMOVED,
    payload: payload,
    meta: meta
  };
};
var errorRemovingMemberships = function errorRemovingMemberships(payload, meta) {
  return {
    type: MembershipActionType.ERROR_REMOVING_MEMBERSHIPS,
    payload: payload,
    meta: meta,
    error: true
  };
};
var removeMemberships = function removeMemberships(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(removingMemberships(request, meta));
      pubnub.api.objects.removeMemberships(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorRemovingMemberships(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = membershipsRemoved(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = MembershipActionType.REMOVE_MEMBERSHIPS_COMMAND;
  return thunkFunction;
};

var fetchingMemberships = function fetchingMemberships(payload, meta) {
  return {
    type: MembershipActionType.FETCHING_MEMBERSHIPS,
    payload: payload,
    meta: meta
  };
};
var membershipsRetrieved = function membershipsRetrieved(payload, meta) {
  return {
    type: MembershipActionType.MEMBERSHIPS_RETRIEVED,
    payload: payload,
    meta: meta
  };
};
var errorFetchingMemberships = function errorFetchingMemberships(payload, meta) {
  return {
    type: MembershipActionType.ERROR_FETCHING_MEMBERSHIPS,
    payload: payload,
    meta: meta,
    error: true
  };
};
var fetchMemberships = function fetchMemberships(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(fetchingMemberships(request, meta));
      pubnub.api.objects.getMemberships(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorFetchingMemberships(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = membershipsRetrieved(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = MembershipActionType.FETCH_MEMBERSHIPS_COMMAND;
  return thunkFunction;
};

var settingMemberships = function settingMemberships(payload, meta) {
  return {
    type: MembershipActionType.SETTING_MEMBERSHIPS,
    payload: payload,
    meta: meta
  };
};
var membershipsSet = function membershipsSet(payload, meta) {
  return {
    type: MembershipActionType.MEMBERSHIPS_SET,
    payload: payload,
    meta: meta
  };
};
var errorSettingMemberships = function errorSettingMemberships(payload, meta) {
  return {
    type: MembershipActionType.ERROR_SETTING_MEMBERSHIPS,
    payload: payload,
    meta: meta,
    error: true
  };
};
var setMemberships = function setMemberships(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(settingMemberships(request, meta));
      pubnub.api.objects.setMemberships(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorSettingMemberships(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = membershipsSet(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = MembershipActionType.SET_MEMBERSHIPS_COMMAND;
  return thunkFunction;
};

var ChannelMembersActionType;

(function (ChannelMembersActionType) {
  // fetchChannelMembers()
  ChannelMembersActionType["FETCH_CHANNEL_MEMBERS_COMMAND"] = "pubnub/FETCH_CHANNEL_MEMBERS_COMMAND";
  ChannelMembersActionType["FETCHING_CHANNEL_MEMBERS"] = "pubnub/FETCHING_CHANNEL_MEMBERS";
  ChannelMembersActionType["CHANNEL_MEMBERS_RETRIEVED"] = "pubnub/CHANNEL_MEMBERS_RETRIEVED";
  ChannelMembersActionType["ERROR_FETCHING_CHANNEL_MEMBERS"] = "pubnub/ERROR_FETCHING_CHANNEL_MEMBERS"; // setChannelMembers()

  ChannelMembersActionType["SET_CHANNEL_MEMBERS_COMMAND"] = "pubnub/SET_CHANNEL_MEMBERS_COMMAND";
  ChannelMembersActionType["SETTING_CHANNEL_MEMBERS"] = "pubnub/SETTING_CHANNEL_MEMBERS";
  ChannelMembersActionType["CHANNEL_MEMBERS_SET"] = "pubnub/CHANNEL_MEMBERS_SET";
  ChannelMembersActionType["ERROR_SETTING_CHANNEL_MEMBERS"] = "pubnub/ERROR_SETTING_CHANNEL_MEMBERS"; // removeChannelMembers()

  ChannelMembersActionType["REMOVE_CHANNEL_MEMBERS_COMMAND"] = "pubnub/REMOVE_CHANNEL_MEMBERS_COMMAND";
  ChannelMembersActionType["REMOVING_CHANNEL_MEMBERS"] = "pubnub/REMOVING_CHANNEL_MEMBERS";
  ChannelMembersActionType["CHANNEL_MEMBERS_REMOVED"] = "pubnub/CHANNEL_MEMBERS_REMOVED";
  ChannelMembersActionType["ERROR_REMOVING_CHANNEL_MEMBERS"] = "pubnub/ERROR_REMOVING_CHANNEL_MEMBERS";
})(ChannelMembersActionType || (ChannelMembersActionType = {}));

var fetchingChannelMembers = function fetchingChannelMembers(payload, meta) {
  return {
    type: ChannelMembersActionType.FETCHING_CHANNEL_MEMBERS,
    payload: payload,
    meta: meta
  };
};
var channelMembersRetrieved = function channelMembersRetrieved(payload, meta) {
  return {
    type: ChannelMembersActionType.CHANNEL_MEMBERS_RETRIEVED,
    payload: payload,
    meta: meta
  };
};
var errorFetchingChannelMembers = function errorFetchingChannelMembers(payload, meta) {
  return {
    type: ChannelMembersActionType.ERROR_FETCHING_CHANNEL_MEMBERS,
    payload: payload,
    meta: meta,
    error: true
  };
};
var fetchChannelMembers = function fetchChannelMembers(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(fetchingChannelMembers(request, meta));
      pubnub.api.objects.getChannelMembers(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorFetchingChannelMembers(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = channelMembersRetrieved(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = ChannelMembersActionType.FETCH_CHANNEL_MEMBERS_COMMAND;
  return thunkFunction;
};

var settingChannelMembers = function settingChannelMembers(payload, meta) {
  return {
    type: ChannelMembersActionType.SETTING_CHANNEL_MEMBERS,
    payload: payload,
    meta: meta
  };
};
var channelMembersSet = function channelMembersSet(payload, meta) {
  return {
    type: ChannelMembersActionType.CHANNEL_MEMBERS_SET,
    payload: payload,
    meta: meta
  };
};
var errorSettingChannelMembers = function errorSettingChannelMembers(payload, meta) {
  return {
    type: ChannelMembersActionType.ERROR_SETTING_CHANNEL_MEMBERS,
    payload: payload,
    meta: meta,
    error: true
  };
};
var setChannelMembers = function setChannelMembers(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(settingChannelMembers(request, meta));
      pubnub.api.objects.setChannelMembers(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorSettingChannelMembers(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = channelMembersSet(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = ChannelMembersActionType.SET_CHANNEL_MEMBERS_COMMAND;
  return thunkFunction;
};

var removingChannelMembers = function removingChannelMembers(payload, meta) {
  return {
    type: ChannelMembersActionType.REMOVING_CHANNEL_MEMBERS,
    payload: payload,
    meta: meta
  };
};
var channelMembersRemoved = function channelMembersRemoved(payload, meta) {
  return {
    type: ChannelMembersActionType.CHANNEL_MEMBERS_REMOVED,
    payload: payload,
    meta: meta
  };
};
var errorRemovingChannelMembers = function errorRemovingChannelMembers(payload, meta) {
  return {
    type: ChannelMembersActionType.ERROR_REMOVING_CHANNEL_MEMBERS,
    payload: payload,
    meta: meta,
    error: true
  };
};
var removeChannelMembers = function removeChannelMembers(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(removingChannelMembers(request, meta));
      pubnub.api.objects.removeChannelMembers(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorRemovingChannelMembers(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = channelMembersRemoved(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = ChannelMembersActionType.REMOVE_CHANNEL_MEMBERS_COMMAND;
  return thunkFunction;
};

var MessageActionType;

(function (MessageActionType) {
  MessageActionType["SEND_MESSAGE_COMMAND"] = "pubnub/SEND_MESSAGE_COMMAND";
  MessageActionType["FETCH_MESSAGE_HISTORY_COMMAND"] = "pubnub/FETCH_MESSAGE_HISTORY_COMMAND";
  MessageActionType["MESSAGE_RECEIVED"] = "pubnub/MESSAGE_RECEIVED";
  MessageActionType["SENDING_MESSAGE"] = "pubnub/SENDING_MESSAGE";
  MessageActionType["MESSAGE_SENT"] = "pubnub/MESSAGE_SENT";
  MessageActionType["ERROR_SENDING_MESSAGE"] = "pubnub/ERROR_SENDING_MESSAGE";
  MessageActionType["FETCHING_MESSAGE_HISTORY"] = "pubnub/FETCHING_MESSAGE_HISTORY";
  MessageActionType["MESSAGE_HISTORY_RETRIEVED"] = "pubnub/MESSAGE_HISTORY_RETRIEVED";
  MessageActionType["ERROR_FETCHING_MESSAGE_HISTORY"] = "pubnub/ERROR_FETCHING_MESSAGE_HISTORY";
})(MessageActionType || (MessageActionType = {}));

var sendingMessage = function sendingMessage(payload, meta) {
  return {
    type: MessageActionType.SENDING_MESSAGE,
    payload: payload,
    meta: meta
  };
};
var messageSent = function messageSent(payload, meta) {
  return {
    type: MessageActionType.MESSAGE_SENT,
    payload: payload,
    meta: meta
  };
};
var errorSendingMessage = function errorSendingMessage(payload, meta) {
  return {
    type: MessageActionType.ERROR_SENDING_MESSAGE,
    payload: payload,
    meta: meta
  };
};
var sendMessage = function sendMessage(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(sendingMessage(request, meta));
      pubnub.api.publish(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorSendingMessage(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = messageSent(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = MessageActionType.SEND_MESSAGE_COMMAND;
  return thunkFunction;
};

var SignalActionType;

(function (SignalActionType) {
  SignalActionType["SEND_SIGNAL_COMMAND"] = "pubnub/SEND_SIGNAL_COMMAND";
  SignalActionType["SIGNAL_RECEIVED"] = "pubnub/SIGNAL_RECEIVED";
  SignalActionType["SENDING_SIGNAL"] = "pubnub/SENDING_SIGNAL";
  SignalActionType["SIGNAL_SENT"] = "pubnub/SIGNAL_SENT";
  SignalActionType["ERROR_SENDING_SIGNAL"] = "pubnub/ERROR_SENDING_SIGNAL";
})(SignalActionType || (SignalActionType = {}));

var sendingSignal = function sendingSignal(payload, meta) {
  return {
    type: SignalActionType.SENDING_SIGNAL,
    payload: payload,
    meta: meta
  };
};
var signalSent = function signalSent(payload, meta) {
  return {
    type: SignalActionType.SIGNAL_SENT,
    payload: payload,
    meta: meta
  };
};
var errorSendingSignal = function errorSendingSignal(payload, meta) {
  return {
    type: SignalActionType.ERROR_SENDING_SIGNAL,
    payload: payload,
    meta: meta
  };
};
var sendSignal = function sendSignal(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(sendingSignal(request, meta));
      pubnub.api.signal(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorSendingSignal(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = signalSent(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = SignalActionType.SEND_SIGNAL_COMMAND;
  return thunkFunction;
};

var fetchingMessageHistory = function fetchingMessageHistory(payload, meta) {
  return {
    type: MessageActionType.FETCHING_MESSAGE_HISTORY,
    payload: payload,
    meta: meta
  };
};
var messageHistoryRetrieved = function messageHistoryRetrieved(payload, meta) {
  return {
    type: MessageActionType.MESSAGE_HISTORY_RETRIEVED,
    payload: payload,
    meta: meta
  };
};
var errorFetchingMessageHistory = function errorFetchingMessageHistory(payload, meta) {
  return {
    type: MessageActionType.ERROR_FETCHING_MESSAGE_HISTORY,
    payload: payload,
    meta: meta
  };
};
var fetchMessageHistory = function fetchMessageHistory(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(fetchingMessageHistory(request, meta));
      pubnub.api.history(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorFetchingMessageHistory(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = messageHistoryRetrieved(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = MessageActionType.FETCH_MESSAGE_HISTORY_COMMAND;
  return thunkFunction;
};

var ChannelDataActionType;

(function (ChannelDataActionType) {
  // fetchAllChannelData()
  ChannelDataActionType["FETCH_ALL_CHANNEL_DATA_COMMAND"] = "pubnub/FETCH_ALL_CHANNEL_DATA_COMMAND";
  ChannelDataActionType["FETCHING_ALL_CHANNEL_DATA"] = "pubnub/FETCHING_ALL_CHANNEL_DATA";
  ChannelDataActionType["ALL_CHANNEL_DATA_RETRIEVED"] = "pubnub/ALL_CHANNEL_DATA_RETRIEVED";
  ChannelDataActionType["ERROR_FETCHING_ALL_CHANNEL_DATA"] = "pubnub/ERROR_FETCHING_ALL_CHANNEL_DATA"; // fetchChannelData()

  ChannelDataActionType["FETCH_CHANNEL_DATA_COMMAND"] = "pubnub/FETCH_CHANNEL_DATA_COMMAND";
  ChannelDataActionType["FETCHING_CHANNEL_DATA"] = "pubnub/FETCHING_CHANNEL_DATA";
  ChannelDataActionType["CHANNEL_DATA_RETRIEVED"] = "pubnub/CHANNEL_DATA_RETRIEVED";
  ChannelDataActionType["ERROR_FETCHING_CHANNEL_DATA"] = "pubnub/ERROR_FETCHING_CHANNEL_DATA"; // setChannelData()

  ChannelDataActionType["SET_CHANNEL_DATA_COMMAND"] = "pubnub/SET_CHANNEL_DATA_COMMAND";
  ChannelDataActionType["SETTING_CHANNEL_DATA"] = "pubnub/SETTING_CHANNEL_DATA";
  ChannelDataActionType["CHANNEL_DATA_SET"] = "pubnub/CHANNEL_DATA_SET";
  ChannelDataActionType["ERROR_SETTING_CHANNEL_DATA"] = "pubnub/ERROR_SETTING_CHANNEL_DATA"; // removeChannelData()

  ChannelDataActionType["REMOVE_CHANNEL_DATA_COMMAND"] = "pubnub/REMOVE_CHANNEL_DATA_COMMAND";
  ChannelDataActionType["REMOVING_CHANNEL_DATA"] = "pubnub/REMOVING_CHANNEL_DATA";
  ChannelDataActionType["CHANNEL_DATA_REMOVED"] = "pubnub/CHANNEL_DATA_REMOVED";
  ChannelDataActionType["ERROR_REMOVING_CHANNEL_DATA"] = "pubnub/ERROR_REMOVING_CHANNEL_DATA"; // objects events

  ChannelDataActionType["CHANNEL_DATA_SET_EVENT"] = "pubnub/CHANNEL_DATA_SET_EVENT";
  ChannelDataActionType["CHANNEL_DATA_REMOVED_EVENT"] = "pubnub/CHANNEL_DATA_REMOVED_EVENT";
})(ChannelDataActionType || (ChannelDataActionType = {}));

var removingChannelData = function removingChannelData(payload, meta) {
  return {
    type: ChannelDataActionType.REMOVING_CHANNEL_DATA,
    payload: payload,
    meta: meta
  };
};
var channelDataRemoved = function channelDataRemoved(payload, meta) {
  return {
    type: ChannelDataActionType.CHANNEL_DATA_REMOVED,
    payload: payload,
    meta: meta
  };
};
var errorRemovingChannelData = function errorRemovingChannelData(payload, meta) {
  return {
    type: ChannelDataActionType.ERROR_REMOVING_CHANNEL_DATA,
    payload: payload,
    meta: meta,
    error: true
  };
};
var removeChannelData = function removeChannelData(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(removingChannelData(request, meta));
      pubnub.api.objects.removeChannelMetadata({
        channel: request.channel
      }, function (status) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorRemovingChannelData(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            status: status
          };
          var action = channelDataRemoved(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = ChannelDataActionType.REMOVE_CHANNEL_DATA_COMMAND;
  return thunkFunction;
};

var fetchingChannelData = function fetchingChannelData(payload, meta) {
  return {
    type: ChannelDataActionType.FETCHING_CHANNEL_DATA,
    payload: payload,
    meta: meta
  };
};
var channelDataRetrieved = function channelDataRetrieved(payload, meta) {
  return {
    type: ChannelDataActionType.CHANNEL_DATA_RETRIEVED,
    payload: payload,
    meta: meta
  };
};
var errorFetchingChannelData = function errorFetchingChannelData(payload, meta) {
  return {
    type: ChannelDataActionType.ERROR_FETCHING_CHANNEL_DATA,
    payload: payload,
    meta: meta,
    error: true
  };
};
var fetchChannelData = function fetchChannelData(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(fetchingChannelData(_extends({}, request), meta));
      pubnub.api.objects.getChannelMetadata(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorFetchingChannelData(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = channelDataRetrieved(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = ChannelDataActionType.FETCH_CHANNEL_DATA_COMMAND;
  return thunkFunction;
};

var fetchingAllChannelData = function fetchingAllChannelData(payload, meta) {
  return {
    type: ChannelDataActionType.FETCHING_ALL_CHANNEL_DATA,
    payload: payload,
    meta: meta
  };
};
var allChannelDataRetrieved = function allChannelDataRetrieved(payload, meta) {
  return {
    type: ChannelDataActionType.ALL_CHANNEL_DATA_RETRIEVED,
    payload: payload,
    meta: meta
  };
};
var errorFetchingAllChannelData = function errorFetchingAllChannelData(payload, meta) {
  return {
    type: ChannelDataActionType.ERROR_FETCHING_ALL_CHANNEL_DATA,
    payload: payload,
    meta: meta,
    error: true
  };
};
var fetchAllChannelData = function fetchAllChannelData(request, meta) {
  if (request === void 0) {
    request = {};
  }

  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(fetchingAllChannelData(request, meta));
      pubnub.api.objects.getAllChannelMetadata(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorFetchingAllChannelData(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = allChannelDataRetrieved(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = ChannelDataActionType.FETCH_ALL_CHANNEL_DATA_COMMAND;
  return thunkFunction;
};

var settingChannelData = function settingChannelData(payload, meta) {
  return {
    type: ChannelDataActionType.SETTING_CHANNEL_DATA,
    payload: payload,
    meta: meta
  };
};
var channelDataSet = function channelDataSet(payload, meta) {
  return {
    type: ChannelDataActionType.CHANNEL_DATA_SET,
    payload: payload,
    meta: meta
  };
};
var errorSettingChannelData = function errorSettingChannelData(payload, meta) {
  return {
    type: ChannelDataActionType.ERROR_SETTING_CHANNEL_DATA,
    payload: payload,
    meta: meta,
    error: true
  };
};
var setChannelData = function setChannelData(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(settingChannelData(request, meta));
      pubnub.api.objects.setChannelMetadata(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorSettingChannelData(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = channelDataSet(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = ChannelDataActionType.SET_CHANNEL_DATA_COMMAND;
  return thunkFunction;
};

var UserDataActionType;

(function (UserDataActionType) {
  // fetchAllUserData()
  UserDataActionType["FETCH_ALL_USER_DATA_COMMAND"] = "pubnub/FETCH_ALL_USER_DATA_COMMAND";
  UserDataActionType["FETCHING_ALL_USER_DATA"] = "pubnub/FETCHING_ALL_USER_DATA";
  UserDataActionType["ALL_USER_DATA_RETRIEVED"] = "pubnub/ALL_USER_DATA_RETRIEVED";
  UserDataActionType["ERROR_FETCHING_ALL_USER_DATA"] = "pubnub/ERROR_FETCHING_ALL_USER_DATA"; // fetchUserData()

  UserDataActionType["FETCH_USER_DATA_COMMAND"] = "pubnub/FETCH_USER_DATA_COMMAND";
  UserDataActionType["FETCHING_USER_DATA"] = "pubnub/FETCHING_USER_DATA";
  UserDataActionType["USER_DATA_RETRIEVED"] = "pubnub/USER_DATA_RETRIEVED";
  UserDataActionType["ERROR_FETCHING_USER_DATA"] = "pubnub/ERROR_FETCHING_USER_DATA"; // setUserData()

  UserDataActionType["SET_USER_DATA_COMMAND"] = "pubnub/SET_USER_DATA_COMMAND";
  UserDataActionType["SETTING_USER_DATA"] = "pubnub/SETTING_USER_DATA";
  UserDataActionType["USER_DATA_SET"] = "pubnub/USER_DATA_SET";
  UserDataActionType["ERROR_SETTING_USER_DATA"] = "pubnub/ERROR_SETTING_USER_DATA"; // removeUserData()

  UserDataActionType["REMOVE_USER_DATA_COMMAND"] = "pubnub/REMOVE_USER_DATA_COMMAND";
  UserDataActionType["REMOVING_USER_DATA"] = "pubnub/REMOVING_USER_DATA";
  UserDataActionType["USER_DATA_REMOVED"] = "pubnub/USER_DATA_REMOVED";
  UserDataActionType["ERROR_REMOVING_USER_DATA"] = "pubnub/ERROR_REMOVING_USER_DATA"; // objects events

  UserDataActionType["USER_DATA_SET_EVENT"] = "pubnub/USER_DATA_SET_EVENT";
  UserDataActionType["USER_DATA_REMOVED_EVENT"] = "pubnub/USER_DATA_REMOVED_EVENT";
})(UserDataActionType || (UserDataActionType = {}));

var removingUserData = function removingUserData(payload, meta) {
  return {
    type: UserDataActionType.REMOVING_USER_DATA,
    payload: payload,
    meta: meta
  };
};
var UserDataRemoved = function UserDataRemoved(payload, meta) {
  return {
    type: UserDataActionType.USER_DATA_REMOVED,
    payload: payload,
    meta: meta
  };
};
var errorRemovingUserData = function errorRemovingUserData(payload, meta) {
  return {
    type: UserDataActionType.ERROR_REMOVING_USER_DATA,
    payload: payload,
    meta: meta,
    error: true
  };
};
var removeUserData = function removeUserData(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(removingUserData(request, meta));
      pubnub.api.objects.removeUUIDMetadata({
        uuid: request.uuid
      }, function (status) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorRemovingUserData(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            status: status
          };
          var action = UserDataRemoved(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = UserDataActionType.REMOVE_USER_DATA_COMMAND;
  return thunkFunction;
};

var fetchingUserData = function fetchingUserData(payload, meta) {
  return {
    type: UserDataActionType.FETCHING_USER_DATA,
    payload: payload,
    meta: meta
  };
};
var UserDataRetrieved = function UserDataRetrieved(payload, meta) {
  return {
    type: UserDataActionType.USER_DATA_RETRIEVED,
    payload: payload,
    meta: meta
  };
};
var errorFetchingUserData = function errorFetchingUserData(payload, meta) {
  return {
    type: UserDataActionType.ERROR_FETCHING_USER_DATA,
    payload: payload,
    meta: meta,
    error: true
  };
};
var fetchUserData = function fetchUserData(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(fetchingUserData(_extends({}, request), meta));
      pubnub.api.objects.getUUIDMetadata(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorFetchingUserData(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = UserDataRetrieved(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = UserDataActionType.FETCH_USER_DATA_COMMAND;
  return thunkFunction;
};

var fetchingAllUserData = function fetchingAllUserData(payload, meta) {
  return {
    type: UserDataActionType.FETCHING_ALL_USER_DATA,
    payload: payload,
    meta: meta
  };
};
var allUserDataRetrieved = function allUserDataRetrieved(payload, meta) {
  return {
    type: UserDataActionType.ALL_USER_DATA_RETRIEVED,
    payload: payload,
    meta: meta
  };
};
var errorFetchingAllUserData = function errorFetchingAllUserData(payload, meta) {
  return {
    type: UserDataActionType.ERROR_FETCHING_ALL_USER_DATA,
    payload: payload,
    meta: meta,
    error: true
  };
};
var fetchAllUserData = function fetchAllUserData(request, meta) {
  if (request === void 0) {
    request = {};
  }

  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(fetchingAllUserData(request, meta));
      pubnub.api.objects.getAllUUIDMetadata(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorFetchingAllUserData(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = allUserDataRetrieved(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = UserDataActionType.FETCH_ALL_USER_DATA_COMMAND;
  return thunkFunction;
};

var settingUserData = function settingUserData(payload, meta) {
  return {
    type: UserDataActionType.SETTING_USER_DATA,
    payload: payload,
    meta: meta
  };
};
var UserDataSet = function UserDataSet(payload, meta) {
  return {
    type: UserDataActionType.USER_DATA_SET,
    payload: payload,
    meta: meta
  };
};
var errorSettingUserData = function errorSettingUserData(payload, meta) {
  return {
    type: UserDataActionType.ERROR_SETTING_USER_DATA,
    payload: payload,
    meta: meta,
    error: true
  };
};
var setUserData = function setUserData(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(settingUserData(request, meta));
      pubnub.api.objects.setUUIDMetadata(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorSettingUserData(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = UserDataSet(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = UserDataActionType.SET_USER_DATA_COMMAND;
  return thunkFunction;
};

var PresenceActionType;

(function (PresenceActionType) {
  PresenceActionType["HERE_NOW_COMMAND"] = "pubnub/HERE_NOW_COMMAND";
  PresenceActionType["PRESENCE_STATE_COMMAND"] = "pubnub/PRESENCE_STATE_COMMAND";
  PresenceActionType["FETCHING_HERE_NOW"] = "pubnub/FETCHING_HERE_NOW";
  PresenceActionType["HERE_NOW_RETRIEVED"] = "pubnub/HERE_NOW_RETRIEVED";
  PresenceActionType["ERROR_FETCHING_HERE_NOW"] = "pubnub/ERROR_FETCHING_HERE_NOW";
  PresenceActionType["FETCHING_PRESENCE_STATE"] = "pubnub/FETCHING_PRESENCE_STATE";
  PresenceActionType["PRESENCE_STATE_RETRIEVED"] = "pubnub/PRESENCE_STATE_RETRIEVED";
  PresenceActionType["ERROR_FETCHING_PRESENCE_STATE"] = "pubnub/ERROR_FETCHING_PRESENCE_STATE";
  PresenceActionType["JOIN_EVENT"] = "pubnub/JOIN_EVENT";
  PresenceActionType["LEAVE_EVENT"] = "pubnub/LEAVE_EVENT";
  PresenceActionType["TIMEOUT_EVENT"] = "pubnub/TIMEOUT_EVENT";
  PresenceActionType["STATE_CHANGE_EVENT"] = "pubnub/STATE_CHANGE_EVENT";
})(PresenceActionType || (PresenceActionType = {}));

var fetchingHereNow = function fetchingHereNow(payload, meta) {
  return {
    type: PresenceActionType.FETCHING_HERE_NOW,
    payload: payload,
    meta: meta
  };
};
var hereNowRetrieved = function hereNowRetrieved(payload, meta) {
  return {
    type: PresenceActionType.HERE_NOW_RETRIEVED,
    payload: payload,
    meta: meta
  };
};
var errorFetchingHereNow = function errorFetchingHereNow(payload, meta) {
  return {
    type: PresenceActionType.ERROR_FETCHING_HERE_NOW,
    payload: payload,
    meta: meta
  };
};
var fetchHereNow = function fetchHereNow(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(fetchingHereNow(request, meta));
      pubnub.api.hereNow(_extends(_extends({}, request), {}, {
        includeUUIDs: true,
        includeState: false
      }), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorFetchingHereNow(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = hereNowRetrieved(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = PresenceActionType.HERE_NOW_COMMAND;
  return thunkFunction;
};

var fetchingPresenceState = function fetchingPresenceState(payload, meta) {
  return {
    type: PresenceActionType.FETCHING_PRESENCE_STATE,
    payload: payload,
    meta: meta
  };
};
var presenceStateRetrieved = function presenceStateRetrieved(payload, meta) {
  return {
    type: PresenceActionType.PRESENCE_STATE_RETRIEVED,
    payload: payload,
    meta: meta
  };
};
var errorFetchingPresenceState = function errorFetchingPresenceState(payload, meta) {
  return {
    type: PresenceActionType.ERROR_FETCHING_PRESENCE_STATE,
    payload: payload,
    meta: meta
  };
};
var fetchPresenceState = function fetchPresenceState(request, meta) {
  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {
    var pubnub = _ref.pubnub;
    return new Promise(function (resolve, reject) {
      dispatch(fetchingPresenceState(request, meta));
      pubnub.api.getState(_extends({}, request), function (status, response) {
        if (status.error) {
          var payload = {
            request: request,
            status: status
          };
          dispatch(errorFetchingPresenceState(payload, meta));
          reject(payload);
        } else {
          var _payload = {
            request: request,
            response: response,
            status: status
          };
          var action = presenceStateRetrieved(_payload, meta);
          dispatch(action);
          resolve(action);
        }
      });
    });
  };

  thunkFunction.type = PresenceActionType.PRESENCE_STATE_COMMAND;
  return thunkFunction;
};

var UserDataSet$1 = function UserDataSet(payload) {
  return {
    type: UserDataActionType.USER_DATA_SET_EVENT,
    payload: payload
  };
};
var UserDataRemoved$1 = function UserDataRemoved(payload) {
  return {
    type: UserDataActionType.USER_DATA_REMOVED_EVENT,
    payload: payload
  };
};
var createUserDataListener = function createUserDataListener(dispatch) {
  return {
    objects: function objects(payload) {
      if (payload.message.type !== 'uuid') {
        return;
      }

      switch (payload.message.event) {
        case 'set':
          dispatch(UserDataSet$1(payload.message));
          break;

        case 'delete':
          dispatch(UserDataRemoved$1(payload.message));
          break;
      }
    }
  };
};

var channelDataSet$1 = function channelDataSet(payload) {
  return {
    type: ChannelDataActionType.CHANNEL_DATA_SET_EVENT,
    payload: payload
  };
};
var channelDataRemoved$1 = function channelDataRemoved(payload) {
  return {
    type: ChannelDataActionType.CHANNEL_DATA_REMOVED_EVENT,
    payload: payload
  };
};
var createChannelDataListener = function createChannelDataListener(dispatch) {
  return {
    objects: function objects(payload) {
      if (payload.message.type !== 'channel') {
        return;
      }

      switch (payload.message.event) {
        case 'set':
          dispatch(channelDataSet$1(payload.message));
          break;

        case 'delete':
          dispatch(channelDataRemoved$1(payload.message));
          break;
      }
    }
  };
};

var membershipSetEventRecieved = function membershipSetEventRecieved(payload) {
  return {
    type: MembershipActionType.MEMBERSHIP_SET_EVENT,
    payload: payload
  };
};

var membershipRemovedEventRecieved = function membershipRemovedEventRecieved(payload) {
  return {
    type: MembershipActionType.MEMBERSHIP_REMOVED_EVENT,
    payload: payload
  };
};

var createMembershipListener = function createMembershipListener(dispatch) {
  return {
    objects: function objects(payload) {
      if (payload.message.type === 'membership') {
        switch (payload.message.event) {
          case 'set':
            dispatch(membershipSetEventRecieved(payload.message));
            break;

          case 'delete':
            dispatch(membershipRemovedEventRecieved(payload.message));
            break;
        }
      }
    }
  };
};

var messageReceived = function messageReceived(payload) {
  return {
    type: MessageActionType.MESSAGE_RECEIVED,
    payload: payload
  };
};
var createMessageListener = function createMessageListener(dispatch) {
  return {
    message: function message(payload) {
      return dispatch(messageReceived(payload));
    }
  };
};

var PresenceCategory;

(function (PresenceCategory) {
  PresenceCategory["JOIN"] = "join";
  PresenceCategory["STATE_CHANGE"] = "state-change";
  PresenceCategory["LEAVE"] = "leave";
  PresenceCategory["TIMEOUT"] = "timeout";
})(PresenceCategory || (PresenceCategory = {}));

var userJoin = function userJoin(payload) {
  return {
    type: PresenceActionType.JOIN_EVENT,
    payload: payload
  };
};
var userLeave = function userLeave(payload) {
  return {
    type: PresenceActionType.LEAVE_EVENT,
    payload: payload
  };
};
var userTimeout = function userTimeout(payload) {
  return {
    type: PresenceActionType.TIMEOUT_EVENT,
    payload: payload
  };
};
var userStateChange = function userStateChange(payload) {
  return {
    type: PresenceActionType.STATE_CHANGE_EVENT,
    payload: payload
  };
};
var createPresenceListener = function createPresenceListener(dispatch) {
  return {
    presence: function presence(payload) {
      switch (payload.action) {
        case PresenceCategory.JOIN:
          dispatch(userJoin(payload));
          break;

        case PresenceCategory.LEAVE:
          dispatch(userLeave(payload));
          break;

        case PresenceCategory.TIMEOUT:
          dispatch(userTimeout(payload));
          break;

        case PresenceCategory.STATE_CHANGE:
          dispatch(userStateChange(payload));
          break;
      }
    }
  };
};

var signalReceived = function signalReceived(payload) {
  return {
    type: SignalActionType.SIGNAL_RECEIVED,
    payload: payload
  };
};
var createSignalListener = function createSignalListener(dispatch) {
  return {
    signal: function signal(payload) {
      return dispatch(signalReceived(payload));
    }
  };
};

var ErrorStatusCategory;

(function (ErrorStatusCategory) {
  ErrorStatusCategory["PN_NETWORK_ISSUES_CATEGORY"] = "PNNetworkIssuesCategory";
  ErrorStatusCategory["PN_ACCES_DENIED_CATEGORY"] = "PNAccessDeniedCategory";
  ErrorStatusCategory["PN_MALFORMED_RESPONSE_CATEGORY"] = "PNMalformedResponseCategory";
  ErrorStatusCategory["PN_BAD_REQUEST_CATEGORY"] = "PNBadRequestCategory";
  ErrorStatusCategory["PN_DECRYPTION_ERROR_CATEGORY"] = "PNDecryptionErrorCategory";
  ErrorStatusCategory["PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY"] = "PNRequestMessageCountExceedCategory";
  ErrorStatusCategory["PN_UNKNOWN_CATEGORY"] = "PNUnknownCategory";
})(ErrorStatusCategory || (ErrorStatusCategory = {}));

var ErrorStatusActionType;

(function (ErrorStatusActionType) {
  ErrorStatusActionType["NETWORK_ISSUES_EVENT"] = "pubnub/NETWORK_ISSUES_EVENT";
  ErrorStatusActionType["ACCESS_DENIED_EVENT"] = "pubnub/ACCESS_DENIED_EVENT";
  ErrorStatusActionType["MALFORMED_RESPONSE_EVENT"] = "pubnub/MALFORMED_RESPONSE_EVENT";
  ErrorStatusActionType["BAD_REQUEST_EVENT"] = "pubnub/BAD_REQUEST_EVENT";
  ErrorStatusActionType["DECRYPTION_ERROR_EVENT"] = "pubnub/DECRYPTION_ERROR_EVENT";
  ErrorStatusActionType["TIMEOUT_CONNECTION_EVENT"] = "pubnub/TIMEOUT_CONNECTION_EVENT";
  ErrorStatusActionType["REQUEST_MESSAGE_COUNT_EXCEED_EVENT"] = "pubnub/REQUEST_MESSAGE_COUNT_EXCEED_EVENT";
  ErrorStatusActionType["UNKNOWN_EVENT"] = "pubnub/UNKNOWN_EVENT";
})(ErrorStatusActionType || (ErrorStatusActionType = {}));

var networkIssues = function networkIssues(payload) {
  return {
    type: ErrorStatusActionType.NETWORK_ISSUES_EVENT,
    payload: payload
  };
};
var accessDenied = function accessDenied(payload) {
  return {
    type: ErrorStatusActionType.ACCESS_DENIED_EVENT,
    payload: payload
  };
};
var malformedResponse = function malformedResponse(payload) {
  return {
    type: ErrorStatusActionType.MALFORMED_RESPONSE_EVENT,
    payload: payload
  };
};
var badRequest = function badRequest(payload) {
  return {
    type: ErrorStatusActionType.BAD_REQUEST_EVENT,
    payload: payload
  };
};
var decryptionError = function decryptionError(payload) {
  return {
    type: ErrorStatusActionType.DECRYPTION_ERROR_EVENT,
    payload: payload
  };
};
var timeoutConnection = function timeoutConnection(payload) {
  return {
    type: ErrorStatusActionType.TIMEOUT_CONNECTION_EVENT,
    payload: payload
  };
};
var requestMessageCountExceeded = function requestMessageCountExceeded(payload) {
  return {
    type: ErrorStatusActionType.REQUEST_MESSAGE_COUNT_EXCEED_EVENT,
    payload: payload
  };
};
var unknown = function unknown(payload) {
  return {
    type: ErrorStatusActionType.UNKNOWN_EVENT,
    payload: payload
  };
};
var createErrorStatusListener = function createErrorStatusListener(dispatch) {
  return {
    status: function status(payload) {
      switch (payload.category) {
        case ErrorStatusCategory.PN_ACCES_DENIED_CATEGORY:
          dispatch(accessDenied(payload));
          break;

        case ErrorStatusCategory.PN_MALFORMED_RESPONSE_CATEGORY:
          dispatch(malformedResponse(payload));
          break;

        case ErrorStatusCategory.PN_BAD_REQUEST_CATEGORY:
          dispatch(badRequest(payload));
          break;

        case ErrorStatusCategory.PN_DECRYPTION_ERROR_CATEGORY:
          dispatch(decryptionError(payload));
          break;

        case ErrorStatusCategory.PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY:
          dispatch(requestMessageCountExceeded(payload));
          break;

        case ErrorStatusCategory.PN_UNKNOWN_CATEGORY:
          dispatch(unknown(payload));
          break;
      }
    }
  };
};

var NetworkStatusActionType;

(function (NetworkStatusActionType) {
  NetworkStatusActionType["NETWORK_UP_EVENT"] = "pubnub/NETWORK_UP_EVENT";
  NetworkStatusActionType["NETWORK_DOWN_EVENT"] = "pubnub/NETWORK_DOWN_EVENT";
})(NetworkStatusActionType || (NetworkStatusActionType = {}));

var NetworkStatusCategory;

(function (NetworkStatusCategory) {
  NetworkStatusCategory["PN_NETWORK_UP_CATEGORY"] = "PNNetworkUpCategory";
  NetworkStatusCategory["PN_NETWORK_DOWN_CATEGORY"] = "PNNetworkDownCategory";
  NetworkStatusCategory["PN_RECONNECTED_CATEGORY"] = "PNReconnectedCategory";
  NetworkStatusCategory["PN_CONNECTED_CATEGORY"] = "PNConnectedCategory";
  NetworkStatusCategory["PN_TIMEOUT_CATEGORY"] = "PNTimeoutCategory";
})(NetworkStatusCategory || (NetworkStatusCategory = {}));

var networkUp = function networkUp() {
  return {
    type: NetworkStatusActionType.NETWORK_UP_EVENT
  };
};
var networkDown = function networkDown() {
  return {
    type: NetworkStatusActionType.NETWORK_DOWN_EVENT
  };
};
var createNetworkStatusListener = function createNetworkStatusListener(dispatch) {
  return {
    status: function status(payload) {
      switch (payload.category) {
        case NetworkStatusCategory.PN_NETWORK_UP_CATEGORY:
          dispatch(networkUp());
          break;

        case NetworkStatusCategory.PN_NETWORK_DOWN_CATEGORY:
          dispatch(networkDown());
          break;

        case NetworkStatusCategory.PN_RECONNECTED_CATEGORY:
          dispatch(networkUp());
          break;

        case NetworkStatusCategory.PN_CONNECTED_CATEGORY:
          dispatch(networkUp());
          break;

        case NetworkStatusCategory.PN_TIMEOUT_CATEGORY:
          dispatch(networkDown());
          break;
      }
    }
  };
};

var SubscriptionStatusActionType;

(function (SubscriptionStatusActionType) {
  SubscriptionStatusActionType["RECONNECTED_EVENT"] = "pubnub/RECONNECTED_EVENT";
  SubscriptionStatusActionType["CONNECTED_EVENT"] = "pubnub/CONNECTED_EVENT";
})(SubscriptionStatusActionType || (SubscriptionStatusActionType = {}));

var SubscriptionStatusCategory;

(function (SubscriptionStatusCategory) {
  SubscriptionStatusCategory["PN_CONNECTED_CATEGORY"] = "PNConnectedCategory";
  SubscriptionStatusCategory["PN_RECONNECTED_CATEGORY"] = "PNReconnectedCategory";
})(SubscriptionStatusCategory || (SubscriptionStatusCategory = {}));

var reconnected = function reconnected(payload) {
  return {
    type: SubscriptionStatusActionType.RECONNECTED_EVENT,
    payload: payload
  };
};
var connected = function connected(payload) {
  return {
    type: SubscriptionStatusActionType.CONNECTED_EVENT,
    payload: payload
  };
};
var createSubscriptionStatusListener = function createSubscriptionStatusListener(dispatch) {
  return {
    status: function status(payload) {
      switch (payload.category) {
        case SubscriptionStatusCategory.PN_CONNECTED_CATEGORY:
          dispatch(connected(payload));
          break;

        case SubscriptionStatusCategory.PN_RECONNECTED_CATEGORY:
          dispatch(reconnected(payload));
          break;
      }
    }
  };
};

/**
 * Combines multiple listener objects into one object that supports all of them.
 *
 * @param listeners Array of listener objects.
 * @returns The combined listener Object.
 */
var combineListeners = function combineListeners() {
  for (var _len = arguments.length, listeners = new Array(_len), _key = 0; _key < _len; _key++) {
    listeners[_key] = arguments[_key];
  }

  return Object.assign.apply(Object, [{}].concat(mergeListenersByType(listeners)));
};
/**
 * Take a list of listeners and combine listeners of the same type together.
 *
 * @param listeners Array of listener objects.
 * @returns Array of listener objects with like types combined to single listener object.
 */

var mergeListenersByType = function mergeListenersByType(listeners) {
  var result = [];
  var incomingListeners = {}; // group the listeners by type so we can combine them

  listeners.forEach(function (listener) {
    var allowedListeners = ['status', 'message', 'presence', 'signal', 'messageAction', 'objects'];

    for (var _i = 0, _allowedListeners = allowedListeners; _i < _allowedListeners.length; _i++) {
      var listenerType = _allowedListeners[_i];

      if (listener[listenerType] !== undefined) {
        var _incomingListeners$li;

        if (incomingListeners[listenerType] === undefined) {
          incomingListeners[listenerType] = [];
        }

        (_incomingListeners$li = incomingListeners[listenerType]) === null || _incomingListeners$li === void 0 ? void 0 : _incomingListeners$li.push(listener);
      }
    }
  }); // merge the grouped listeners and add to the result list

  Object.entries(incomingListeners).forEach(function (_ref) {
    var listenerType = _ref[0],
        listenersOfType = _ref[1];

    if (listenersOfType && listenersOfType.length === 1) {
      // only one listener for this type so add directly to the result list
      result.push(listenersOfType[0]);
    } else if (listenersOfType && listenersOfType.length > 1) {
      // multiple listeners for this type so combine them and add to the result list
      result.push(createCombinedListener(listenerType, listenersOfType));
    }
  });
  return result;
};
/**
 * Take a list of listeners of the same type and combine to single listener object.
 * For example an array of status listener objects combined to a single status listener object.
 *
 * @param listenerType The listener type.
 * @param listeners The Array of listeners of the same type.
 */


var createCombinedListener = function createCombinedListener(listenerType, listeners) {
  var _ref2;

  // returns a single listener which invokes each of the incomming listeners
  return _ref2 = {}, _ref2[listenerType] = function (payload) {
    listeners.forEach(function (listener) {
      var currentListener = listener[listenerType];

      if (currentListener !== undefined) {
        currentListener(payload);
      }
    });
  }, _ref2;
};

var createPubNubListener = function createPubNubListener(dispatch) {
  return combineListeners(createMessageListener(dispatch), createPresenceListener(dispatch), createSignalListener(dispatch), createErrorStatusListener(dispatch), createErrorStatusListener(dispatch), createNetworkStatusListener(dispatch), createSubscriptionStatusListener(dispatch), createUserDataListener(dispatch), createChannelDataListener(dispatch), createMembershipListener(dispatch));
};

var createInitialState = function createInitialState() {
  return {
    byId: {}
  };
};

var messageReceived$1 = function messageReceived(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  };

  if (newState.byId[payload.channel] === undefined) {
    newState.byId[payload.channel] = [];
  }

  newState.byId[payload.channel] = [].concat(newState.byId[payload.channel], [payload]);
  return newState;
};

var messageHistoryRetrieved$1 = function messageHistoryRetrieved(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  };

  if (newState.byId[payload.request.channel] === undefined) {
    newState.byId[payload.request.channel] = [];
  }

  var results = payload.response.messages.map(function (m) {
    return {
      channel: payload.request.channel,
      message: m.entry,
      timetoken: m.timetoken
    };
  });
  newState.byId[payload.request.channel] = [].concat(newState.byId[payload.request.channel], results);
  return newState;
};

var createMessageReducer = function createMessageReducer() {
  return function (state, action) {
    if (state === void 0) {
      state = createInitialState();
    }

    switch (action.type) {
      case MessageActionType.MESSAGE_RECEIVED:
        return messageReceived$1(state, action.payload);

      case MessageActionType.MESSAGE_HISTORY_RETRIEVED:
        return messageHistoryRetrieved$1(state, action.payload);

      default:
        return state;
    }
  };
};

var createInitialState$1 = function createInitialState() {
  return {
    byId: {}
  };
};

var signalReceived$1 = function signalReceived(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  };

  if (newState.byId[payload.channel] === undefined) {
    newState.byId[payload.channel] = [];
  }

  newState.byId[payload.channel] = [].concat(newState.byId[payload.channel], [payload]);
  return newState;
};

var createSignalReducer = function createSignalReducer() {
  return function (state, action) {
    if (state === void 0) {
      state = createInitialState$1();
    }

    switch (action.type) {
      case SignalActionType.SIGNAL_RECEIVED:
        return signalReceived$1(state, action.payload);

      default:
        return state;
    }
  };
};

var createInitialState$2 = function createInitialState() {
  return {
    byId: {},
    totalOccupancy: 0
  };
};

var hereNow = function hereNow(state, payload) {
  var newState = {
    byId: _extends(_extends({}, state.byId), payload.response.channels),
    totalOccupancy: payload.response.totalOccupancy
  };
  return newState;
};

var getState = function getState(state, payload) {
  var newState = {
    byId: _extends({}, state.byId),
    totalOccupancy: state.totalOccupancy
  };
  Object.keys(payload.channels).forEach(function (channel) {
    // update occupant state if exists
    if (newState.byId[channel]) {
      newState.byId[channel] = payload.channels[channel];
    }
  });
  return newState;
};

var userJoined = function userJoined(state, payload) {
  var newState = {
    byId: _extends({}, state.byId),
    totalOccupancy: state.totalOccupancy
  };
  var occupants = []; // remove occupant if exists

  if (newState.byId[payload.channel]) {
    occupants = newState.byId[payload.channel].occupants;
    newState.byId[payload.channel].occupants = occupants.filter(function (occupant) {
      return occupant.uuid !== payload.uuid;
    });
    newState.byId[payload.channel].occupancy = newState.byId[payload.channel].occupants.length;

    if (occupants.length === newState.byId[payload.channel].occupants.length) {
      newState.totalOccupancy++;
    }
  } else {
    newState.totalOccupancy++;
  } // add occupant and update occupancy


  newState.byId[payload.channel] = {
    name: payload.channel,
    occupants: [].concat(occupants, [{
      uuid: payload.uuid,
      state: payload.state
    }]),
    occupancy: payload.occupancy
  };
  return newState;
};

var userLeft = function userLeft(state, payload) {
  var newState = {
    byId: _extends({}, state.byId),
    totalOccupancy: state.totalOccupancy
  }; // remove occupant if exists

  if (newState.byId[payload.channel]) {
    var occupants = newState.byId[payload.channel].occupants;
    newState.byId[payload.channel].occupants = occupants.filter(function (occupant) {
      return occupant.uuid !== payload.uuid;
    });

    if (occupants.length > newState.byId[payload.channel].occupants.length) {
      newState.byId[payload.channel].occupancy--;
      newState.totalOccupancy--;
    }
  }

  return newState;
};

var userStateChange$1 = function userStateChange(state, payload) {
  var newState = {
    byId: _extends({}, state.byId),
    totalOccupancy: state.totalOccupancy
  }; // update occupant state if exists

  if (newState.byId[payload.channel]) {
    var occupants = newState.byId[payload.channel].occupants;
    occupants.forEach(function (occupant) {
      if (occupant.uuid === payload.uuid) {
        occupant.state = payload.state;
      }
    });
  }

  return newState;
};

var createPresenceReducer = function createPresenceReducer() {
  return function (state, action) {
    if (state === void 0) {
      state = createInitialState$2();
    }

    switch (action.type) {
      case PresenceActionType.HERE_NOW_RETRIEVED:
        return hereNow(state, action.payload);

      case PresenceActionType.PRESENCE_STATE_RETRIEVED:
        return getState(state, action.payload);

      case PresenceActionType.JOIN_EVENT:
        return userJoined(state, action.payload);

      case PresenceActionType.LEAVE_EVENT:
      case PresenceActionType.TIMEOUT_EVENT:
        return userLeft(state, action.payload);

      case PresenceActionType.STATE_CHANGE_EVENT:
        return userStateChange$1(state, action.payload);

      default:
        return state;
    }
  };
};

var createNetworkStatusReducer = function createNetworkStatusReducer(initializer) {
  var initialState;

  if (typeof initializer === 'boolean') {
    initialState = {
      isConnected: initializer
    };
  } else if (typeof initializer === 'function') {
    initialState = {
      isConnected: initializer()
    };

    if (typeof initialState.isConnected !== 'boolean') {
      throw new Error('The initializer function must return a boolean value (true or false)');
    }
  } else {
    throw new Error('The initializer parameter must be a boolean value (true or false) or function');
  }

  return function networkStatusReducer(state, action) {
    if (state === void 0) {
      state = initialState;
    }

    switch (action.type) {
      case NetworkStatusActionType.NETWORK_UP_EVENT:
        return {
          isConnected: true
        };

      case NetworkStatusActionType.NETWORK_DOWN_EVENT:
        return {
          isConnected: false
        };

      default:
        return state;
    }
  };
};

var createInitialState$3 = function createInitialState() {
  return {
    byId: {}
  };
};

var UserDataSet$2 = function UserDataSet(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  }; // partial update

  newState.byId[payload.response.data.id] = _extends(_extends({}, state.byId[payload.response.data.id]), payload.response.data);
  return newState;
};

var UserDataRemoved$2 = function UserDataRemoved(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  };
  delete newState.byId[payload.request.uuid];
  return newState;
};

var allUserDataRetrieved$1 = function allUserDataRetrieved(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  };
  payload.response.data.forEach(function (item) {
    newState.byId[item.id] = item;
  });
  return newState;
};

var UserDataRetrieved$1 = function UserDataRetrieved(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  };
  newState.byId[payload.response.data.id] = payload.response.data;
  return newState;
};

var UserDataSetEventReceived = function UserDataSetEventReceived(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  }; // partial update

  newState.byId[payload.data.id] = _extends(_extends({}, state.byId[payload.data.id]), payload.data);
  return newState;
};

var UserDataRemovedEventReceived = function UserDataRemovedEventReceived(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  };
  delete newState.byId[payload.data.id];
  return newState;
};

var membersRetrieved = function membersRetrieved(state, payload) {
  var newState = state;

  if (payload.response.data.length > 0) {
    newState = {
      byId: _extends({}, state.byId)
    };

    for (var i = 0; i < payload.response.data.length; i++) {
      var currentMember = payload.response.data[i]; // important: consumers *must* include UUIDFields for the state to be updated

      if (currentMember.uuid && 'eTag' in currentMember.uuid) {
        newState.byId[currentMember.uuid.id] = currentMember.uuid;
      }
    }
  }

  return newState;
};

var createUserDataReducer = function createUserDataReducer() {
  return function (state, action) {
    if (state === void 0) {
      state = createInitialState$3();
    }

    switch (action.type) {
      case UserDataActionType.USER_DATA_SET:
        return UserDataSet$2(state, action.payload);

      case UserDataActionType.USER_DATA_REMOVED:
        return UserDataRemoved$2(state, action.payload);

      case UserDataActionType.ALL_USER_DATA_RETRIEVED:
        return allUserDataRetrieved$1(state, action.payload);

      case UserDataActionType.USER_DATA_RETRIEVED:
        return UserDataRetrieved$1(state, action.payload);

      case UserDataActionType.USER_DATA_SET_EVENT:
        return UserDataSetEventReceived(state, action.payload);

      case UserDataActionType.USER_DATA_REMOVED_EVENT:
        return UserDataRemovedEventReceived(state, action.payload);

      case ChannelMembersActionType.CHANNEL_MEMBERS_RETRIEVED:
        return membersRetrieved(state, action.payload);

      default:
        return state;
    }
  };
};

var createInitialState$4 = function createInitialState() {
  return {
    uuids: []
  };
};

var allUserDataRetrieved$2 = function allUserDataRetrieved(payload) {
  return {
    uuids: payload.response.data.map(function (uuid) {
      return uuid.id;
    })
  };
};

var createUsersListReducer = function createUsersListReducer() {
  return function (state, action) {
    if (state === void 0) {
      state = createInitialState$4();
    }

    switch (action.type) {
      case UserDataActionType.ALL_USER_DATA_RETRIEVED:
        return allUserDataRetrieved$2(action.payload);

      default:
        return state;
    }
  };
};

var createInitialState$5 = function createInitialState() {
  return {
    byId: {}
  };
};

var channelDataSet$2 = function channelDataSet(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  }; // partial update

  newState.byId[payload.response.data.id] = _extends(_extends({}, state.byId[payload.response.data.id]), payload.response.data);
  return newState;
};

var channelDataRemoved$2 = function channelDataRemoved(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  };
  delete newState.byId[payload.request.channel];
  return newState;
};

var allChannelDataRetrieved$1 = function allChannelDataRetrieved(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  };
  payload.response.data.forEach(function (item) {
    newState.byId[item.id] = item;
  });
  return newState;
};

var channelDataRetrieved$1 = function channelDataRetrieved(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  };
  newState.byId[payload.response.data.id] = payload.response.data;
  return newState;
};

var channelDataSetEventReceived = function channelDataSetEventReceived(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  }; // partial update

  newState.byId[payload.data.id] = _extends(_extends({}, state.byId[payload.data.id]), payload.data);
  return newState;
};

var channelDataRemovedEventReceived = function channelDataRemovedEventReceived(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  };
  delete newState.byId[payload.data.id];
  return newState;
};

var membershipRetrieved = function membershipRetrieved(state, payload) {
  var newState = state;

  if (payload.response.data.length > 0) {
    newState = {
      byId: _extends({}, state.byId)
    };

    for (var i = 0; i < payload.response.data.length; i++) {
      var currentMembership = payload.response.data[i]; // important: consumers *must* include ChannelFields for the state to be updated

      if (currentMembership.channel && 'eTag' in currentMembership.channel) {
        newState.byId[currentMembership.channel.id] = currentMembership.channel;
      }
    }
  }

  return newState;
};

var createChannelDataReducer = function createChannelDataReducer() {
  return function (state, action) {
    if (state === void 0) {
      state = createInitialState$5();
    }

    switch (action.type) {
      case ChannelDataActionType.CHANNEL_DATA_SET:
        return channelDataSet$2(state, action.payload);

      case ChannelDataActionType.CHANNEL_DATA_REMOVED:
        return channelDataRemoved$2(state, action.payload);

      case ChannelDataActionType.ALL_CHANNEL_DATA_RETRIEVED:
        return allChannelDataRetrieved$1(state, action.payload);

      case ChannelDataActionType.CHANNEL_DATA_RETRIEVED:
        return channelDataRetrieved$1(state, action.payload);

      case ChannelDataActionType.CHANNEL_DATA_SET_EVENT:
        return channelDataSetEventReceived(state, action.payload);

      case ChannelDataActionType.CHANNEL_DATA_REMOVED_EVENT:
        return channelDataRemovedEventReceived(state, action.payload);

      case MembershipActionType.MEMBERSHIPS_RETRIEVED:
        return membershipRetrieved(state, action.payload);

      default:
        return state;
    }
  };
};

var createInitialState$6 = function createInitialState() {
  return {
    channelIds: []
  };
};

var allChannelDataRetrieved$2 = function allChannelDataRetrieved(payload) {
  return {
    channelIds: payload.response.data.map(function (channel) {
      return channel.id;
    })
  };
};

var createChannelsListReducer = function createChannelsListReducer() {
  return function (state, action) {
    if (state === void 0) {
      state = createInitialState$6();
    }

    switch (action.type) {
      case ChannelDataActionType.ALL_CHANNEL_DATA_RETRIEVED:
        return allChannelDataRetrieved$2(action.payload);

      default:
        return state;
    }
  };
};

var createInitialState$7 = function createInitialState() {
  return {
    byId: {}
  };
};

var uuidRemovedFromChannel = function uuidRemovedFromChannel(state, payload) {
  if (state.byId[payload.data.uuid.id] && state.byId[payload.data.uuid.id].filter(function (membership) {
    return membership.id === payload.data.channel.id;
  }).length > 0) {
    var newState = {
      byId: _extends({}, state.byId)
    };
    newState.byId[payload.data.uuid.id] = newState.byId[payload.data.uuid.id].filter(function (membership) {
      return membership.id !== payload.data.channel.id;
    });
    return newState;
  }

  return state;
};

var uuidMembershipUpdatedOnChannel = function uuidMembershipUpdatedOnChannel(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  };
  var clonedUUID = [].concat(newState.byId[payload.data.uuid.id] || []);
  var exists = false;
  clonedUUID = clonedUUID.map(function (channel) {
    if (channel.id === payload.data.channel.id) {
      exists = true;
      return _extends(_extends({}, channel), {}, {
        custom: payload.data.custom
      });
    } else {
      return channel;
    }
  });

  if (!exists) {
    clonedUUID.push({
      id: payload.data.channel.id,
      custom: payload.data.custom
    });
  }

  newState.byId[payload.data.uuid.id] = clonedUUID;
  return newState;
};

var membershipResult = function membershipResult(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  };
  var memberships = payload.response.data.map(function (complete) {
    return {
      id: complete.channel.id,
      custom: complete.custom || null
    };
  });
  newState.byId[payload.request.uuid] = memberships;
  return newState;
};

var createMembershipReducer = function createMembershipReducer() {
  return function (state, action) {
    if (state === void 0) {
      state = createInitialState$7();
    }

    switch (action.type) {
      case MembershipActionType.MEMBERSHIPS_RETRIEVED:
      case MembershipActionType.MEMBERSHIPS_SET:
      case MembershipActionType.MEMBERSHIPS_REMOVED:
        return membershipResult(state, action.payload);

      case MembershipActionType.MEMBERSHIP_SET_EVENT:
        return uuidMembershipUpdatedOnChannel(state, action.payload);

      case MembershipActionType.MEMBERSHIP_REMOVED_EVENT:
        return uuidRemovedFromChannel(state, action.payload);

      default:
        return state;
    }
  };
};

var createInitialState$8 = function createInitialState() {
  return {
    byId: {}
  };
};

var channelMembershipRemoveEventRecieved = function channelMembershipRemoveEventRecieved(state, payload) {
  if (state.byId[payload.data.channel.id] && state.byId[payload.data.channel.id].filter(function (membership) {
    return membership.id === payload.data.uuid.id;
  }).length > 0) {
    var newState = {
      byId: _extends({}, state.byId)
    };
    newState.byId[payload.data.channel.id] = newState.byId[payload.data.channel.id].filter(function (membership) {
      return membership.id !== payload.data.uuid.id;
    });
    return newState;
  }

  return state;
};

var channelMembershipSetEventRecieved = function channelMembershipSetEventRecieved(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  };
  var clonedChannel = [].concat(newState.byId[payload.data.channel.id] || []);
  var exists = false;
  clonedChannel = clonedChannel.map(function (uuid) {
    if (uuid.id === payload.data.uuid.id) {
      exists = true;
      return {
        id: uuid.id,
        custom: payload.data.custom
      };
    } else {
      return uuid;
    }
  });

  if (!exists) {
    clonedChannel.push({
      id: payload.data.uuid.id,
      custom: payload.data.custom
    });
  }

  newState.byId[payload.data.channel.id] = clonedChannel;
  return newState;
};

var channelMembersResult = function channelMembersResult(state, payload) {
  var newState = {
    byId: _extends({}, state.byId)
  };
  var memberships = payload.response.data.map(function (complete) {
    return {
      id: complete.uuid.id,
      custom: complete.custom || null
    };
  });
  newState.byId[payload.request.channel] = memberships;
  return newState;
};

var createChannelMembersReducer = function createChannelMembersReducer() {
  return function (state, action) {
    if (state === void 0) {
      state = createInitialState$8();
    }

    switch (action.type) {
      case ChannelMembersActionType.CHANNEL_MEMBERS_RETRIEVED:
      case ChannelMembersActionType.CHANNEL_MEMBERS_SET:
      case ChannelMembersActionType.CHANNEL_MEMBERS_REMOVED:
        return channelMembersResult(state, action.payload);

      case MembershipActionType.MEMBERSHIP_SET_EVENT:
        return channelMembershipSetEventRecieved(state, action.payload);

      case MembershipActionType.MEMBERSHIP_REMOVED_EVENT:
        return channelMembershipRemoveEventRecieved(state, action.payload);

      default:
        return state;
    }
  };
};

export { ChannelDataActionType, ChannelMembersActionType, ErrorStatusActionType, MembershipActionType, MessageActionType, NetworkStatusActionType, PresenceActionType, PresenceCategory, SignalActionType, SubscriptionStatusActionType, UserDataActionType, UserDataRemoved, UserDataRetrieved, UserDataSet, accessDenied, allChannelDataRetrieved, allUserDataRetrieved, badRequest, channelDataRemoved, channelDataRetrieved, channelDataSet, channelMembersRemoved, channelMembersRetrieved, channelMembersSet, combineListeners, connected, createChannelDataListener, createChannelDataReducer, createChannelMembersReducer, createChannelsListReducer, createErrorStatusListener, createMembershipListener, createMembershipReducer, createMessageListener, createMessageReducer, createNetworkStatusListener, createNetworkStatusReducer, createPresenceListener, createPresenceReducer, createPubNubListener, createSignalListener, createSignalReducer, createSubscriptionStatusListener, createUserDataListener, createUserDataReducer, createUsersListReducer, decryptionError, errorFetchingAllChannelData, errorFetchingAllUserData, errorFetchingChannelData, errorFetchingChannelMembers, errorFetchingHereNow, errorFetchingMemberships, errorFetchingMessageHistory, errorFetchingPresenceState, errorFetchingUserData, errorRemovingChannelData, errorRemovingChannelMembers, errorRemovingMemberships, errorRemovingUserData, errorSendingMessage, errorSendingSignal, errorSettingChannelData, errorSettingChannelMembers, errorSettingMemberships, errorSettingUserData, fetchAllChannelData, fetchAllUserData, fetchChannelData, fetchChannelMembers, fetchHereNow, fetchMemberships, fetchMessageHistory, fetchPresenceState, fetchUserData, fetchingAllChannelData, fetchingAllUserData, fetchingChannelData, fetchingChannelMembers, fetchingHereNow, fetchingMemberships, fetchingMessageHistory, fetchingPresenceState, fetchingUserData, hereNowRetrieved, malformedResponse, membershipsRemoved, membershipsRetrieved, membershipsSet, messageHistoryRetrieved, messageSent, networkDown, networkIssues, networkUp, presenceStateRetrieved, reconnected, removeChannelData, removeChannelMembers, removeMemberships, removeUserData, removingChannelData, removingChannelMembers, removingMemberships, removingUserData, requestMessageCountExceeded, sendMessage, sendSignal, sendingMessage, sendingSignal, setChannelData, setChannelMembers, setMemberships, setUserData, settingChannelData, settingChannelMembers, settingMemberships, settingUserData, signalSent, timeoutConnection, unknown };
//# sourceMappingURL=pubnub-redux.esm.js.map

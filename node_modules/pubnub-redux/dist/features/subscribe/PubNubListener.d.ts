import Pubnub from 'pubnub';
import { Dispatch } from 'redux';
import { NetworkStatusListenerActions } from '../networkStatus/NetworkStatusListener';
import { SubscriptionStatusListenerActions } from '../subscriptionStatus/SubscriptionStatusListener';
import { ErrorStatusListenerActions } from '../errorStatus/ErrorStatusListener';
import { Message, MessageReceivedAction } from 'features/message/MessageActions';
import { UserDataListenerActions } from 'features/user/UserDataActions';
import { ChannelDataListenerActions, Channel } from 'features/channel/ChannelDataActions';
import { PresenceListenerActions } from 'features/presence/PresenceActions';
import { SignalReceivedAction, Signal } from 'features/signal/SignalActions';
import { MembershipListenerActions } from 'features/membership/MembershipActions';
import { ObjectsCustom } from 'foundations/ObjectsCustom';
export declare type ListenerActions<MessageType extends Message, SignalType extends Signal, UserCustom extends ObjectsCustom, ChannelCustom extends ObjectsCustom, MembershipCustom extends ObjectsCustom> = MessageReceivedAction<MessageType> | PresenceListenerActions | SignalReceivedAction<SignalType> | UserDataListenerActions<UserCustom> | ChannelDataListenerActions<ChannelCustom> | MembershipListenerActions<MembershipCustom> | NetworkStatusListenerActions | SubscriptionStatusListenerActions | ErrorStatusListenerActions;
export declare const createPubNubListener: <MessageType extends Message, SignalType extends Signal, UserCustom extends Pubnub.ObjectCustom, ChannelType extends Channel<Pubnub.ObjectCustom>, MembershipCustom extends Pubnub.ObjectCustom>(dispatch: Dispatch<ListenerActions<MessageType, SignalType, UserCustom, NonNullable<ChannelType["custom"]>, MembershipCustom>>) => any;
/**
 * Combines multiple listener objects into one object that supports all of them.
 *
 * @param listeners Array of listener objects.
 * @returns The combined listener Object.
 */
export declare const combineListeners: (...listeners: any[]) => any;

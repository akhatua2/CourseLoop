import { Dispatch } from 'redux';
import { UserDataRemovedAction, RemovingUserDataAction, ErrorRemovingUserDataAction, DeleteUserDataRequest, DeleteUserDataError, DeleteUserDataSuccess } from '../UserDataActions';
import { UserDataActionType } from '../UserDataActionType.enum';
import { PubnubThunkContext } from 'foundations/ThunkTypes';
import { ActionMeta, AnyMeta } from 'foundations/ActionMeta';
export declare const removingUserData: <Meta extends ActionMeta>(payload: DeleteUserDataRequest, meta?: Meta | undefined) => RemovingUserDataAction<Meta>;
export declare const UserDataRemoved: <Meta extends ActionMeta>(payload: DeleteUserDataSuccess, meta?: Meta | undefined) => UserDataRemovedAction<Meta>;
export declare const errorRemovingUserData: <Meta extends ActionMeta>(payload: DeleteUserDataError, meta?: Meta | undefined) => ErrorRemovingUserDataAction<Meta>;
export declare const removeUserData: <Meta extends ActionMeta = AnyMeta>(request: DeleteUserDataRequest, meta?: Meta | undefined) => {
    (dispatch: Dispatch<import("redux").AnyAction>, _getState: any, { pubnub }: PubnubThunkContext): Promise<UserDataRemovedAction<Meta>>;
    type: UserDataActionType;
};

import { Dispatch } from 'redux';
import { RemovingChannelsAction, MembershipsRemovedAction, SetMembershipsSuccess, ErrorRemovingMembershipsAction, SetMembershipsError, SetMembershipsRequest, RemoveMembershipsRequest } from '../MembershipActions';
import { MembershipActionType } from '../MembershipActionType.enum';
import { PubnubThunkContext } from 'foundations/ThunkTypes';
import { ActionMeta, AnyMeta } from 'foundations/ActionMeta';
import { ObjectCustom } from 'pubnub';
export declare const removingMemberships: <ChannelCustom extends ObjectCustom, Meta extends ActionMeta>(payload: SetMembershipsRequest<ChannelCustom>, meta?: Meta | undefined) => RemovingChannelsAction<ChannelCustom, Meta>;
export declare const membershipsRemoved: <MembershipCustom extends ObjectCustom, ChannelCustom extends ObjectCustom, Meta extends ActionMeta>(payload: SetMembershipsSuccess<MembershipCustom, ChannelCustom>, meta?: Meta | undefined) => MembershipsRemovedAction<MembershipCustom, ChannelCustom, Meta>;
export declare const errorRemovingMemberships: <ChannelCustom extends ObjectCustom, Meta extends ActionMeta>(payload: SetMembershipsError<ChannelCustom>, meta?: Meta | undefined) => ErrorRemovingMembershipsAction<ChannelCustom, Meta>;
export declare const removeMemberships: <MembershipCustom extends ObjectCustom, ChannelCustom extends ObjectCustom, Meta extends ActionMeta = AnyMeta>(request: RemoveMembershipsRequest, meta?: Meta | undefined) => {
    (dispatch: Dispatch<import("redux").AnyAction>, _getState: any, { pubnub }: PubnubThunkContext): Promise<MembershipsRemovedAction<MembershipCustom, ChannelCustom, Meta>>;
    type: MembershipActionType;
};

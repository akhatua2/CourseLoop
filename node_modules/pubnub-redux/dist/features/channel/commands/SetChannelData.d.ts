/// <reference types="pubnub" />
import { Dispatch } from 'redux';
import { SettingChannelDataAction, ChannelDataSetAction, ErrorSettingChannelDataAction, SetChannelDataError, SetChannelDataSuccess, SetChannelDataRequest } from '../ChannelDataActions';
import { ChannelDataActionType } from '../ChannelDataActionType.enum';
import { PubnubThunkContext } from 'foundations/ThunkTypes';
import { ActionMeta, AnyMeta } from 'foundations/ActionMeta';
export declare const settingChannelData: <ChannelCustom extends import("pubnub").ObjectCustom, Meta extends ActionMeta>(payload: SetChannelDataRequest<ChannelCustom>, meta?: Meta | undefined) => SettingChannelDataAction<ChannelCustom, Meta>;
export declare const channelDataSet: <ChannelCustom extends import("pubnub").ObjectCustom, Meta extends ActionMeta>(payload: SetChannelDataSuccess<ChannelCustom>, meta?: Meta | undefined) => ChannelDataSetAction<ChannelCustom, Meta>;
export declare const errorSettingChannelData: <ChannelCustom extends import("pubnub").ObjectCustom, Meta extends ActionMeta>(payload: SetChannelDataError<ChannelCustom>, meta?: Meta | undefined) => ErrorSettingChannelDataAction<ChannelCustom, Meta>;
export declare const setChannelData: <ChannelCustom extends import("pubnub").ObjectCustom, Meta extends ActionMeta = AnyMeta>(request: SetChannelDataRequest<ChannelCustom>, meta?: Meta | undefined) => {
    (dispatch: Dispatch<import("redux").AnyAction>, _getState: any, { pubnub }: PubnubThunkContext): Promise<ChannelDataSetAction<ChannelCustom, Meta>>;
    type: ChannelDataActionType;
};

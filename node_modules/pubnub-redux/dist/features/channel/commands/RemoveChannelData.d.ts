/// <reference types="pubnub" />
import { Dispatch } from 'redux';
import { ChannelDataRemovedAction, RemovingChannelDataAction, ErrorRemovingChannelDataAction, RemoveChannelError, RemoveChannelSuccess } from '../ChannelDataActions';
import { ChannelDataActionType } from '../ChannelDataActionType.enum';
import { PubnubThunkContext } from 'foundations/ThunkTypes';
import { ActionMeta, AnyMeta } from 'foundations/ActionMeta';
export declare const removingChannelData: <Meta extends ActionMeta>(payload: import("pubnub").RemoveChannelMetadataParameters, meta?: Meta | undefined) => RemovingChannelDataAction<Meta>;
export declare const channelDataRemoved: <Meta extends ActionMeta>(payload: RemoveChannelSuccess, meta?: Meta | undefined) => ChannelDataRemovedAction<Meta>;
export declare const errorRemovingChannelData: <Meta extends ActionMeta>(payload: RemoveChannelError, meta?: Meta | undefined) => ErrorRemovingChannelDataAction<Meta>;
export declare const removeChannelData: <Meta extends ActionMeta = AnyMeta>(request: import("pubnub").RemoveChannelMetadataParameters, meta?: Meta | undefined) => {
    (dispatch: Dispatch<import("redux").AnyAction>, _getState: any, { pubnub }: PubnubThunkContext): Promise<ChannelDataRemovedAction<Meta>>;
    type: ChannelDataActionType;
};

{"version":3,"file":"pubnub-redux.esm.js","sources":["../src/features/membership/MembershipActionType.enum.ts","../src/features/membership/commands/RemoveMemberships.ts","../src/features/membership/commands/FetchMemberships.ts","../src/features/membership/commands/SetMemberships.ts","../src/features/members/ChannelMembersActionType.enum.ts","../src/features/members/commands/FetchChannelMembers.ts","../src/features/members/commands/SetChannelMembers.ts","../src/features/members/commands/RemoveChannelMembers.ts","../src/features/message/MessageActionType.enum.ts","../src/features/message/commands/SendMessage.ts","../src/features/signal/SignalActionType.enum.ts","../src/features/signal/commands/SendSignal.ts","../src/features/message/commands/FetchMessageHistory.ts","../src/features/channel/ChannelDataActionType.enum.ts","../src/features/channel/commands/RemoveChannelData.ts","../src/features/channel/commands/FetchChannelData.ts","../src/features/channel/commands/FetchAllChannelData.ts","../src/features/channel/commands/SetChannelData.ts","../src/features/user/UserDataActionType.enum.ts","../src/features/user/commands/RemoveUserData.ts","../src/features/user/commands/FetchUserData.ts","../src/features/user/commands/FetchAllUserData.ts","../src/features/user/commands/SetUserData.ts","../src/features/presence/PresenceActionType.enum.ts","../src/features/presence/commands/FetchHereNow.ts","../src/features/presence/commands/FetchPresenceState.ts","../src/features/user/UserDataListener.ts","../src/features/channel/ChannelDataListener.ts","../src/features/membership/MembershipListener.ts","../src/features/message/MessageListener.ts","../src/features/presence/PresenceCategory.enum.ts","../src/features/presence/PresenceListener.ts","../src/features/signal/SignalListener.ts","../src/features/errorStatus/ErrorStatusCategory.enum.ts","../src/features/errorStatus/ErrorStatusActionType.enum.ts","../src/features/errorStatus/ErrorStatusListener.ts","../src/features/networkStatus/NetworkStatusActionType.enum.ts","../src/features/networkStatus/NetworkStatusCategory.enum.ts","../src/features/networkStatus/NetworkStatusListener.ts","../src/features/subscriptionStatus/SubscriptionStatusActionType.enum.ts","../src/features/subscriptionStatus/SubscriptionStatusCategory.enum.ts","../src/features/subscriptionStatus/SubscriptionStatusListener.ts","../src/foundations/CombineListeners.ts","../src/features/helpers/PubNubListener.ts","../src/features/message/MessageReducer.ts","../src/features/signal/SignalReducer.ts","../src/features/presence/PresenceReducer.ts","../src/features/networkStatus/NetworkStatusReducer.ts","../src/features/user/UserDataReducer.ts","../src/features/user/UsersListReducer.ts","../src/features/channel/ChannelDataReducer.ts","../src/features/channel/ChannelsListReducer.ts","../src/features/membership/MembershipReducer.ts","../src/features/members/ChannelMembersReducer.ts"],"sourcesContent":["export enum MembershipActionType {\n  // fetchMemberships()\n  FETCH_MEMBERSHIPS_COMMAND = 'pubnub/FETCH_MEMBERSHIPS_COMMAND',\n  FETCHING_MEMBERSHIPS = 'pubnub/FETCHING_MEMBERSHIPS',\n  MEMBERSHIPS_RETRIEVED = 'pubnub/MEMBERSHIPS_RETRIEVED',\n  ERROR_FETCHING_MEMBERSHIPS = 'pubnub/ERROR_FETCHING_MEMBERSHIPS',\n  // setMemberships()\n  SET_MEMBERSHIPS_COMMAND = 'pubnub/SET_MEMBERSHIPS_COMMAND',\n  SETTING_MEMBERSHIPS = 'pubnub/SETTING_MEMBERSHIPS',\n  MEMBERSHIPS_SET = 'pubnub/MEMBERSHIPS_SET',\n  ERROR_SETTING_MEMBERSHIPS = 'pubnub/ERROR_SETTING_MEMBERSHIPS',\n  // removeMemberships()\n  REMOVE_MEMBERSHIPS_COMMAND = 'pubnub/REMOVE_MEMBERSHIPS_COMMAND',\n  REMOVING_MEMBERSHIPS = 'pubnub/REMOVING_MEMBERSHIPS',\n  MEMBERSHIPS_REMOVED = 'pubnub/MEMBERSHIPS_REMOVED',\n  ERROR_REMOVING_MEMBERSHIPS = 'pubnub/ERROR_REMOVING_MEMBERSHIPS',\n  // objects events\n  MEMBERSHIP_REMOVED_EVENT = 'pubnub/MEMBERSHIP_REMOVED_EVENT',\n  MEMBERSHIP_SET_EVENT = 'pubnub/MEMBERSHIP_SET_EVENT',\n}\n","import { Dispatch } from 'redux';\nimport {\n  RemovingChannelsAction,\n  MembershipsRemovedAction,\n  SetMembershipsSuccess,\n  ErrorRemovingMembershipsAction,\n  SetMembershipsError,\n  SetMembershipsRequest,\n  RemoveMembershipsRequest,\n} from '../MembershipActions';\nimport { MembershipActionType } from '../MembershipActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\nimport { ObjectCustom } from 'pubnub';\n\nexport const removingMemberships = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsRequest<ChannelCustom>,\n  meta?: Meta\n): RemovingChannelsAction<ChannelCustom, Meta> => ({\n  type: MembershipActionType.REMOVING_MEMBERSHIPS,\n  payload,\n  meta,\n});\n\nexport const membershipsRemoved = <\n  MembershipCustom extends ObjectCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsSuccess<MembershipCustom, ChannelCustom>,\n  meta?: Meta\n): MembershipsRemovedAction<MembershipCustom, ChannelCustom, Meta> => ({\n  type: MembershipActionType.MEMBERSHIPS_REMOVED,\n  payload,\n  meta,\n});\n\nexport const errorRemovingMemberships = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsError<ChannelCustom>,\n  meta?: Meta\n): ErrorRemovingMembershipsAction<ChannelCustom, Meta> => ({\n  type: MembershipActionType.ERROR_REMOVING_MEMBERSHIPS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const removeMemberships = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: RemoveMembershipsRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<\n      MembershipsRemovedAction<MembershipCustom, ChannelCustom, Meta>\n    >((resolve, reject) => {\n      dispatch(removingMemberships<ChannelCustom, Meta>(request, meta));\n\n      pubnub.api.objects.removeMemberships<MembershipCustom, ChannelCustom>(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorRemovingMemberships(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = membershipsRemoved<\n              MembershipCustom,\n              ChannelCustom,\n              Meta\n            >(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = MembershipActionType.REMOVE_MEMBERSHIPS_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  FetchingMembershipsAction,\n  MembershipsRetrievedAction,\n  FetchMembershipsSuccess,\n  ErrorFetchingMembershipsAction,\n  FetchMembershipsError,\n  FetchMembershipsRequest,\n} from '../MembershipActions';\nimport { MembershipActionType } from '../MembershipActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingMemberships = <Meta extends ActionMeta>(\n  payload: FetchMembershipsRequest,\n  meta?: Meta\n): FetchingMembershipsAction<Meta> => ({\n  type: MembershipActionType.FETCHING_MEMBERSHIPS,\n  payload,\n  meta,\n});\n\nexport const membershipsRetrieved = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchMembershipsSuccess<MembershipCustom, ChannelCustom>,\n  meta?: Meta\n): MembershipsRetrievedAction<MembershipCustom, ChannelCustom, Meta> => ({\n  type: MembershipActionType.MEMBERSHIPS_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingMemberships = <Meta extends ActionMeta>(\n  payload: FetchMembershipsError,\n  meta?: Meta\n): ErrorFetchingMembershipsAction<Meta> => ({\n  type: MembershipActionType.ERROR_FETCHING_MEMBERSHIPS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchMemberships = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchMembershipsRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<\n      MembershipsRetrievedAction<MembershipCustom, ChannelCustom, Meta>\n    >((resolve, reject) => {\n      dispatch(fetchingMemberships<Meta>(request, meta));\n\n      pubnub.api.objects.getMemberships<MembershipCustom, ChannelCustom>(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorFetchingMemberships<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = membershipsRetrieved<\n              MembershipCustom,\n              ChannelCustom,\n              Meta\n            >(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = MembershipActionType.FETCH_MEMBERSHIPS_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  SettingMembershipsAction,\n  MembershipsSetAction,\n  SetMembershipsSuccess,\n  ErrorSettingMembershipsAction,\n  SetMembershipsError,\n  SetMembershipsRequest,\n} from '../MembershipActions';\nimport { MembershipActionType } from '../MembershipActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const settingMemberships = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsRequest<ChannelCustom>,\n  meta?: Meta\n): SettingMembershipsAction<ChannelCustom, Meta> => ({\n  type: MembershipActionType.SETTING_MEMBERSHIPS,\n  payload,\n  meta,\n});\n\nexport const membershipsSet = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsSuccess<MembershipCustom, ChannelCustom>,\n  meta?: Meta\n): MembershipsSetAction<MembershipCustom, ChannelCustom, Meta> => ({\n  type: MembershipActionType.MEMBERSHIPS_SET,\n  payload,\n  meta,\n});\n\nexport const errorSettingMemberships = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsError<ChannelCustom>,\n  meta?: Meta\n): ErrorSettingMembershipsAction<ChannelCustom, Meta> => ({\n  type: MembershipActionType.ERROR_SETTING_MEMBERSHIPS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const setMemberships = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SetMembershipsRequest<ChannelCustom>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<MembershipsSetAction<MembershipCustom, ChannelCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(settingMemberships<ChannelCustom, Meta>(request, meta));\n\n        pubnub.api.objects.setMemberships<MembershipCustom, ChannelCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(\n                errorSettingMemberships<ChannelCustom, Meta>(payload, meta)\n              );\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = membershipsSet<\n                MembershipCustom,\n                ChannelCustom,\n                Meta\n              >(payload, meta);\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = MembershipActionType.SET_MEMBERSHIPS_COMMAND;\n\n  return thunkFunction;\n};\n","export enum ChannelMembersActionType {\n  // fetchChannelMembers()\n  FETCH_CHANNEL_MEMBERS_COMMAND = 'pubnub/FETCH_CHANNEL_MEMBERS_COMMAND',\n  FETCHING_CHANNEL_MEMBERS = 'pubnub/FETCHING_CHANNEL_MEMBERS',\n  CHANNEL_MEMBERS_RETRIEVED = 'pubnub/CHANNEL_MEMBERS_RETRIEVED',\n  ERROR_FETCHING_CHANNEL_MEMBERS = 'pubnub/ERROR_FETCHING_CHANNEL_MEMBERS',\n  // setChannelMembers()\n  SET_CHANNEL_MEMBERS_COMMAND = 'pubnub/SET_CHANNEL_MEMBERS_COMMAND',\n  SETTING_CHANNEL_MEMBERS = 'pubnub/SETTING_CHANNEL_MEMBERS',\n  CHANNEL_MEMBERS_SET = 'pubnub/CHANNEL_MEMBERS_SET',\n  ERROR_SETTING_CHANNEL_MEMBERS = 'pubnub/ERROR_SETTING_CHANNEL_MEMBERS',\n  // removeChannelMembers()\n  REMOVE_CHANNEL_MEMBERS_COMMAND = 'pubnub/REMOVE_CHANNEL_MEMBERS_COMMAND',\n  REMOVING_CHANNEL_MEMBERS = 'pubnub/REMOVING_CHANNEL_MEMBERS',\n  CHANNEL_MEMBERS_REMOVED = 'pubnub/CHANNEL_MEMBERS_REMOVED',\n  ERROR_REMOVING_CHANNEL_MEMBERS = 'pubnub/ERROR_REMOVING_CHANNEL_MEMBERS',\n}\n","import { Dispatch } from 'redux';\nimport {\n  ChannelMembersRetrievedAction,\n  ErrorFetchingChannelMembersAction,\n  FetchingChannelMembersAction,\n  FetchChannelMembersError,\n  FetchChannelMembersSuccess,\n  FetchChannelMembersRequest,\n} from '../ChannelMembersActions';\nimport { ChannelMembersActionType } from '../ChannelMembersActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingChannelMembers = <Meta extends ActionMeta>(\n  payload: FetchChannelMembersRequest,\n  meta?: Meta\n): FetchingChannelMembersAction<Meta> => ({\n  type: ChannelMembersActionType.FETCHING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n});\n\nexport const channelMembersRetrieved = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchChannelMembersSuccess<MembershipCustom, UserCustom>,\n  meta?: Meta\n): ChannelMembersRetrievedAction<MembershipCustom, UserCustom, Meta> => ({\n  type: ChannelMembersActionType.CHANNEL_MEMBERS_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingChannelMembers = <Meta extends ActionMeta>(\n  payload: FetchChannelMembersError,\n  meta?: Meta\n): ErrorFetchingChannelMembersAction<Meta> => ({\n  type: ChannelMembersActionType.ERROR_FETCHING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchChannelMembers = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchChannelMembersRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<\n      ChannelMembersRetrievedAction<MembershipCustom, UserCustom, Meta>\n    >((resolve, reject) => {\n      dispatch(fetchingChannelMembers<Meta>(request, meta));\n\n      pubnub.api.objects.getChannelMembers<MembershipCustom, UserCustom>(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorFetchingChannelMembers<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = channelMembersRetrieved<\n              MembershipCustom,\n              UserCustom,\n              Meta\n            >(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = ChannelMembersActionType.FETCH_CHANNEL_MEMBERS_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  SettingChannelMembersAction,\n  ChannelMembersSetAction,\n  ErrorSettingChannelMembersAction,\n  SetChannelMembersError,\n  SetChannelMembersSuccess,\n  SetChannelMembersRequest,\n} from '../ChannelMembersActions';\nimport { ChannelMembersActionType } from '../ChannelMembersActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const settingChannelMembers = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelMembersRequest<UserCustom>,\n  meta?: Meta\n): SettingChannelMembersAction<UserCustom, Meta> => ({\n  type: ChannelMembersActionType.SETTING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n});\n\nexport const channelMembersSet = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelMembersSuccess<MembershipCustom, UserCustom>,\n  meta?: Meta\n): ChannelMembersSetAction<MembershipCustom, UserCustom, Meta> => ({\n  type: ChannelMembersActionType.CHANNEL_MEMBERS_SET,\n  payload,\n  meta,\n});\n\nexport const errorSettingChannelMembers = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelMembersError<UserCustom>,\n  meta?: Meta\n): ErrorSettingChannelMembersAction<UserCustom, Meta> => ({\n  type: ChannelMembersActionType.ERROR_SETTING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const setChannelMembers = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SetChannelMembersRequest<MembershipCustom>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<ChannelMembersSetAction<MembershipCustom, UserCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(settingChannelMembers(request, meta));\n\n        pubnub.api.objects.setChannelMembers<MembershipCustom, UserCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(\n                errorSettingChannelMembers<MembershipCustom, Meta>(\n                  payload,\n                  meta\n                )\n              );\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = channelMembersSet<\n                MembershipCustom,\n                UserCustom,\n                Meta\n              >(payload, meta);\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = ChannelMembersActionType.SET_CHANNEL_MEMBERS_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  RemovingChannelMembersAction,\n  ChannelMembersRemovedAction,\n  ErrorRemovingChannelMembersAction,\n  SetChannelMembersError,\n  SetChannelMembersSuccess,\n  RemoveChannelMembersRequest,\n} from '../ChannelMembersActions';\nimport { ChannelMembersActionType } from '../ChannelMembersActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const removingChannelMembers = <Meta extends ActionMeta>(\n  payload: RemoveChannelMembersRequest,\n  meta?: Meta\n): RemovingChannelMembersAction<Meta> => ({\n  type: ChannelMembersActionType.REMOVING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n});\n\nexport const channelMembersRemoved = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelMembersSuccess<MembershipCustom, UserCustom>,\n  meta?: Meta\n): ChannelMembersRemovedAction<MembershipCustom, UserCustom, Meta> => ({\n  type: ChannelMembersActionType.CHANNEL_MEMBERS_REMOVED,\n  payload,\n  meta,\n});\n\nexport const errorRemovingChannelMembers = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelMembersError<UserCustom>,\n  meta?: Meta\n): ErrorRemovingChannelMembersAction<UserCustom, Meta> => ({\n  type: ChannelMembersActionType.ERROR_REMOVING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const removeChannelMembers = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: RemoveChannelMembersRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<\n      ChannelMembersRemovedAction<MembershipCustom, UserCustom, Meta>\n    >((resolve, reject) => {\n      dispatch(removingChannelMembers<Meta>(request, meta));\n\n      pubnub.api.objects.removeChannelMembers<MembershipCustom, UserCustom>(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(\n              errorRemovingChannelMembers<MembershipCustom, Meta>(payload, meta)\n            );\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = channelMembersRemoved<\n              MembershipCustom,\n              UserCustom,\n              Meta\n            >(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = ChannelMembersActionType.REMOVE_CHANNEL_MEMBERS_COMMAND;\n\n  return thunkFunction;\n};\n","export enum MessageActionType {\n  SEND_MESSAGE_COMMAND = 'pubnub/SEND_MESSAGE_COMMAND',\n  FETCH_MESSAGE_HISTORY_COMMAND = 'pubnub/FETCH_MESSAGE_HISTORY_COMMAND',\n  MESSAGE_RECEIVED = 'pubnub/MESSAGE_RECEIVED',\n  SENDING_MESSAGE = 'pubnub/SENDING_MESSAGE',\n  MESSAGE_SENT = 'pubnub/MESSAGE_SENT',\n  ERROR_SENDING_MESSAGE = 'pubnub/ERROR_SENDING_MESSAGE',\n  FETCHING_MESSAGE_HISTORY = 'pubnub/FETCHING_MESSAGE_HISTORY',\n  MESSAGE_HISTORY_RETRIEVED = 'pubnub/MESSAGE_HISTORY_RETRIEVED',\n  ERROR_FETCHING_MESSAGE_HISTORY = 'pubnub/ERROR_FETCHING_MESSAGE_HISTORY',\n}\n","import { Dispatch } from 'redux';\nimport {\n  SendMessageRequest,\n  SendingMessageAction,\n  MessageSentAction,\n  SendMessageSuccess,\n  ErrorSendingMessageAction,\n  SendMessageError,\n} from '../MessageActions';\nimport { MessageActionType } from '../MessageActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport const sendingMessage = <\n  MessageContentType extends object,\n  MessageMeta extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendMessageRequest<MessageContentType, MessageMeta>,\n  meta?: Meta\n): SendingMessageAction<MessageContentType, MessageMeta, Meta> => ({\n  type: MessageActionType.SENDING_MESSAGE,\n  payload,\n  meta,\n});\n\nexport const messageSent = <\n  MessageContentType extends object,\n  MessageMeta extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendMessageSuccess<MessageContentType, MessageMeta>,\n  meta?: Meta\n): MessageSentAction<MessageContentType, MessageMeta, Meta> => ({\n  type: MessageActionType.MESSAGE_SENT,\n  payload,\n  meta,\n});\n\nexport const errorSendingMessage = <\n  MessageContentType extends object,\n  MessageMeta extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendMessageError<MessageContentType, MessageMeta>,\n  meta?: Meta\n): ErrorSendingMessageAction<MessageContentType, MessageMeta, Meta> => ({\n  type: MessageActionType.ERROR_SENDING_MESSAGE,\n  payload,\n  meta,\n});\n\nexport const sendMessage = <\n  MessageContentType extends object = {},\n  MessageMeta extends object = {},\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SendMessageRequest<MessageContentType, MessageMeta>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<MessageSentAction<MessageContentType, MessageMeta, Meta>>(\n      (resolve, reject) => {\n        dispatch(sendingMessage(request, meta));\n\n        pubnub.api.publish(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(\n                errorSendingMessage<MessageContentType, MessageMeta, Meta>(\n                  payload,\n                  meta\n                )\n              );\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = messageSent<MessageContentType, MessageMeta, Meta>(\n                payload,\n                meta\n              );\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = MessageActionType.SEND_MESSAGE_COMMAND;\n\n  return thunkFunction;\n};\n","export enum SignalActionType {\n  SEND_SIGNAL_COMMAND = 'pubnub/SEND_SIGNAL_COMMAND',\n  SIGNAL_RECEIVED = 'pubnub/SIGNAL_RECEIVED',\n  SENDING_SIGNAL = 'pubnub/SENDING_SIGNAL',\n  SIGNAL_SENT = 'pubnub/SIGNAL_SENT',\n  ERROR_SENDING_SIGNAL = 'pubnub/ERROR_SENDING_SIGNAL',\n}\n","import { Dispatch } from 'redux';\nimport {\n  SendSignalRequest,\n  SendingSignalAction,\n  SignalSentAction,\n  SendSignalSuccess,\n  ErrorSendingSignalAction,\n  SendSignalError,\n} from '../SignalActions';\nimport { SignalActionType } from '../SignalActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport const sendingSignal = <\n  SignalContentType extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendSignalRequest<SignalContentType>,\n  meta?: Meta\n): SendingSignalAction<SignalContentType, Meta> => ({\n  type: SignalActionType.SENDING_SIGNAL,\n  payload,\n  meta,\n});\n\nexport const signalSent = <\n  SignalContentType extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendSignalSuccess<SignalContentType>,\n  meta?: Meta\n): SignalSentAction<SignalContentType, Meta> => ({\n  type: SignalActionType.SIGNAL_SENT,\n  payload,\n  meta,\n});\n\nexport const errorSendingSignal = <\n  SignalContentType extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendSignalError<SignalContentType>,\n  meta?: Meta\n): ErrorSendingSignalAction<SignalContentType, Meta> => ({\n  type: SignalActionType.ERROR_SENDING_SIGNAL,\n  payload,\n  meta,\n});\n\nexport const sendSignal = <\n  SignalContentType extends object = {},\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SendSignalRequest<SignalContentType>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<SignalSentAction<SignalContentType, Meta>>(\n      (resolve, reject) => {\n        dispatch(sendingSignal(request, meta));\n\n        pubnub.api.signal(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(\n                errorSendingSignal<SignalContentType, Meta>(payload, meta)\n              );\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = signalSent<SignalContentType, Meta>(payload, meta);\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = SignalActionType.SEND_SIGNAL_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  FetchMessageHistoryRequest,\n  FetchMessageHistoryResponse,\n  FetchMessageHistoryError,\n  FetchingMessageHistoryAction,\n  ErrorFetchingMessageHistoryAction,\n  MessageHistoryRetrievedAction,\n  FetchMessageHistorySuccess,\n} from '../../message/MessageActions';\nimport { MessageActionType } from '../../message/MessageActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta } from 'foundations/ActionMeta';\nimport Pubnub from 'pubnub';\n\nexport const fetchingMessageHistory = <Meta extends ActionMeta>(\n  payload: FetchMessageHistoryRequest,\n  meta?: Meta\n): FetchingMessageHistoryAction<Meta> => ({\n  type: MessageActionType.FETCHING_MESSAGE_HISTORY,\n  payload,\n  meta,\n});\n\nexport const messageHistoryRetrieved = <\n  MessageContentType,\n  Meta extends ActionMeta\n>(\n  payload: FetchMessageHistorySuccess<MessageContentType>,\n  meta?: Meta\n): MessageHistoryRetrievedAction<MessageContentType, Meta> => ({\n  type: MessageActionType.MESSAGE_HISTORY_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingMessageHistory = <Meta extends ActionMeta>(\n  payload: FetchMessageHistoryError,\n  meta?: Meta\n): ErrorFetchingMessageHistoryAction<Meta> => ({\n  type: MessageActionType.ERROR_FETCHING_MESSAGE_HISTORY,\n  payload,\n  meta,\n});\n\nexport const fetchMessageHistory = <\n  MessageContentType,\n  Meta extends ActionMeta\n>(\n  request: FetchMessageHistoryRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<MessageHistoryRetrievedAction<MessageContentType, Meta>>(\n      (resolve, reject) => {\n        dispatch(fetchingMessageHistory(request, meta));\n\n        pubnub.api.history(\n          {\n            ...(request as Pubnub.HistoryParameters),\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(errorFetchingMessageHistory<Meta>(payload, meta));\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response: response as FetchMessageHistoryResponse<\n                  MessageContentType\n                >,\n                status,\n              };\n\n              const action = messageHistoryRetrieved<MessageContentType, Meta>(\n                payload,\n                meta\n              );\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = MessageActionType.FETCH_MESSAGE_HISTORY_COMMAND;\n\n  return thunkFunction;\n};\n","export enum ChannelDataActionType {\n  // fetchAllChannelData()\n  FETCH_ALL_CHANNEL_DATA_COMMAND = 'pubnub/FETCH_ALL_CHANNEL_DATA_COMMAND',\n  FETCHING_ALL_CHANNEL_DATA = 'pubnub/FETCHING_ALL_CHANNEL_DATA',\n  ALL_CHANNEL_DATA_RETRIEVED = 'pubnub/ALL_CHANNEL_DATA_RETRIEVED',\n  ERROR_FETCHING_ALL_CHANNEL_DATA = 'pubnub/ERROR_FETCHING_ALL_CHANNEL_DATA',\n  // fetchChannelData()\n  FETCH_CHANNEL_DATA_COMMAND = 'pubnub/FETCH_CHANNEL_DATA_COMMAND',\n  FETCHING_CHANNEL_DATA = 'pubnub/FETCHING_CHANNEL_DATA',\n  CHANNEL_DATA_RETRIEVED = 'pubnub/CHANNEL_DATA_RETRIEVED',\n  ERROR_FETCHING_CHANNEL_DATA = 'pubnub/ERROR_FETCHING_CHANNEL_DATA',\n  // setChannelData()\n  SET_CHANNEL_DATA_COMMAND = 'pubnub/SET_CHANNEL_DATA_COMMAND',\n  SETTING_CHANNEL_DATA = 'pubnub/SETTING_CHANNEL_DATA',\n  CHANNEL_DATA_SET = 'pubnub/CHANNEL_DATA_SET',\n  ERROR_SETTING_CHANNEL_DATA = 'pubnub/ERROR_SETTING_CHANNEL_DATA',\n  // removeChannelData()\n  REMOVE_CHANNEL_DATA_COMMAND = 'pubnub/REMOVE_CHANNEL_DATA_COMMAND',\n  REMOVING_CHANNEL_DATA = 'pubnub/REMOVING_CHANNEL_DATA',\n  CHANNEL_DATA_REMOVED = 'pubnub/CHANNEL_DATA_REMOVED',\n  ERROR_REMOVING_CHANNEL_DATA = 'pubnub/ERROR_REMOVING_CHANNEL_DATA',\n  // objects events\n  CHANNEL_DATA_SET_EVENT = 'pubnub/CHANNEL_DATA_SET_EVENT',\n  CHANNEL_DATA_REMOVED_EVENT = 'pubnub/CHANNEL_DATA_REMOVED_EVENT',\n}\n","import { Dispatch } from 'redux';\nimport {\n  ChannelDataRemovedAction,\n  RemovingChannelDataAction,\n  ErrorRemovingChannelDataAction,\n  RemoveChannelRequest,\n  RemoveChannelError,\n  RemoveChannelSuccess,\n} from '../ChannelDataActions';\nimport { ChannelDataActionType } from '../ChannelDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport const removingChannelData = <Meta extends ActionMeta>(\n  payload: RemoveChannelRequest,\n  meta?: Meta\n): RemovingChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.REMOVING_CHANNEL_DATA,\n  payload,\n  meta,\n});\n\nexport const channelDataRemoved = <Meta extends ActionMeta>(\n  payload: RemoveChannelSuccess,\n  meta?: Meta\n): ChannelDataRemovedAction<Meta> => ({\n  type: ChannelDataActionType.CHANNEL_DATA_REMOVED,\n  payload,\n  meta,\n});\n\nexport const errorRemovingChannelData = <Meta extends ActionMeta>(\n  payload: RemoveChannelError,\n  meta?: Meta\n): ErrorRemovingChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.ERROR_REMOVING_CHANNEL_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const removeChannelData = <Meta extends ActionMeta = AnyMeta>(\n  request: RemoveChannelRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<ChannelDataRemovedAction<Meta>>((resolve, reject) => {\n      dispatch(removingChannelData<Meta>(request, meta));\n\n      pubnub.api.objects.removeChannelMetadata(\n        { channel: request.channel },\n        (status) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorRemovingChannelData<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              status,\n            };\n\n            const action = channelDataRemoved<Meta>(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = ChannelDataActionType.REMOVE_CHANNEL_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport { ChannelDataActionType } from '../ChannelDataActionType.enum';\nimport {\n  ErrorFetchingChannelDataAction,\n  ChannelDataRetrievedAction,\n  FetchingChannelDataAction,\n  FetchChannelDataError,\n  FetchChannelDataSuccess,\n  FetchChannelDataRequest,\n} from '../ChannelDataActions';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingChannelData = <Meta extends ActionMeta>(\n  payload: FetchChannelDataRequest,\n  meta?: Meta\n): FetchingChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.FETCHING_CHANNEL_DATA,\n  payload,\n  meta,\n});\n\nexport const channelDataRetrieved = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchChannelDataSuccess<ChannelCustom>,\n  meta?: Meta\n): ChannelDataRetrievedAction<ChannelCustom, Meta> => ({\n  type: ChannelDataActionType.CHANNEL_DATA_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingChannelData = <Meta extends ActionMeta>(\n  payload: FetchChannelDataError,\n  meta?: Meta\n): ErrorFetchingChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.ERROR_FETCHING_CHANNEL_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchChannelData = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchChannelDataRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<ChannelDataRetrievedAction<ChannelCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(\n          fetchingChannelData<Meta>(\n            {\n              ...request,\n            },\n            meta\n          )\n        );\n\n        pubnub.api.objects.getChannelMetadata<ChannelCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(errorFetchingChannelData<Meta>(payload, meta));\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = channelDataRetrieved<ChannelCustom, Meta>(\n                payload,\n                meta\n              );\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = ChannelDataActionType.FETCH_CHANNEL_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  ErrorFetchingAllChannelDataAction,\n  AllChannelDataRetrievedAction,\n  FetchingAllChannelDataAction,\n  FetchAllChannelDataError,\n  FetchAllChannelDataSuccess,\n  FetchAllChannelDataRequest,\n} from '../ChannelDataActions';\nimport { ChannelDataActionType } from '../ChannelDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingAllChannelData = <Meta extends ActionMeta>(\n  payload: FetchAllChannelDataRequest,\n  meta?: Meta\n): FetchingAllChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.FETCHING_ALL_CHANNEL_DATA,\n  payload,\n  meta,\n});\n\nexport const allChannelDataRetrieved = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchAllChannelDataSuccess<ChannelCustom>,\n  meta?: Meta\n): AllChannelDataRetrievedAction<ChannelCustom, Meta> => ({\n  type: ChannelDataActionType.ALL_CHANNEL_DATA_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingAllChannelData = <Meta extends ActionMeta>(\n  payload: FetchAllChannelDataError,\n  meta?: Meta\n): ErrorFetchingAllChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.ERROR_FETCHING_ALL_CHANNEL_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchAllChannelData = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchAllChannelDataRequest = {},\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<AllChannelDataRetrievedAction<ChannelCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(fetchingAllChannelData<Meta>(request, meta));\n\n        pubnub.api.objects.getAllChannelMetadata<ChannelCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(errorFetchingAllChannelData<Meta>(payload, meta));\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = allChannelDataRetrieved<ChannelCustom, Meta>(\n                payload,\n                meta\n              );\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = ChannelDataActionType.FETCH_ALL_CHANNEL_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  SettingChannelDataAction,\n  ChannelDataSetAction,\n  ErrorSettingChannelDataAction,\n  SetChannelDataError,\n  SetChannelDataSuccess,\n  SetChannelDataRequest,\n} from '../ChannelDataActions';\nimport { ChannelDataActionType } from '../ChannelDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const settingChannelData = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelDataRequest<ChannelCustom>,\n  meta?: Meta\n): SettingChannelDataAction<ChannelCustom, Meta> => ({\n  type: ChannelDataActionType.SETTING_CHANNEL_DATA,\n  payload,\n  meta,\n});\n\nexport const channelDataSet = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelDataSuccess<ChannelCustom>,\n  meta?: Meta\n): ChannelDataSetAction<ChannelCustom, Meta> => ({\n  type: ChannelDataActionType.CHANNEL_DATA_SET,\n  payload,\n  meta,\n});\n\nexport const errorSettingChannelData = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelDataError<ChannelCustom>,\n  meta?: Meta\n): ErrorSettingChannelDataAction<ChannelCustom, Meta> => ({\n  type: ChannelDataActionType.ERROR_SETTING_CHANNEL_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const setChannelData = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SetChannelDataRequest<ChannelCustom>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<ChannelDataSetAction<ChannelCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(settingChannelData<ChannelCustom, Meta>(request, meta));\n\n        pubnub.api.objects.setChannelMetadata<ChannelCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(\n                errorSettingChannelData<ChannelCustom, Meta>(payload, meta)\n              );\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = channelDataSet<ChannelCustom, Meta>(payload, meta);\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = ChannelDataActionType.SET_CHANNEL_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","export enum UserDataActionType {\n  // fetchAllUserData()\n  FETCH_ALL_USER_DATA_COMMAND = 'pubnub/FETCH_ALL_USER_DATA_COMMAND',\n  FETCHING_ALL_USER_DATA = 'pubnub/FETCHING_ALL_USER_DATA',\n  ALL_USER_DATA_RETRIEVED = 'pubnub/ALL_USER_DATA_RETRIEVED',\n  ERROR_FETCHING_ALL_USER_DATA = 'pubnub/ERROR_FETCHING_ALL_USER_DATA',\n  // fetchUserData()\n  FETCH_USER_DATA_COMMAND = 'pubnub/FETCH_USER_DATA_COMMAND',\n  FETCHING_USER_DATA = 'pubnub/FETCHING_USER_DATA',\n  USER_DATA_RETRIEVED = 'pubnub/USER_DATA_RETRIEVED',\n  ERROR_FETCHING_USER_DATA = 'pubnub/ERROR_FETCHING_USER_DATA',\n  // setUserData()\n  SET_USER_DATA_COMMAND = 'pubnub/SET_USER_DATA_COMMAND',\n  SETTING_USER_DATA = 'pubnub/SETTING_USER_DATA',\n  USER_DATA_SET = 'pubnub/USER_DATA_SET',\n  ERROR_SETTING_USER_DATA = 'pubnub/ERROR_SETTING_USER_DATA',\n  // removeUserData()\n  REMOVE_USER_DATA_COMMAND = 'pubnub/REMOVE_USER_DATA_COMMAND',\n  REMOVING_USER_DATA = 'pubnub/REMOVING_USER_DATA',\n  USER_DATA_REMOVED = 'pubnub/USER_DATA_REMOVED',\n  ERROR_REMOVING_USER_DATA = 'pubnub/ERROR_REMOVING_USER_DATA',\n  // objects events\n  USER_DATA_SET_EVENT = 'pubnub/USER_DATA_SET_EVENT',\n  USER_DATA_REMOVED_EVENT = 'pubnub/USER_DATA_REMOVED_EVENT',\n}\n","import { Dispatch } from 'redux';\nimport {\n  UserDataRemovedAction,\n  RemovingUserDataAction,\n  ErrorRemovingUserDataAction,\n  DeleteUserDataRequest,\n  DeleteUserDataError,\n  DeleteUserDataSuccess,\n} from '../UserDataActions';\nimport { UserDataActionType } from '../UserDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport const removingUserData = <Meta extends ActionMeta>(\n  payload: DeleteUserDataRequest,\n  meta?: Meta\n): RemovingUserDataAction<Meta> => ({\n  type: UserDataActionType.REMOVING_USER_DATA,\n  payload,\n  meta,\n});\n\nexport const UserDataRemoved = <Meta extends ActionMeta>(\n  payload: DeleteUserDataSuccess,\n  meta?: Meta\n): UserDataRemovedAction<Meta> => ({\n  type: UserDataActionType.USER_DATA_REMOVED,\n  payload,\n  meta,\n});\n\nexport const errorRemovingUserData = <Meta extends ActionMeta>(\n  payload: DeleteUserDataError,\n  meta?: Meta\n): ErrorRemovingUserDataAction<Meta> => ({\n  type: UserDataActionType.ERROR_REMOVING_USER_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const removeUserData = <Meta extends ActionMeta = AnyMeta>(\n  request: DeleteUserDataRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<UserDataRemovedAction<Meta>>((resolve, reject) => {\n      dispatch(removingUserData<Meta>(request, meta));\n\n      pubnub.api.objects.removeUUIDMetadata(\n        { uuid: request.uuid },\n        (status) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorRemovingUserData<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              status,\n            };\n\n            const action = UserDataRemoved<Meta>(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = UserDataActionType.REMOVE_USER_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport { UserDataActionType } from '../UserDataActionType.enum';\nimport {\n  ErrorFetchingUserDataAction,\n  UserDataRetrievedAction,\n  FetchingUserDataAction,\n  FetchUserDataError,\n  FetchUserDataSuccess,\n  FetchUserDataRequest,\n} from '../UserDataActions';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingUserData = <Meta extends ActionMeta>(\n  payload: FetchUserDataRequest,\n  meta?: Meta\n): FetchingUserDataAction<Meta> => ({\n  type: UserDataActionType.FETCHING_USER_DATA,\n  payload,\n  meta,\n});\n\nexport const UserDataRetrieved = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchUserDataSuccess<UserCustom>,\n  meta?: Meta\n): UserDataRetrievedAction<UserCustom, Meta> => ({\n  type: UserDataActionType.USER_DATA_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingUserData = <Meta extends ActionMeta>(\n  payload: FetchUserDataError,\n  meta?: Meta\n): ErrorFetchingUserDataAction<Meta> => ({\n  type: UserDataActionType.ERROR_FETCHING_USER_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchUserData = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchUserDataRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<UserDataRetrievedAction<UserCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(\n          fetchingUserData<Meta>(\n            {\n              ...request,\n            },\n            meta\n          )\n        );\n\n        pubnub.api.objects.getUUIDMetadata<UserCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(errorFetchingUserData<Meta>(payload, meta));\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = UserDataRetrieved<UserCustom, Meta>(payload, meta);\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = UserDataActionType.FETCH_USER_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  ErrorFetchingAllUserDataAction,\n  AllUserDataRetrievedAction,\n  FetchingAllUserDataAction,\n  FetchAllUserDataError,\n  FetchAllUserDataSuccess,\n  FetchAllUserDataRequest,\n} from '../UserDataActions';\nimport { UserDataActionType } from '../UserDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingAllUserData = <Meta extends ActionMeta>(\n  payload: FetchAllUserDataRequest,\n  meta?: Meta\n): FetchingAllUserDataAction<Meta> => ({\n  type: UserDataActionType.FETCHING_ALL_USER_DATA,\n  payload,\n  meta,\n});\n\nexport const allUserDataRetrieved = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchAllUserDataSuccess<UserCustom>,\n  meta?: Meta\n): AllUserDataRetrievedAction<UserCustom, Meta> => ({\n  type: UserDataActionType.ALL_USER_DATA_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingAllUserData = <Meta extends ActionMeta = AnyMeta>(\n  payload: FetchAllUserDataError,\n  meta?: Meta\n): ErrorFetchingAllUserDataAction<Meta> => ({\n  type: UserDataActionType.ERROR_FETCHING_ALL_USER_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchAllUserData = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchAllUserDataRequest = {},\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<AllUserDataRetrievedAction<UserCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(fetchingAllUserData<Meta>(request, meta));\n\n        pubnub.api.objects.getAllUUIDMetadata<UserCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(errorFetchingAllUserData<Meta>(payload, meta));\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = allUserDataRetrieved<UserCustom, Meta>(\n                payload,\n                meta\n              );\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = UserDataActionType.FETCH_ALL_USER_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  SettingUserDataAction,\n  UserDataSetAction,\n  ErrorSettingUserDataAction,\n  UserDataError,\n  UserDataSuccess,\n  SetUserDataRequest,\n} from '../UserDataActions';\nimport { UserDataActionType } from '../UserDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const settingUserData = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetUserDataRequest<UserCustom>,\n  meta?: Meta\n): SettingUserDataAction<Meta> => ({\n  type: UserDataActionType.SETTING_USER_DATA,\n  payload,\n  meta,\n});\n\nexport const UserDataSet = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: UserDataSuccess<UserCustom>,\n  meta?: Meta\n): UserDataSetAction<UserCustom, Meta> => ({\n  type: UserDataActionType.USER_DATA_SET,\n  payload,\n  meta,\n});\n\nexport const errorSettingUserData = <Meta extends ActionMeta>(\n  payload: UserDataError,\n  meta?: Meta\n): ErrorSettingUserDataAction<Meta> => ({\n  type: UserDataActionType.ERROR_SETTING_USER_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const setUserData = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SetUserDataRequest<UserCustom>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<UserDataSetAction<UserCustom, Meta>>((resolve, reject) => {\n      dispatch(settingUserData<UserCustom, Meta>(request, meta));\n\n      pubnub.api.objects.setUUIDMetadata<UserCustom>(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorSettingUserData<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = UserDataSet<UserCustom, Meta>(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = UserDataActionType.SET_USER_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","export enum PresenceActionType {\n  HERE_NOW_COMMAND = 'pubnub/HERE_NOW_COMMAND',\n  PRESENCE_STATE_COMMAND = 'pubnub/PRESENCE_STATE_COMMAND',\n  FETCHING_HERE_NOW = 'pubnub/FETCHING_HERE_NOW',\n  HERE_NOW_RETRIEVED = 'pubnub/HERE_NOW_RETRIEVED',\n  ERROR_FETCHING_HERE_NOW = 'pubnub/ERROR_FETCHING_HERE_NOW',\n  FETCHING_PRESENCE_STATE = 'pubnub/FETCHING_PRESENCE_STATE',\n  PRESENCE_STATE_RETRIEVED = 'pubnub/PRESENCE_STATE_RETRIEVED',\n  ERROR_FETCHING_PRESENCE_STATE = 'pubnub/ERROR_FETCHING_PRESENCE_STATE',\n  JOIN_EVENT = 'pubnub/JOIN_EVENT',\n  LEAVE_EVENT = 'pubnub/LEAVE_EVENT',\n  TIMEOUT_EVENT = 'pubnub/TIMEOUT_EVENT',\n  STATE_CHANGE_EVENT = 'pubnub/STATE_CHANGE_EVENT',\n}\n","import { Dispatch } from 'redux';\nimport {\n  HereNowRequest,\n  HereNowError,\n  FetchingHereNowAction,\n  ErrorFetchingHereNowAction,\n  HereNowRetrievedAction,\n  HereNowSuccess,\n} from '../PresenceActions';\nimport { PresenceActionType } from '../PresenceActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta } from 'foundations/ActionMeta';\n\nexport const fetchingHereNow = <Meta extends ActionMeta>(\n  payload: HereNowRequest,\n  meta?: Meta\n): FetchingHereNowAction<Meta> => ({\n  type: PresenceActionType.FETCHING_HERE_NOW,\n  payload,\n  meta,\n});\n\nexport const hereNowRetrieved = <Meta extends ActionMeta>(\n  payload: HereNowSuccess,\n  meta?: Meta\n): HereNowRetrievedAction<Meta> => ({\n  type: PresenceActionType.HERE_NOW_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingHereNow = <Meta extends ActionMeta>(\n  payload: HereNowError,\n  meta?: Meta\n): ErrorFetchingHereNowAction<Meta> => ({\n  type: PresenceActionType.ERROR_FETCHING_HERE_NOW,\n  payload,\n  meta,\n});\n\nexport const fetchHereNow = <Meta extends ActionMeta>(\n  request: HereNowRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<HereNowRetrievedAction<Meta>>((resolve, reject) => {\n      dispatch(fetchingHereNow(request, meta));\n\n      pubnub.api.hereNow(\n        {\n          ...request,\n          includeUUIDs: true,\n          includeState: false,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorFetchingHereNow<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = hereNowRetrieved<Meta>(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = PresenceActionType.HERE_NOW_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  PresenceStateRequest,\n  PresenceStateError,\n  FetchingPresenceStateAction,\n  ErrorFetchingPresenceStateAction,\n  PresenceStateRetrievedAction,\n  PresenceStateSuccess,\n} from '../PresenceActions';\nimport { PresenceActionType } from '../PresenceActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta } from 'foundations/ActionMeta';\n\nexport const fetchingPresenceState = <Meta extends ActionMeta>(\n  payload: PresenceStateRequest,\n  meta?: Meta\n): FetchingPresenceStateAction<Meta> => ({\n  type: PresenceActionType.FETCHING_PRESENCE_STATE,\n  payload,\n  meta,\n});\n\nexport const presenceStateRetrieved = <Meta extends ActionMeta>(\n  payload: PresenceStateSuccess,\n  meta?: Meta\n): PresenceStateRetrievedAction<Meta> => ({\n  type: PresenceActionType.PRESENCE_STATE_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingPresenceState = <Meta extends ActionMeta>(\n  payload: PresenceStateError,\n  meta?: Meta\n): ErrorFetchingPresenceStateAction<Meta> => ({\n  type: PresenceActionType.ERROR_FETCHING_PRESENCE_STATE,\n  payload,\n  meta,\n});\n\nexport const fetchPresenceState = <Meta extends ActionMeta>(\n  request: PresenceStateRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<PresenceStateRetrievedAction<Meta>>((resolve, reject) => {\n      dispatch(fetchingPresenceState(request, meta));\n\n      pubnub.api.getState(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorFetchingPresenceState<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = presenceStateRetrieved<Meta>(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = PresenceActionType.PRESENCE_STATE_COMMAND;\n\n  return thunkFunction;\n};\n","import Pubnub from 'pubnub';\nimport { Dispatch } from 'redux';\nimport {\n  UserDataSetEventAction,\n  UserDataRemovedEventAction,\n  UserDataListenerActions,\n  UserDataEventMessage,\n  UsersListenerPayload,\n} from './UserDataActions';\nimport { UserDataActionType } from './UserDataActionType.enum';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const UserDataSet = <UserCustom extends ObjectsCustom>(\n  payload: UserDataEventMessage<UserCustom>\n): UserDataSetEventAction<UserCustom> => ({\n  type: UserDataActionType.USER_DATA_SET_EVENT,\n  payload,\n});\n\nexport const UserDataRemoved = <UserCustom extends ObjectsCustom>(\n  payload: UserDataEventMessage<UserCustom>\n): UserDataRemovedEventAction<UserCustom> => ({\n  type: UserDataActionType.USER_DATA_REMOVED_EVENT,\n  payload,\n});\n\nexport const createUserDataListener = <\n  UserCustom extends ObjectsCustom = ObjectsCustom\n>(\n  dispatch: Dispatch<UserDataListenerActions<UserCustom>>\n): Pubnub.ListenerParameters => ({\n  objects: (payload) => {\n    if (payload.message.type !== 'uuid') {\n      return;\n    }\n    switch (payload.message.event) {\n      case 'set':\n        dispatch(\n          UserDataSet<UserCustom>(\n            ((payload as unknown) as UsersListenerPayload<UserCustom>).message\n          )\n        );\n        break;\n      case 'delete':\n        dispatch(UserDataRemoved<UserCustom>(payload.message));\n        break;\n      default:\n        break;\n    }\n  },\n});\n","import Pubnub from 'pubnub';\nimport { Dispatch } from 'redux';\nimport {\n  ChannelDataSetEventAction,\n  ChannelDataRemovedEventAction,\n  ChannelDataListenerActions,\n  ChannelDataEventMessage,\n  Channel,\n} from './ChannelDataActions';\nimport { ChannelDataActionType } from './ChannelDataActionType.enum';\nimport { ObjectsCustom, GetChannelCustom } from 'foundations/ObjectsCustom';\n\nexport const channelDataSet = <ChannelCustom extends ObjectsCustom>(\n  payload: ChannelDataEventMessage<ChannelCustom>\n): ChannelDataSetEventAction<ChannelCustom> => ({\n  type: ChannelDataActionType.CHANNEL_DATA_SET_EVENT,\n  payload,\n});\n\nexport const channelDataRemoved = <ChannelCustom extends ObjectsCustom>(\n  payload: ChannelDataEventMessage<ChannelCustom>\n): ChannelDataRemovedEventAction<ChannelCustom> => ({\n  type: ChannelDataActionType.CHANNEL_DATA_REMOVED_EVENT,\n  payload,\n});\n\nexport const createChannelDataListener = <ChannelType extends Channel>(\n  dispatch: Dispatch<ChannelDataListenerActions<GetChannelCustom<ChannelType>>>\n) => ({\n  objects: (\n    payload: Pubnub.ObjectsEvent<\n      ObjectsCustom,\n      GetChannelCustom<ChannelType>,\n      ObjectsCustom\n    >\n  ) => {\n    if (payload.message.type !== 'channel') {\n      return;\n    }\n    switch (payload.message.event) {\n      case 'set':\n        dispatch(\n          channelDataSet<GetChannelCustom<ChannelType>>(payload.message)\n        );\n        break;\n      case 'delete':\n        dispatch(\n          channelDataRemoved<GetChannelCustom<ChannelType>>(payload.message)\n        );\n        break;\n      default:\n        break;\n    }\n  },\n});\n","import Pubnub from 'pubnub';\nimport { Dispatch } from 'redux';\nimport {\n  MembershipListenerActions,\n  MembershipSetEventAction,\n  MembershipRemovedEventAction,\n  MembershipEventMessage,\n} from './MembershipActions';\nimport { MembershipActionType } from './MembershipActionType.enum';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nconst membershipSetEventRecieved = <MembershipCustom extends ObjectsCustom>(\n  payload: MembershipEventMessage<MembershipCustom>\n): MembershipSetEventAction<MembershipCustom> => ({\n  type: MembershipActionType.MEMBERSHIP_SET_EVENT,\n  payload,\n});\n\nconst membershipRemovedEventRecieved = <MembershipCustom extends ObjectsCustom>(\n  payload: MembershipEventMessage<MembershipCustom>\n): MembershipRemovedEventAction<MembershipCustom> => ({\n  type: MembershipActionType.MEMBERSHIP_REMOVED_EVENT,\n  payload,\n});\n\nexport const createMembershipListener = <\n  MembershipCustom extends ObjectsCustom\n>(\n  dispatch: Dispatch<MembershipListenerActions<MembershipCustom>>\n): Pubnub.ListenerParameters => ({\n  objects: (payload) => {\n    if (payload.message.type === 'membership') {\n      switch (payload.message.event) {\n        case 'set':\n          dispatch(\n            membershipSetEventRecieved<MembershipCustom>(\n              (payload as Pubnub.SetMembershipEvent<MembershipCustom>).message\n            )\n          );\n          break;\n        case 'delete':\n          dispatch(\n            membershipRemovedEventRecieved<MembershipCustom>(payload.message)\n          );\n          break;\n        default:\n          break;\n      }\n    }\n  },\n});\n","import Pubnub from 'pubnub';\nimport { Dispatch } from 'redux';\nimport { MessageReceivedAction, Message } from './MessageActions';\nimport { MessageActionType } from './MessageActionType.enum';\n\nexport const messageReceived = <MessageType extends Message>(\n  payload: MessageType\n): MessageReceivedAction<MessageType> => ({\n  type: MessageActionType.MESSAGE_RECEIVED,\n  payload,\n});\n\nexport const createMessageListener = <MessageType extends Message>(\n  dispatch: Dispatch<MessageReceivedAction<MessageType>>\n): Pubnub.ListenerParameters => ({\n  message: (payload) =>\n    dispatch(messageReceived<MessageType>((payload as unknown) as MessageType)),\n});\n","export enum PresenceCategory {\n  JOIN = 'join',\n  STATE_CHANGE = 'state-change',\n  LEAVE = 'leave',\n  TIMEOUT = 'timeout',\n}\n","import { Dispatch } from 'redux';\nimport Pubnub from 'pubnub';\nimport {\n  PresenceListenerActions,\n  JoinEventAction,\n  LeaveEventAction,\n  TimeoutEventAction,\n  StateChangeEventAction,\n  PresenceEventMessage,\n} from './PresenceActions';\nimport { PresenceActionType } from './PresenceActionType.enum';\nimport { PresenceCategory } from './PresenceCategory.enum';\n\nexport const userJoin = (payload: PresenceEventMessage): JoinEventAction => ({\n  type: PresenceActionType.JOIN_EVENT,\n  payload,\n});\n\nexport const userLeave = (payload: PresenceEventMessage): LeaveEventAction => ({\n  type: PresenceActionType.LEAVE_EVENT,\n  payload,\n});\n\nexport const userTimeout = (\n  payload: PresenceEventMessage\n): TimeoutEventAction => ({\n  type: PresenceActionType.TIMEOUT_EVENT,\n  payload,\n});\n\nexport const userStateChange = (\n  payload: PresenceEventMessage\n): StateChangeEventAction => ({\n  type: PresenceActionType.STATE_CHANGE_EVENT,\n  payload,\n});\n\nexport const createPresenceListener = (\n  dispatch: Dispatch<PresenceListenerActions>\n): Pubnub.ListenerParameters => ({\n  presence: (payload) => {\n    switch (payload.action) {\n      case PresenceCategory.JOIN:\n        dispatch(userJoin(payload));\n        break;\n      case PresenceCategory.LEAVE:\n        dispatch(userLeave(payload));\n        break;\n      case PresenceCategory.TIMEOUT:\n        dispatch(userTimeout(payload));\n        break;\n      case PresenceCategory.STATE_CHANGE:\n        dispatch(userStateChange(payload));\n        break;\n      default:\n        break;\n    }\n  },\n});\n","import Pubnub from 'pubnub';\nimport { Dispatch } from 'redux';\nimport { SignalReceivedAction, Signal } from './SignalActions';\nimport { SignalActionType } from './SignalActionType.enum';\n\nexport const signalReceived = <SignalType extends Signal>(\n  payload: SignalType\n): SignalReceivedAction<SignalType> => ({\n  type: SignalActionType.SIGNAL_RECEIVED,\n  payload,\n});\n\nexport const createSignalListener = <SignalType extends Signal>(\n  dispatch: Dispatch<SignalReceivedAction<SignalType>>\n): Pubnub.ListenerParameters => ({\n  signal: (payload) =>\n    dispatch(signalReceived<SignalType>((payload as unknown) as SignalType)),\n});\n","export enum ErrorStatusCategory {\n  PN_NETWORK_ISSUES_CATEGORY = 'PNNetworkIssuesCategory',\n  PN_ACCES_DENIED_CATEGORY = 'PNAccessDeniedCategory',\n  PN_MALFORMED_RESPONSE_CATEGORY = 'PNMalformedResponseCategory',\n  PN_BAD_REQUEST_CATEGORY = 'PNBadRequestCategory',\n  PN_DECRYPTION_ERROR_CATEGORY = 'PNDecryptionErrorCategory',\n  PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY = 'PNRequestMessageCountExceedCategory',\n  PN_UNKNOWN_CATEGORY = 'PNUnknownCategory',\n}\n","export enum ErrorStatusActionType {\n  NETWORK_ISSUES_EVENT = 'pubnub/NETWORK_ISSUES_EVENT',\n  ACCESS_DENIED_EVENT = 'pubnub/ACCESS_DENIED_EVENT',\n  MALFORMED_RESPONSE_EVENT = 'pubnub/MALFORMED_RESPONSE_EVENT',\n  BAD_REQUEST_EVENT = 'pubnub/BAD_REQUEST_EVENT',\n  DECRYPTION_ERROR_EVENT = 'pubnub/DECRYPTION_ERROR_EVENT',\n  TIMEOUT_CONNECTION_EVENT = 'pubnub/TIMEOUT_CONNECTION_EVENT',\n  REQUEST_MESSAGE_COUNT_EXCEED_EVENT = 'pubnub/REQUEST_MESSAGE_COUNT_EXCEED_EVENT',\n  UNKNOWN_EVENT = 'pubnub/UNKNOWN_EVENT',\n}\n","import { Dispatch } from 'redux';\nimport { ErrorStatusCategory } from './ErrorStatusCategory.enum';\nimport { ErrorStatusActionType } from './ErrorStatusActionType.enum';\nimport {\n  NetworkIssuesEventAction,\n  AccessDeniedEventAction,\n  MalformedResponseEventAction,\n  BadRequestEventAction,\n  DecryptionErrorEventAction,\n  TimeoutConnectionEventAction,\n  RequestMessageCountExceedEventAction,\n  UnknownEventAction,\n  ErrorStatusResponse,\n} from './ErrorStatusActions';\n\nexport const networkIssues = (\n  payload: ErrorStatusResponse\n): NetworkIssuesEventAction => ({\n  type: ErrorStatusActionType.NETWORK_ISSUES_EVENT,\n  payload,\n});\n\nexport const accessDenied = (\n  payload: ErrorStatusResponse\n): AccessDeniedEventAction => ({\n  type: ErrorStatusActionType.ACCESS_DENIED_EVENT,\n  payload,\n});\n\nexport const malformedResponse = (\n  payload: ErrorStatusResponse\n): MalformedResponseEventAction => ({\n  type: ErrorStatusActionType.MALFORMED_RESPONSE_EVENT,\n  payload,\n});\n\nexport const badRequest = (\n  payload: ErrorStatusResponse\n): BadRequestEventAction => ({\n  type: ErrorStatusActionType.BAD_REQUEST_EVENT,\n  payload,\n});\n\nexport const decryptionError = (\n  payload: ErrorStatusResponse\n): DecryptionErrorEventAction => ({\n  type: ErrorStatusActionType.DECRYPTION_ERROR_EVENT,\n  payload,\n});\n\nexport const timeoutConnection = (\n  payload: ErrorStatusResponse\n): TimeoutConnectionEventAction => ({\n  type: ErrorStatusActionType.TIMEOUT_CONNECTION_EVENT,\n  payload,\n});\n\nexport const requestMessageCountExceeded = (\n  payload: ErrorStatusResponse\n): RequestMessageCountExceedEventAction => ({\n  type: ErrorStatusActionType.REQUEST_MESSAGE_COUNT_EXCEED_EVENT,\n  payload,\n});\n\nexport const unknown = (payload: ErrorStatusResponse): UnknownEventAction => ({\n  type: ErrorStatusActionType.UNKNOWN_EVENT,\n  payload,\n});\n\nexport type ErrorStatusListenerActions =\n  | NetworkIssuesEventAction\n  | AccessDeniedEventAction\n  | MalformedResponseEventAction\n  | BadRequestEventAction\n  | RequestMessageCountExceedEventAction\n  | DecryptionErrorEventAction\n  | TimeoutConnectionEventAction\n  | UnknownEventAction;\n\nexport const createErrorStatusListener = (\n  dispatch: Dispatch<ErrorStatusListenerActions>\n) => ({\n  status: (payload: ErrorStatusResponse) => {\n    switch (payload.category) {\n      case ErrorStatusCategory.PN_ACCES_DENIED_CATEGORY:\n        dispatch(accessDenied(payload));\n        break;\n      case ErrorStatusCategory.PN_MALFORMED_RESPONSE_CATEGORY:\n        dispatch(malformedResponse(payload));\n        break;\n      case ErrorStatusCategory.PN_BAD_REQUEST_CATEGORY:\n        dispatch(badRequest(payload));\n        break;\n      case ErrorStatusCategory.PN_DECRYPTION_ERROR_CATEGORY:\n        dispatch(decryptionError(payload));\n        break;\n      case ErrorStatusCategory.PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY:\n        dispatch(requestMessageCountExceeded(payload));\n        break;\n      case ErrorStatusCategory.PN_UNKNOWN_CATEGORY:\n        dispatch(unknown(payload));\n        break;\n      default:\n        break;\n    }\n  },\n});\n","export enum NetworkStatusActionType {\n  NETWORK_UP_EVENT = 'pubnub/NETWORK_UP_EVENT',\n  NETWORK_DOWN_EVENT = 'pubnub/NETWORK_DOWN_EVENT',\n}\n","export enum NetworkStatusCategory {\n  PN_NETWORK_UP_CATEGORY = 'PNNetworkUpCategory',\n  PN_NETWORK_DOWN_CATEGORY = 'PNNetworkDownCategory',\n  PN_RECONNECTED_CATEGORY = 'PNReconnectedCategory',\n  PN_CONNECTED_CATEGORY = 'PNConnectedCategory',\n  PN_TIMEOUT_CATEGORY = 'PNTimeoutCategory',\n}\n","import { Dispatch } from 'redux';\nimport {\n  NetworkUpEventAction,\n  NetworkDownEventAction,\n  NetworkStatusResponse,\n} from './NetworkStatusActions';\nimport { NetworkStatusActionType } from './NetworkStatusActionType.enum';\nimport { NetworkStatusCategory } from './NetworkStatusCategory.enum';\n\nexport const networkUp = (): NetworkUpEventAction => ({\n  type: NetworkStatusActionType.NETWORK_UP_EVENT,\n});\n\nexport const networkDown = (): NetworkDownEventAction => ({\n  type: NetworkStatusActionType.NETWORK_DOWN_EVENT,\n});\n\nexport type NetworkStatusListenerActions =\n  | NetworkUpEventAction\n  | NetworkDownEventAction;\n\nexport const createNetworkStatusListener = (\n  dispatch: Dispatch<NetworkStatusListenerActions>\n) => ({\n  status: (payload: NetworkStatusResponse) => {\n    switch (payload.category) {\n      case NetworkStatusCategory.PN_NETWORK_UP_CATEGORY:\n        dispatch(networkUp());\n        break;\n      case NetworkStatusCategory.PN_NETWORK_DOWN_CATEGORY:\n        dispatch(networkDown());\n        break;\n      case NetworkStatusCategory.PN_RECONNECTED_CATEGORY:\n        dispatch(networkUp());\n        break;\n      case NetworkStatusCategory.PN_CONNECTED_CATEGORY:\n        dispatch(networkUp());\n        break;\n      case NetworkStatusCategory.PN_TIMEOUT_CATEGORY:\n        dispatch(networkDown());\n        break;\n      default:\n        break;\n    }\n  },\n});\n","export enum SubscriptionStatusActionType {\n  RECONNECTED_EVENT = 'pubnub/RECONNECTED_EVENT',\n  CONNECTED_EVENT = 'pubnub/CONNECTED_EVENT',\n}\n","export enum SubscriptionStatusCategory {\n  PN_CONNECTED_CATEGORY = 'PNConnectedCategory',\n  PN_RECONNECTED_CATEGORY = 'PNReconnectedCategory',\n}\n","import { Dispatch } from 'redux';\nimport {\n  ReconnectedAction,\n  ConnectedAction,\n  SubscriptionStatusResponse,\n} from './SubscribeStatusActions';\nimport { SubscriptionStatusActionType } from './SubscriptionStatusActionType.enum';\nimport { SubscriptionStatusCategory } from './SubscriptionStatusCategory.enum';\n\nexport const reconnected = (\n  payload: SubscriptionStatusResponse\n): ReconnectedAction => ({\n  type: SubscriptionStatusActionType.RECONNECTED_EVENT,\n  payload,\n});\n\nexport const connected = (\n  payload: SubscriptionStatusResponse\n): ConnectedAction => ({\n  type: SubscriptionStatusActionType.CONNECTED_EVENT,\n  payload,\n});\n\nexport type SubscriptionStatusListenerActions =\n  | ReconnectedAction\n  | ConnectedAction;\n\nexport const createSubscriptionStatusListener = (\n  dispatch: Dispatch<SubscriptionStatusListenerActions>\n) => ({\n  status: (payload: SubscriptionStatusResponse) => {\n    switch (payload.category) {\n      case SubscriptionStatusCategory.PN_CONNECTED_CATEGORY:\n        dispatch(connected(payload));\n        break;\n      case SubscriptionStatusCategory.PN_RECONNECTED_CATEGORY:\n        dispatch(reconnected(payload));\n        break;\n      default:\n        break;\n    }\n  },\n});\n","import Pubnub, {\n  PresenceEvent,\n  SignalEvent,\n  MessageActionEvent,\n  StatusEvent,\n  ObjectsEvent,\n} from 'pubnub';\n\n/**\n * Combines multiple listener objects into one object that supports all of them.\n *\n * @param listeners Array of listener objects.\n * @returns The combined listener Object.\n */\nexport const combineListeners = (...listeners: Pubnub.ListenerParameters[]) => {\n  return Object.assign({}, ...mergeListenersByType(listeners));\n};\n\n/**\n * Take a list of listeners and combine listeners of the same type together.\n *\n * @param listeners Array of listener objects.\n * @returns Array of listener objects with like types combined to single listener object.\n */\nconst mergeListenersByType = (\n  listeners: Pubnub.ListenerParameters[]\n): Pubnub.ListenerParameters[] => {\n  const result: Pubnub.ListenerParameters[] = [];\n  const incomingListeners: {\n    [key in keyof Pubnub.ListenerParameters]: Pubnub.ListenerParameters[];\n  } = {};\n\n  // group the listeners by type so we can combine them\n  listeners.forEach((listener) => {\n    const allowedListeners = [\n      'status',\n      'message',\n      'presence',\n      'signal',\n      'messageAction',\n      'objects',\n    ] as const;\n    for (const listenerType of allowedListeners) {\n      if (listener[listenerType] !== undefined) {\n        if (incomingListeners[listenerType] === undefined) {\n          incomingListeners[listenerType] = [];\n        }\n\n        incomingListeners[listenerType]?.push(listener);\n      }\n    }\n  });\n\n  // merge the grouped listeners and add to the result list\n  Object.entries(incomingListeners).forEach(\n    ([listenerType, listenersOfType]) => {\n      if (listenersOfType && listenersOfType.length === 1) {\n        // only one listener for this type so add directly to the result list\n        result.push(listenersOfType[0]);\n      } else if (listenersOfType && listenersOfType.length > 1) {\n        // multiple listeners for this type so combine them and add to the result list\n        result.push(\n          createCombinedListener(\n            listenerType as keyof Pubnub.ListenerParameters,\n            listenersOfType\n          )\n        );\n      }\n    }\n  );\n\n  return result;\n};\n\n/**\n * Take a list of listeners of the same type and combine to single listener object.\n * For example an array of status listener objects combined to a single status listener object.\n *\n * @param listenerType The listener type.\n * @param listeners The Array of listeners of the same type.\n */\nconst createCombinedListener = (\n  listenerType: keyof Pubnub.ListenerParameters,\n  listeners: Pubnub.ListenerParameters[]\n): Pubnub.ListenerParameters => {\n  // returns a single listener which invokes each of the incomming listeners\n  return {\n    [listenerType]: (\n      payload: MessageEvent &\n        PresenceEvent &\n        SignalEvent &\n        StatusEvent &\n        MessageActionEvent &\n        ObjectsEvent\n    ) => {\n      listeners.forEach((listener) => {\n        const currentListener = listener[listenerType];\n\n        if (currentListener !== undefined) {\n          currentListener(payload);\n        }\n      });\n    },\n  };\n};\n","import { Dispatch } from 'redux';\nimport { createMessageListener } from '../message/MessageListener';\nimport { createPresenceListener } from '../presence/PresenceListener';\nimport { createSignalListener } from '../signal/SignalListener';\nimport { createErrorStatusListener } from '../errorStatus/ErrorStatusListener';\nimport { createNetworkStatusListener } from '../networkStatus/NetworkStatusListener';\nimport { createSubscriptionStatusListener } from '../subscriptionStatus/SubscriptionStatusListener';\nimport { createMembershipListener } from '../membership/MembershipListener';\nimport { createChannelDataListener } from '../channel/ChannelDataListener';\nimport { createUserDataListener } from '../user/UserDataListener';\nimport { combineListeners } from '../../foundations/CombineListeners';\n\nexport const createPubNubListener = (dispatch: Dispatch) =>\n  combineListeners(\n    createMessageListener(dispatch),\n    createPresenceListener(dispatch),\n    createSignalListener(dispatch),\n    createErrorStatusListener(dispatch),\n    createErrorStatusListener(dispatch),\n    createNetworkStatusListener(dispatch),\n    createSubscriptionStatusListener(dispatch),\n    createUserDataListener(dispatch),\n    createChannelDataListener(dispatch),\n    createMembershipListener(dispatch)\n  );\n","import {\n  Message,\n  MessageActions,\n  FetchMessageHistorySuccess,\n} from './MessageActions';\nimport { MessageActionType } from './MessageActionType.enum';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport type MessageState<MessageType extends Message> = {\n  byId: {\n    [channel: string]: MessageType[];\n  };\n};\n\nconst createInitialState = <\n  MessageType extends Message\n>(): MessageState<MessageType> => ({\n  byId: {},\n});\n\nconst messageReceived = <MessageType extends Message>(\n  state: MessageState<MessageType>,\n  payload: MessageType\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  if (newState.byId[payload.channel] === undefined) {\n    newState.byId[payload.channel] = [];\n  }\n\n  newState.byId[payload.channel] = [...newState.byId[payload.channel], payload];\n\n  return newState;\n};\n\nconst messageHistoryRetrieved = <\n  MessageContentType,\n  MessageType extends Message\n>(\n  state: MessageState<MessageType>,\n  payload: FetchMessageHistorySuccess<MessageContentType>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  if (newState.byId[payload.request.channel] === undefined) {\n    newState.byId[payload.request.channel] = [];\n  }\n\n  const results: MessageType[] = payload.response.messages.map(\n    (m) =>\n      (({\n        channel: payload.request.channel,\n        message: m.entry as MessageContentType,\n        timetoken: m.timetoken,\n      } as unknown) as MessageType)\n  );\n\n  newState.byId[payload.request.channel] = [\n    ...newState.byId[payload.request.channel],\n    ...results,\n  ];\n\n  return newState;\n};\n\nexport const createMessageReducer = <\n  MessageType extends Message = Message,\n  MessageContentType extends object = {},\n  MessageMetaType extends object = {},\n  Meta extends ActionMeta = AnyMeta\n>() => (\n  state: MessageState<MessageType> = createInitialState<MessageType>(),\n  action: MessageActions<MessageType, MessageContentType, MessageMetaType, Meta>\n): MessageState<MessageType> => {\n  switch (action.type) {\n    case MessageActionType.MESSAGE_RECEIVED:\n      return messageReceived<MessageType>(state, action.payload);\n    case MessageActionType.MESSAGE_HISTORY_RETRIEVED:\n      return messageHistoryRetrieved<MessageContentType, MessageType>(\n        state,\n        action.payload\n      );\n    default:\n      return state;\n  }\n};\n","import { Signal, SignalActions } from './SignalActions';\nimport { SignalActionType } from './SignalActionType.enum';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport type SignalState<SignalType extends Signal> = {\n  byId: {\n    [channel: string]: SignalType[];\n  };\n};\n\nconst createInitialState = <\n  SignalType extends Signal\n>(): SignalState<SignalType> => ({\n  byId: {},\n});\n\nconst signalReceived = <SignalType extends Signal>(\n  state: SignalState<SignalType>,\n  payload: SignalType\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  if (newState.byId[payload.channel] === undefined) {\n    newState.byId[payload.channel] = [];\n  }\n\n  newState.byId[payload.channel] = [...newState.byId[payload.channel], payload];\n\n  return newState;\n};\n\nexport const createSignalReducer = <\n  SignalType extends Signal = Signal,\n  SignalContentType extends object = {},\n  Meta extends ActionMeta = AnyMeta\n>() => (\n  state: SignalState<SignalType> = createInitialState<SignalType>(),\n  action: SignalActions<SignalType, SignalContentType, Meta>\n): SignalState<SignalType> => {\n  switch (action.type) {\n    case SignalActionType.SIGNAL_RECEIVED:\n      return signalReceived<SignalType>(state, action.payload);\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { PresenceActionType } from './PresenceActionType.enum';\nimport {\n  PresenceListenerActions,\n  PresenceEventMessage,\n  Presence,\n  HereNowResponse,\n  HereNowSuccess,\n  HereNowRetrievedAction,\n  PresenceStateRetrievedAction,\n} from './PresenceActions';\nimport { PresenceState } from './PresenceState';\n\nexport interface PresencebyIdState<ReceivedPresence extends Presence> {\n  byId: {\n    [channelId: string]: {\n      name: string;\n      occupants: ReceivedPresence[];\n      occupancy: number;\n    };\n  };\n  totalOccupancy: number;\n}\n\nconst createInitialState = () => {\n  return {\n    byId: {},\n    totalOccupancy: 0,\n  };\n};\n\nconst hereNow = <ReceivedPresence extends Presence<PresenceState>>(\n  state: PresencebyIdState<ReceivedPresence>,\n  payload: HereNowSuccess<ReceivedPresence>\n) => {\n  const newState = {\n    byId: {\n      ...state.byId,\n      ...payload.response.channels,\n    },\n    totalOccupancy: payload.response.totalOccupancy,\n  };\n\n  return newState;\n};\n\nconst getState = <ReceivedPresence extends Presence<PresenceState>>(\n  state: PresencebyIdState<ReceivedPresence>,\n  payload: HereNowResponse<ReceivedPresence>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n    totalOccupancy: state.totalOccupancy,\n  };\n\n  Object.keys(payload.channels).forEach((channel) => {\n    // update occupant state if exists\n    if (newState.byId[channel]) {\n      newState.byId[channel] = payload.channels[channel];\n    }\n  });\n\n  return newState;\n};\n\nconst userJoined = <ReceivedPresence extends Presence<PresenceState>>(\n  state: PresencebyIdState<ReceivedPresence>,\n  payload: PresenceEventMessage<ReceivedPresence>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n    totalOccupancy: state.totalOccupancy,\n  };\n\n  let occupants: ReceivedPresence[] = [];\n\n  // remove occupant if exists\n  if (newState.byId[payload.channel]) {\n    occupants = newState.byId[payload.channel].occupants;\n\n    newState.byId[payload.channel].occupants = occupants.filter(\n      (occupant) => occupant.uuid !== payload.uuid\n    );\n\n    newState.byId[payload.channel].occupancy =\n      newState.byId[payload.channel].occupants.length;\n\n    if (occupants.length === newState.byId[payload.channel].occupants.length) {\n      newState.totalOccupancy++;\n    }\n  } else {\n    newState.totalOccupancy++;\n  }\n\n  // add occupant and update occupancy\n  newState.byId[payload.channel] = {\n    name: payload.channel,\n    occupants: [\n      ...occupants,\n      {\n        uuid: payload.uuid,\n        state: payload.state,\n      } as ReceivedPresence,\n    ],\n    occupancy: payload.occupancy,\n  };\n\n  return newState;\n};\n\nconst userLeft = <ReceivedPresence extends Presence<PresenceState>>(\n  state: PresencebyIdState<ReceivedPresence>,\n  payload: PresenceEventMessage<ReceivedPresence>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n    totalOccupancy: state.totalOccupancy,\n  };\n\n  // remove occupant if exists\n  if (newState.byId[payload.channel]) {\n    const occupants = newState.byId[payload.channel].occupants;\n\n    newState.byId[payload.channel].occupants = occupants.filter(\n      (occupant) => occupant.uuid !== payload.uuid\n    );\n\n    if (occupants.length > newState.byId[payload.channel].occupants.length) {\n      newState.byId[payload.channel].occupancy--;\n      newState.totalOccupancy--;\n    }\n  }\n\n  return newState;\n};\n\nconst userStateChange = <ReceivedPresence extends Presence<PresenceState>>(\n  state: PresencebyIdState<ReceivedPresence>,\n  payload: PresenceEventMessage<ReceivedPresence>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n    totalOccupancy: state.totalOccupancy,\n  };\n\n  // update occupant state if exists\n  if (newState.byId[payload.channel]) {\n    const occupants = newState.byId[payload.channel].occupants;\n\n    occupants.forEach((occupant) => {\n      if (occupant.uuid === payload.uuid) {\n        occupant.state = payload.state;\n      }\n    });\n  }\n\n  return newState;\n};\n\nexport type PresenceActions<RetrievedPresence extends Presence> =\n  | HereNowRetrievedAction<RetrievedPresence>\n  | PresenceStateRetrievedAction<RetrievedPresence>\n  | PresenceListenerActions;\n\nexport type PresenceReducer<\n  StoredPresence extends Presence,\n  PresenceAction extends AnyAction\n> = (\n  state: PresencebyIdState<StoredPresence> | undefined,\n  action: PresenceAction\n) => PresencebyIdState<StoredPresence>;\n\nexport const createPresenceReducer = <\n  StoredPresence extends Presence<PresenceState> = Presence,\n  PresenceAction extends AnyAction = PresenceActions<StoredPresence>\n>(): PresenceReducer<StoredPresence, PresenceAction> => (\n  state: PresencebyIdState<StoredPresence> = createInitialState(),\n  action: PresenceAction\n): PresencebyIdState<StoredPresence> => {\n  switch (action.type) {\n    case PresenceActionType.HERE_NOW_RETRIEVED:\n      return hereNow<StoredPresence>(state, action.payload);\n    case PresenceActionType.PRESENCE_STATE_RETRIEVED:\n      return getState<StoredPresence>(state, action.payload);\n    case PresenceActionType.JOIN_EVENT:\n      return userJoined<StoredPresence>(state, action.payload);\n    case PresenceActionType.LEAVE_EVENT:\n    case PresenceActionType.TIMEOUT_EVENT:\n      return userLeft<StoredPresence>(state, action.payload);\n    case PresenceActionType.STATE_CHANGE_EVENT:\n      return userStateChange<StoredPresence>(state, action.payload);\n    default:\n      return state;\n  }\n};\n","import { NetworkStatusListenerActions } from './NetworkStatusListener';\nimport { NetworkStatusActionType } from './NetworkStatusActionType.enum';\n\nexport interface NetworkStatusState {\n  isConnected: boolean;\n}\n\ntype NetworkStatusInitializerFunction = () => boolean;\n\nexport const createNetworkStatusReducer = (\n  initializer: NetworkStatusInitializerFunction | boolean\n) => {\n  let initialState: NetworkStatusState;\n\n  if (typeof initializer === 'boolean') {\n    initialState = { isConnected: initializer };\n  } else if (typeof initializer === 'function') {\n    initialState = { isConnected: initializer() };\n    if (typeof initialState.isConnected !== 'boolean') {\n      throw new Error(\n        'The initializer function must return a boolean value (true or false)'\n      );\n    }\n  } else {\n    throw new Error(\n      'The initializer parameter must be a boolean value (true or false) or function'\n    );\n  }\n\n  return function networkStatusReducer(\n    state = initialState,\n    action: NetworkStatusListenerActions\n  ): NetworkStatusState {\n    switch (action.type) {\n      case NetworkStatusActionType.NETWORK_UP_EVENT:\n        return {\n          isConnected: true,\n        };\n      case NetworkStatusActionType.NETWORK_DOWN_EVENT:\n        return {\n          isConnected: false,\n        };\n      default:\n        return state;\n    }\n  };\n};\n","import { AnyAction } from 'redux';\nimport {\n  UserDataActions,\n  UserDataListenerActions,\n  UserDataSuccess,\n  DeleteUserDataSuccess,\n  FetchAllUserDataSuccess,\n  FetchUserDataSuccess,\n  UserData,\n  UserDataEventMessage,\n  SetUserDataEventMessage,\n} from './UserDataActions';\nimport { UserDataActionType } from './UserDataActionType.enum';\nimport {\n  ChannelMembersActions,\n  FetchChannelMembersSuccess,\n} from 'features/members/ChannelMembersActions';\nimport { MembershipActions } from 'features/membership/MembershipActions';\nimport { ChannelMembersActionType } from '../members/ChannelMembersActionType.enum';\nimport { AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom, GetUserCustom } from 'foundations/ObjectsCustom';\n\nexport interface UserDataByIdState<UserDataType extends UserData> {\n  byId: {\n    [uuid: string]: UserDataType;\n  };\n}\n\nconst createInitialState = () => ({\n  byId: {},\n});\n\nconst UserDataSet = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: UserDataSuccess<GetUserCustom<UserDataType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  // partial update\n  newState.byId[payload.response.data.id] = {\n    ...state.byId[payload.response.data.id],\n    ...payload.response.data,\n  };\n\n  return newState;\n};\n\nconst UserDataRemoved = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: DeleteUserDataSuccess\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  delete newState.byId[payload.request.uuid];\n\n  return newState;\n};\n\nconst allUserDataRetrieved = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: FetchAllUserDataSuccess<GetUserCustom<UserDataType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  payload.response.data.forEach((item) => {\n    newState.byId[item.id] = (item as unknown) as UserDataType;\n  });\n\n  return newState;\n};\n\nconst UserDataRetrieved = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: FetchUserDataSuccess<GetUserCustom<UserDataType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  newState.byId[payload.response.data.id] = (payload.response\n    .data as unknown) as UserDataType;\n\n  return newState;\n};\n\nconst UserDataSetEventReceived = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: SetUserDataEventMessage<GetUserCustom<UserDataType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  // partial update\n  newState.byId[payload.data.id] = {\n    ...state.byId[payload.data.id],\n    ...payload.data,\n  };\n\n  return newState;\n};\n\nconst UserDataRemovedEventReceived = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: UserDataEventMessage<GetUserCustom<UserDataType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  delete newState.byId[payload.data.id];\n\n  return newState;\n};\n\nconst membersRetrieved = <\n  UserDataType extends UserData,\n  MembershipCustom extends ObjectsCustom\n>(\n  state: UserDataByIdState<UserDataType>,\n  payload: FetchChannelMembersSuccess<\n    MembershipCustom,\n    GetUserCustom<UserDataType>\n  >\n) => {\n  let newState = state;\n\n  if (payload.response.data.length > 0) {\n    newState = {\n      byId: {\n        ...state.byId,\n      },\n    };\n\n    for (let i = 0; i < payload.response.data.length; i++) {\n      const currentMember = payload.response.data[i];\n\n      // important: consumers *must* include UUIDFields for the state to be updated\n      if (currentMember.uuid && 'eTag' in currentMember.uuid) {\n        newState.byId[\n          currentMember.uuid.id\n        ] = (currentMember.uuid as unknown) as UserDataType;\n      }\n    }\n  }\n\n  return newState;\n};\n\ntype UserDataReducerActions<\n  UserCustom extends ObjectsCustom,\n  MembershipCustom extends ObjectsCustom\n> =\n  | UserDataActions<UserCustom, AnyMeta>\n  | UserDataListenerActions<UserCustom>\n  | ChannelMembersActions<UserCustom, MembershipCustom, AnyMeta>\n  | MembershipActions<UserCustom, MembershipCustom, AnyMeta>;\n\nexport type UserDataReducer<\n  UserDataType extends UserData,\n  UserDataAction extends AnyAction\n> = (\n  state: UserDataByIdState<UserDataType> | undefined,\n  action: UserDataAction\n) => UserDataByIdState<UserDataType>;\n\nexport const createUserDataReducer = <\n  UserDataType extends UserData = UserData,\n  MembershipCustom extends ObjectsCustom = ObjectsCustom,\n  UserDataAction extends AnyAction = UserDataReducerActions<\n    GetUserCustom<UserDataType>,\n    MembershipCustom\n  >\n>(): UserDataReducer<UserDataType, UserDataAction> => (\n  state: UserDataByIdState<UserDataType> = createInitialState(),\n  action: UserDataAction\n): UserDataByIdState<UserDataType> => {\n  switch (action.type) {\n    case UserDataActionType.USER_DATA_SET:\n      return UserDataSet<UserDataType>(state, action.payload);\n    case UserDataActionType.USER_DATA_REMOVED:\n      return UserDataRemoved<UserDataType>(state, action.payload);\n    case UserDataActionType.ALL_USER_DATA_RETRIEVED:\n      return allUserDataRetrieved<UserDataType>(state, action.payload);\n    case UserDataActionType.USER_DATA_RETRIEVED:\n      return UserDataRetrieved<UserDataType>(state, action.payload);\n    case UserDataActionType.USER_DATA_SET_EVENT:\n      return UserDataSetEventReceived<UserDataType>(state, action.payload);\n    case UserDataActionType.USER_DATA_REMOVED_EVENT:\n      return UserDataRemovedEventReceived<UserDataType>(state, action.payload);\n    case ChannelMembersActionType.CHANNEL_MEMBERS_RETRIEVED:\n      return membersRetrieved<UserDataType, MembershipCustom>(\n        state,\n        action.payload\n      );\n    default:\n      return state;\n  }\n};\n","import {\n  AllUserDataRetrievedAction,\n  FetchAllUserDataSuccess,\n} from './UserDataActions';\nimport { UserDataActionType } from './UserDataActionType.enum';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\ninterface UsersListState {\n  uuids: string[];\n}\n\nconst createInitialState = (): UsersListState => ({\n  uuids: [],\n});\n\nconst allUserDataRetrieved = <UserCustom extends ObjectsCustom>(\n  payload: FetchAllUserDataSuccess<UserCustom>\n) => ({ uuids: payload.response.data.map((uuid) => uuid.id) });\n\nexport const createUsersListReducer = <\n  UserCustom extends ObjectsCustom = ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>() => (\n  state: UsersListState = createInitialState(),\n  action: AllUserDataRetrievedAction<UserCustom, Meta>\n): UsersListState => {\n  switch (action.type) {\n    case UserDataActionType.ALL_USER_DATA_RETRIEVED:\n      return allUserDataRetrieved(action.payload);\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport {\n  ChannelDataActions,\n  ChannelDataListenerActions,\n  SetChannelDataSuccess,\n  RemoveChannelSuccess,\n  FetchAllChannelDataSuccess,\n  FetchChannelDataSuccess,\n  Channel,\n  SetChannelDataEventMessage,\n  RemoveChannelDataEventMessage,\n} from './ChannelDataActions';\nimport { ChannelDataActionType } from './ChannelDataActionType.enum';\nimport {\n  MembershipActions,\n  FetchMembershipsSuccess,\n  MembershipsRetrievedAction,\n} from '../membership/MembershipActions';\nimport { MembershipActionType } from '../membership/MembershipActionType.enum';\nimport { AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom, GetChannelCustom } from 'foundations/ObjectsCustom';\n\nexport type ChannelsByIdState<ChannelType extends Channel> = {\n  byId: {\n    [channelId: string]: ChannelType;\n  };\n};\n\nconst createInitialState = () => ({\n  byId: {},\n});\n\nconst channelDataSet = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: SetChannelDataSuccess<GetChannelCustom<ChannelType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  // partial update\n  newState.byId[payload.response.data.id] = {\n    ...state.byId[payload.response.data.id],\n    ...payload.response.data,\n  };\n\n  return newState;\n};\n\nconst channelDataRemoved = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: RemoveChannelSuccess\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  delete newState.byId[payload.request.channel];\n\n  return newState;\n};\n\nconst allChannelDataRetrieved = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: FetchAllChannelDataSuccess<GetChannelCustom<ChannelType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  payload.response.data.forEach((item) => {\n    newState.byId[item.id] = (item as unknown) as ChannelType;\n  });\n\n  return newState;\n};\n\nconst channelDataRetrieved = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: FetchChannelDataSuccess<GetChannelCustom<ChannelType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  newState.byId[payload.response.data.id] = (payload.response\n    .data as unknown) as ChannelType;\n\n  return newState;\n};\n\nconst channelDataSetEventReceived = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: SetChannelDataEventMessage<GetChannelCustom<ChannelType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  // partial update\n  newState.byId[payload.data.id] = {\n    ...state.byId[payload.data.id],\n    ...payload.data,\n  };\n\n  return newState;\n};\n\nconst channelDataRemovedEventReceived = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: RemoveChannelDataEventMessage\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  delete newState.byId[payload.data.id];\n\n  return newState;\n};\n\nconst membershipRetrieved = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelType extends Channel\n>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: FetchMembershipsSuccess<\n    MembershipCustom,\n    GetChannelCustom<ChannelType>\n  >\n) => {\n  let newState = state;\n\n  if (payload.response.data.length > 0) {\n    newState = {\n      byId: {\n        ...state.byId,\n      },\n    };\n\n    for (let i = 0; i < payload.response.data.length; i++) {\n      const currentMembership = payload.response.data[i];\n\n      // important: consumers *must* include ChannelFields for the state to be updated\n      if (currentMembership.channel && 'eTag' in currentMembership.channel) {\n        newState.byId[\n          currentMembership.channel.id\n        ] = (currentMembership.channel as unknown) as ChannelType;\n      }\n    }\n  }\n\n  return newState;\n};\n\ntype ChannelDataReducerActions<\n  ChannelCustom extends ObjectsCustom,\n  MembershipCustom extends ObjectsCustom\n> =\n  | ChannelDataActions<ChannelCustom, AnyMeta>\n  | ChannelDataListenerActions<ChannelCustom>\n  | MembershipsRetrievedAction<ChannelCustom, MembershipCustom, AnyMeta>\n  | MembershipActions<ChannelCustom, MembershipCustom, AnyMeta>;\n\nexport type ChannelDataReducer<\n  ChannelType extends Channel,\n  ChannelAction extends AnyAction\n> = (\n  state: ChannelsByIdState<ChannelType> | undefined,\n  action: ChannelAction\n) => ChannelsByIdState<ChannelType>;\n\nexport const createChannelDataReducer = <\n  ChannelType extends Channel = Channel,\n  MembershipCustom extends ObjectsCustom = ObjectsCustom,\n  ChannelAction extends AnyAction = ChannelDataReducerActions<\n    GetChannelCustom<ChannelType>,\n    MembershipCustom\n  >\n>(): ChannelDataReducer<ChannelType, ChannelAction> => (\n  state: ChannelsByIdState<ChannelType> = createInitialState(),\n  action: ChannelAction\n): ChannelsByIdState<ChannelType> => {\n  switch (action.type) {\n    case ChannelDataActionType.CHANNEL_DATA_SET:\n      return channelDataSet<ChannelType>(state, action.payload);\n    case ChannelDataActionType.CHANNEL_DATA_REMOVED:\n      return channelDataRemoved<ChannelType>(state, action.payload);\n    case ChannelDataActionType.ALL_CHANNEL_DATA_RETRIEVED:\n      return allChannelDataRetrieved<ChannelType>(state, action.payload);\n    case ChannelDataActionType.CHANNEL_DATA_RETRIEVED:\n      return channelDataRetrieved<ChannelType>(state, action.payload);\n    case ChannelDataActionType.CHANNEL_DATA_SET_EVENT:\n      return channelDataSetEventReceived<ChannelType>(state, action.payload);\n    case ChannelDataActionType.CHANNEL_DATA_REMOVED_EVENT:\n      return channelDataRemovedEventReceived<ChannelType>(\n        state,\n        action.payload\n      );\n    case MembershipActionType.MEMBERSHIPS_RETRIEVED:\n      return membershipRetrieved<MembershipCustom, ChannelType>(\n        state,\n        action.payload\n      );\n    default:\n      return state;\n  }\n};\n","import {\n  AllChannelDataRetrievedAction,\n  FetchAllChannelDataSuccess,\n} from './ChannelDataActions';\nimport { ChannelDataActionType } from './ChannelDataActionType.enum';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\ninterface ChannelListState {\n  channelIds: string[];\n}\n\nconst createInitialState = (): ChannelListState => ({\n  channelIds: [],\n});\n\nconst allChannelDataRetrieved = <ChannelCustom extends ObjectsCustom>(\n  payload: FetchAllChannelDataSuccess<ChannelCustom>\n) => ({ channelIds: payload.response.data.map((channel) => channel.id) });\n\nexport const createChannelsListReducer = <\n  ChannelCustom extends ObjectsCustom = ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>() => (\n  state: ChannelListState = createInitialState(),\n  action: AllChannelDataRetrievedAction<ChannelCustom, Meta>\n): ChannelListState => {\n  switch (action.type) {\n    case ChannelDataActionType.ALL_CHANNEL_DATA_RETRIEVED:\n      return allChannelDataRetrieved<ChannelCustom>(action.payload);\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport {\n  FetchMembershipsSuccess,\n  SetMembershipsSuccess,\n  MembershipListenerActions,\n  MembershipActions,\n  MembershipEventMessage,\n  SetMembershipEventMessage,\n} from './MembershipActions';\nimport { MembershipActionType } from './MembershipActionType.enum';\nimport { AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport type MembershipByUuidState<MembershipCustom extends ObjectsCustom> = {\n  byId: {\n    [uuid: string]: {\n      id: string;\n      custom: MembershipCustom | null;\n    }[];\n  };\n};\n\nconst createInitialState = () => ({\n  byId: {},\n});\n\nconst uuidRemovedFromChannel = <MembershipCustom extends ObjectsCustom>(\n  state: MembershipByUuidState<MembershipCustom>,\n  payload: MembershipEventMessage<MembershipCustom>\n) => {\n  if (\n    state.byId[payload.data.uuid.id] &&\n    state.byId[payload.data.uuid.id].filter(\n      (membership) => membership.id === payload.data.channel.id\n    ).length > 0\n  ) {\n    const newState = {\n      byId: { ...state.byId },\n    };\n\n    newState.byId[payload.data.uuid.id] = newState.byId[\n      payload.data.uuid.id\n    ].filter((membership) => membership.id !== payload.data.channel.id);\n\n    return newState;\n  }\n\n  return state;\n};\n\nconst uuidMembershipUpdatedOnChannel = <MembershipCustom extends ObjectsCustom>(\n  state: MembershipByUuidState<MembershipCustom>,\n  payload: SetMembershipEventMessage<MembershipCustom>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  let clonedUUID = [...(newState.byId[payload.data.uuid.id] || [])];\n\n  let exists = false;\n  clonedUUID = clonedUUID.map((channel) => {\n    if (channel.id === payload.data.channel.id) {\n      exists = true;\n      return {\n        ...channel,\n        custom: payload.data.custom,\n      };\n    } else {\n      return channel;\n    }\n  });\n  if (!exists) {\n    clonedUUID.push({\n      id: payload.data.channel.id,\n      custom: payload.data.custom,\n    });\n  }\n\n  newState.byId[payload.data.uuid.id] = clonedUUID;\n\n  return newState;\n};\n\nconst membershipResult = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom\n>(\n  state: MembershipByUuidState<MembershipCustom>,\n  payload:\n    | FetchMembershipsSuccess<MembershipCustom, ChannelCustom>\n    | SetMembershipsSuccess<MembershipCustom, ChannelCustom>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  const memberships = payload.response.data.map((complete) => ({\n    id: complete.channel.id,\n    custom: complete.custom || null,\n  }));\n\n  newState.byId[payload.request.uuid] = memberships;\n\n  return newState;\n};\n\ntype MembershipReducerActions<\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom\n> =\n  | MembershipActions<MembershipCustom, ChannelCustom, AnyMeta>\n  | MembershipListenerActions<MembershipCustom>;\n\nexport type MembershipReducer<\n  MembershipCustom extends ObjectsCustom,\n  MembershipAction extends AnyAction\n> = (\n  state: MembershipByUuidState<MembershipCustom> | undefined,\n  action: MembershipAction\n) => MembershipByUuidState<MembershipCustom>;\n\nexport const createMembershipReducer = <\n  MembershipCustom extends ObjectsCustom = ObjectsCustom,\n  ChannelCustom extends ObjectsCustom = ObjectsCustom,\n  MembershipAction extends AnyAction = MembershipReducerActions<\n    MembershipCustom,\n    ChannelCustom\n  >\n>(): MembershipReducer<MembershipCustom, MembershipAction> => (\n  state = createInitialState(),\n  action: MembershipAction\n): MembershipByUuidState<MembershipCustom> => {\n  switch (action.type) {\n    case MembershipActionType.MEMBERSHIPS_RETRIEVED:\n    case MembershipActionType.MEMBERSHIPS_SET:\n    case MembershipActionType.MEMBERSHIPS_REMOVED:\n      return membershipResult<MembershipCustom, ChannelCustom>(\n        state,\n        action.payload\n      );\n    case MembershipActionType.MEMBERSHIP_SET_EVENT:\n      return uuidMembershipUpdatedOnChannel<MembershipCustom>(\n        state,\n        action.payload\n      );\n    case MembershipActionType.MEMBERSHIP_REMOVED_EVENT:\n      return uuidRemovedFromChannel<MembershipCustom>(state, action.payload);\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport {\n  ChannelMembersActions,\n  FetchChannelMembersSuccess,\n  SetChannelMembersSuccess,\n} from './ChannelMembersActions';\nimport { ChannelMembersActionType } from './ChannelMembersActionType.enum';\nimport {\n  MembershipListenerActions,\n  SetMembershipEventMessage,\n  RemoveMembershipEventMessage,\n} from 'features/membership/MembershipActions';\nimport { MembershipActionType } from '../membership/MembershipActionType.enum';\nimport { AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport type MembersByChannelIdState<MembershipCustom extends ObjectsCustom> = {\n  byId: {\n    [channelId: string]: { id: string; custom: MembershipCustom | null }[];\n  };\n};\n\nconst createInitialState = () => ({\n  byId: {},\n});\n\nconst channelMembershipRemoveEventRecieved = <\n  MembershipCustom extends ObjectsCustom\n>(\n  state: MembersByChannelIdState<MembershipCustom>,\n  payload: RemoveMembershipEventMessage\n) => {\n  if (\n    state.byId[payload.data.channel.id] &&\n    state.byId[payload.data.channel.id].filter(\n      (membership) => membership.id === payload.data.uuid.id\n    ).length > 0\n  ) {\n    const newState = {\n      byId: { ...state.byId },\n    };\n\n    newState.byId[payload.data.channel.id] = newState.byId[\n      payload.data.channel.id\n    ].filter((membership) => membership.id !== payload.data.uuid.id);\n\n    return newState;\n  }\n\n  return state;\n};\n\nconst channelMembershipSetEventRecieved = <\n  MembershipCustom extends ObjectsCustom\n>(\n  state: MembersByChannelIdState<MembershipCustom>,\n  payload: SetMembershipEventMessage<MembershipCustom>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  let clonedChannel = [...(newState.byId[payload.data.channel.id] || [])];\n\n  let exists = false;\n  clonedChannel = clonedChannel.map((uuid) => {\n    if (uuid.id === payload.data.uuid.id) {\n      exists = true;\n      return {\n        id: uuid.id,\n        custom: payload.data.custom,\n      };\n    } else {\n      return uuid;\n    }\n  });\n  if (!exists) {\n    clonedChannel.push({\n      id: payload.data.uuid.id,\n      custom: payload.data.custom,\n    });\n  }\n\n  newState.byId[payload.data.channel.id] = clonedChannel;\n\n  return newState;\n};\n\nconst channelMembersResult = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom\n>(\n  state: MembersByChannelIdState<MembershipCustom>,\n  payload:\n    | FetchChannelMembersSuccess<MembershipCustom, UserCustom>\n    | SetChannelMembersSuccess<MembershipCustom, UserCustom>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  const memberships = payload.response.data.map((complete) => ({\n    id: complete.uuid.id,\n    custom: complete.custom || null,\n  }));\n\n  newState.byId[payload.request.channel] = memberships;\n\n  return newState;\n};\n\ntype ChannelMembersReducerActions<\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom\n> =\n  | ChannelMembersActions<MembershipCustom, UserCustom, AnyMeta>\n  | MembershipListenerActions<MembershipCustom>;\n\nexport type ChannelMembersReducer<\n  MembershipCustom extends ObjectsCustom,\n  MembersAction extends AnyAction\n> = (\n  state: MembersByChannelIdState<MembershipCustom> | undefined,\n  action: MembersAction\n) => MembersByChannelIdState<MembershipCustom>;\n\nexport const createChannelMembersReducer = <\n  MembershipCustom extends ObjectsCustom = ObjectsCustom,\n  UserCustom extends ObjectsCustom = ObjectsCustom,\n  MembersAction extends AnyAction = ChannelMembersReducerActions<\n    MembershipCustom,\n    UserCustom\n  >\n>(): ChannelMembersReducer<MembershipCustom, MembersAction> => (\n  state = createInitialState(),\n  action: MembersAction\n): MembersByChannelIdState<MembershipCustom> => {\n  switch (action.type) {\n    case ChannelMembersActionType.CHANNEL_MEMBERS_RETRIEVED:\n    case ChannelMembersActionType.CHANNEL_MEMBERS_SET:\n    case ChannelMembersActionType.CHANNEL_MEMBERS_REMOVED:\n      return channelMembersResult<MembershipCustom, UserCustom>(\n        state,\n        action.payload\n      );\n    case MembershipActionType.MEMBERSHIP_SET_EVENT:\n      return channelMembershipSetEventRecieved<MembershipCustom>(\n        state,\n        action.payload\n      );\n    case MembershipActionType.MEMBERSHIP_REMOVED_EVENT:\n      return channelMembershipRemoveEventRecieved<MembershipCustom>(\n        state,\n        action.payload\n      );\n    default:\n      return state;\n  }\n};\n"],"names":["MembershipActionType","removingMemberships","payload","meta","type","REMOVING_MEMBERSHIPS","membershipsRemoved","MEMBERSHIPS_REMOVED","errorRemovingMemberships","ERROR_REMOVING_MEMBERSHIPS","error","removeMemberships","request","thunkFunction","dispatch","_getState","pubnub","Promise","resolve","reject","api","objects","status","response","action","REMOVE_MEMBERSHIPS_COMMAND","fetchingMemberships","FETCHING_MEMBERSHIPS","membershipsRetrieved","MEMBERSHIPS_RETRIEVED","errorFetchingMemberships","ERROR_FETCHING_MEMBERSHIPS","fetchMemberships","getMemberships","FETCH_MEMBERSHIPS_COMMAND","settingMemberships","SETTING_MEMBERSHIPS","membershipsSet","MEMBERSHIPS_SET","errorSettingMemberships","ERROR_SETTING_MEMBERSHIPS","setMemberships","SET_MEMBERSHIPS_COMMAND","ChannelMembersActionType","fetchingChannelMembers","FETCHING_CHANNEL_MEMBERS","channelMembersRetrieved","CHANNEL_MEMBERS_RETRIEVED","errorFetchingChannelMembers","ERROR_FETCHING_CHANNEL_MEMBERS","fetchChannelMembers","getChannelMembers","FETCH_CHANNEL_MEMBERS_COMMAND","settingChannelMembers","SETTING_CHANNEL_MEMBERS","channelMembersSet","CHANNEL_MEMBERS_SET","errorSettingChannelMembers","ERROR_SETTING_CHANNEL_MEMBERS","setChannelMembers","SET_CHANNEL_MEMBERS_COMMAND","removingChannelMembers","REMOVING_CHANNEL_MEMBERS","channelMembersRemoved","CHANNEL_MEMBERS_REMOVED","errorRemovingChannelMembers","ERROR_REMOVING_CHANNEL_MEMBERS","removeChannelMembers","REMOVE_CHANNEL_MEMBERS_COMMAND","MessageActionType","sendingMessage","SENDING_MESSAGE","messageSent","MESSAGE_SENT","errorSendingMessage","ERROR_SENDING_MESSAGE","sendMessage","publish","SEND_MESSAGE_COMMAND","SignalActionType","sendingSignal","SENDING_SIGNAL","signalSent","SIGNAL_SENT","errorSendingSignal","ERROR_SENDING_SIGNAL","sendSignal","signal","SEND_SIGNAL_COMMAND","fetchingMessageHistory","FETCHING_MESSAGE_HISTORY","messageHistoryRetrieved","MESSAGE_HISTORY_RETRIEVED","errorFetchingMessageHistory","ERROR_FETCHING_MESSAGE_HISTORY","fetchMessageHistory","history","FETCH_MESSAGE_HISTORY_COMMAND","ChannelDataActionType","removingChannelData","REMOVING_CHANNEL_DATA","channelDataRemoved","CHANNEL_DATA_REMOVED","errorRemovingChannelData","ERROR_REMOVING_CHANNEL_DATA","removeChannelData","removeChannelMetadata","channel","REMOVE_CHANNEL_DATA_COMMAND","fetchingChannelData","FETCHING_CHANNEL_DATA","channelDataRetrieved","CHANNEL_DATA_RETRIEVED","errorFetchingChannelData","ERROR_FETCHING_CHANNEL_DATA","fetchChannelData","getChannelMetadata","FETCH_CHANNEL_DATA_COMMAND","fetchingAllChannelData","FETCHING_ALL_CHANNEL_DATA","allChannelDataRetrieved","ALL_CHANNEL_DATA_RETRIEVED","errorFetchingAllChannelData","ERROR_FETCHING_ALL_CHANNEL_DATA","fetchAllChannelData","getAllChannelMetadata","FETCH_ALL_CHANNEL_DATA_COMMAND","settingChannelData","SETTING_CHANNEL_DATA","channelDataSet","CHANNEL_DATA_SET","errorSettingChannelData","ERROR_SETTING_CHANNEL_DATA","setChannelData","setChannelMetadata","SET_CHANNEL_DATA_COMMAND","UserDataActionType","removingUserData","REMOVING_USER_DATA","UserDataRemoved","USER_DATA_REMOVED","errorRemovingUserData","ERROR_REMOVING_USER_DATA","removeUserData","removeUUIDMetadata","uuid","REMOVE_USER_DATA_COMMAND","fetchingUserData","FETCHING_USER_DATA","UserDataRetrieved","USER_DATA_RETRIEVED","errorFetchingUserData","ERROR_FETCHING_USER_DATA","fetchUserData","getUUIDMetadata","FETCH_USER_DATA_COMMAND","fetchingAllUserData","FETCHING_ALL_USER_DATA","allUserDataRetrieved","ALL_USER_DATA_RETRIEVED","errorFetchingAllUserData","ERROR_FETCHING_ALL_USER_DATA","fetchAllUserData","getAllUUIDMetadata","FETCH_ALL_USER_DATA_COMMAND","settingUserData","SETTING_USER_DATA","UserDataSet","USER_DATA_SET","errorSettingUserData","ERROR_SETTING_USER_DATA","setUserData","setUUIDMetadata","SET_USER_DATA_COMMAND","PresenceActionType","fetchingHereNow","FETCHING_HERE_NOW","hereNowRetrieved","HERE_NOW_RETRIEVED","errorFetchingHereNow","ERROR_FETCHING_HERE_NOW","fetchHereNow","hereNow","includeUUIDs","includeState","HERE_NOW_COMMAND","fetchingPresenceState","FETCHING_PRESENCE_STATE","presenceStateRetrieved","PRESENCE_STATE_RETRIEVED","errorFetchingPresenceState","ERROR_FETCHING_PRESENCE_STATE","fetchPresenceState","getState","PRESENCE_STATE_COMMAND","USER_DATA_SET_EVENT","USER_DATA_REMOVED_EVENT","createUserDataListener","message","event","CHANNEL_DATA_SET_EVENT","CHANNEL_DATA_REMOVED_EVENT","createChannelDataListener","membershipSetEventRecieved","MEMBERSHIP_SET_EVENT","membershipRemovedEventRecieved","MEMBERSHIP_REMOVED_EVENT","createMembershipListener","messageReceived","MESSAGE_RECEIVED","createMessageListener","PresenceCategory","userJoin","JOIN_EVENT","userLeave","LEAVE_EVENT","userTimeout","TIMEOUT_EVENT","userStateChange","STATE_CHANGE_EVENT","createPresenceListener","presence","JOIN","LEAVE","TIMEOUT","STATE_CHANGE","signalReceived","SIGNAL_RECEIVED","createSignalListener","ErrorStatusCategory","ErrorStatusActionType","networkIssues","NETWORK_ISSUES_EVENT","accessDenied","ACCESS_DENIED_EVENT","malformedResponse","MALFORMED_RESPONSE_EVENT","badRequest","BAD_REQUEST_EVENT","decryptionError","DECRYPTION_ERROR_EVENT","timeoutConnection","TIMEOUT_CONNECTION_EVENT","requestMessageCountExceeded","REQUEST_MESSAGE_COUNT_EXCEED_EVENT","unknown","UNKNOWN_EVENT","createErrorStatusListener","category","PN_ACCES_DENIED_CATEGORY","PN_MALFORMED_RESPONSE_CATEGORY","PN_BAD_REQUEST_CATEGORY","PN_DECRYPTION_ERROR_CATEGORY","PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY","PN_UNKNOWN_CATEGORY","NetworkStatusActionType","NetworkStatusCategory","networkUp","NETWORK_UP_EVENT","networkDown","NETWORK_DOWN_EVENT","createNetworkStatusListener","PN_NETWORK_UP_CATEGORY","PN_NETWORK_DOWN_CATEGORY","PN_RECONNECTED_CATEGORY","PN_CONNECTED_CATEGORY","PN_TIMEOUT_CATEGORY","SubscriptionStatusActionType","SubscriptionStatusCategory","reconnected","RECONNECTED_EVENT","connected","CONNECTED_EVENT","createSubscriptionStatusListener","combineListeners","listeners","Object","assign","mergeListenersByType","result","incomingListeners","forEach","listener","allowedListeners","listenerType","undefined","push","entries","listenersOfType","length","createCombinedListener","currentListener","createPubNubListener","createInitialState","byId","state","newState","results","messages","map","m","entry","timetoken","createMessageReducer","createSignalReducer","totalOccupancy","channels","keys","userJoined","occupants","filter","occupant","occupancy","name","userLeft","createPresenceReducer","createNetworkStatusReducer","initializer","initialState","isConnected","Error","networkStatusReducer","data","id","item","UserDataSetEventReceived","UserDataRemovedEventReceived","membersRetrieved","i","currentMember","createUserDataReducer","uuids","createUsersListReducer","channelDataSetEventReceived","channelDataRemovedEventReceived","membershipRetrieved","currentMembership","createChannelDataReducer","channelIds","createChannelsListReducer","uuidRemovedFromChannel","membership","uuidMembershipUpdatedOnChannel","clonedUUID","exists","custom","membershipResult","memberships","complete","createMembershipReducer","channelMembershipRemoveEventRecieved","channelMembershipSetEventRecieved","clonedChannel","channelMembersResult","createChannelMembersReducer"],"mappings":"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"}
{"ast":null,"code":"import { setMemberships } from \"pubnub-redux\";\nimport { focusOnConversation } from \"features/currentConversation/currentConversationModel\";\n/**\n * Join a conversation.\n * The membership in the conversation will be stored.\n * The channel for the converstation will be subscribed to to receive messages.\n * The new conversation will be made the selected conversation\n */\n\nexport const joinConversation = (userId, conversationId) => {\n  return (dispatch, getState, context) => {\n    return dispatch(setMemberships({\n      uuid: userId,\n      channels: [{\n        id: conversationId\n      }]\n    })).then(() => {\n      context.pubnub.api.subscribe({\n        channels: [conversationId],\n        withPresence: true\n      });\n      dispatch(focusOnConversation(conversationId));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/joinedConversations/joinConversationCommand.ts"],"names":["setMemberships","focusOnConversation","joinConversation","userId","conversationId","dispatch","getState","context","uuid","channels","id","then","pubnub","api","subscribe","withPresence"],"mappings":"AACA,SAASA,cAAT,QAA+B,cAA/B;AACA,SAASC,mBAAT,QAAoC,uDAApC;AAEA;;;;;;;AAMA,OAAO,MAAMC,gBAAgB,GAAG,CAC9BC,MAD8B,EAE9BC,cAF8B,KAGC;AAC/B,SAAO,CAACC,QAAD,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;AACtC,WAAOF,QAAQ,CACbL,cAAc,CAAC;AACbQ,MAAAA,IAAI,EAAEL,MADO;AAEbM,MAAAA,QAAQ,EAAE,CAAC;AAAEC,QAAAA,EAAE,EAAEN;AAAN,OAAD;AAFG,KAAD,CADD,CAAR,CAKLO,IALK,CAKA,MAAM;AACXJ,MAAAA,OAAO,CAACK,MAAR,CAAeC,GAAf,CAAmBC,SAAnB,CAA6B;AAC3BL,QAAAA,QAAQ,EAAE,CAACL,cAAD,CADiB;AAE3BW,QAAAA,YAAY,EAAE;AAFa,OAA7B;AAIAV,MAAAA,QAAQ,CAACJ,mBAAmB,CAACG,cAAD,CAApB,CAAR;AACD,KAXM,CAAP;AAYD,GAbD;AAcD,CAlBM","sourcesContent":["import { ThunkAction } from \"main/storeTypes\";\nimport { setMemberships } from \"pubnub-redux\";\nimport { focusOnConversation } from \"features/currentConversation/currentConversationModel\";\n\n/**\n * Join a conversation.\n * The membership in the conversation will be stored.\n * The channel for the converstation will be subscribed to to receive messages.\n * The new conversation will be made the selected conversation\n */\nexport const joinConversation = (\n  userId: string,\n  conversationId: string\n): ThunkAction<Promise<void>> => {\n  return (dispatch, getState, context) => {\n    return dispatch(\n      setMemberships({\n        uuid: userId,\n        channels: [{ id: conversationId }],\n      })\n    ).then(() => {\n      context.pubnub.api.subscribe({\n        channels: [conversationId],\n        withPresence: true,\n      });\n      dispatch(focusOnConversation(conversationId));\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
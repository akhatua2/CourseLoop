{"ast":null,"code":"var _jsxFileName = \"/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/emoji/EmojiSuggestion/EmojiSuggestion.tsx\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport React, { useRef, useContext } from \"react\";\nimport useClickOutside from \"foundations/hooks/useClickOutside\";\nimport { emojiIndex } from \"emoji-mart\";\nimport { Popup, Suggestions, Heading, EmojiSearchTerm, Results, Result, Emoji, Colons } from \"./EmojiSuggestion.style\";\nimport { ThemeContext } from \"styled-components\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\n\nconst getEmojisFromEmojiSearchTerm = emojiSearchTerm => emojiIndex.search(emojiSearchTerm);\n\nconst getEmojiSearchTerm = content => {\n  // I don't think this is cross browser - haven't for a better way to detect newlines yet\n  let search = \"\";\n  const colons = content.match(/:([a-z_]+)(:)?/);\n\n  if (colons) {\n    if (colons[2] !== undefined) {\n      // closing colon is present\n      const match = emojiIndex.emojis[colons[1]];\n\n      if (match && \"native\" in match) {\n        content = content.replace(colons[0], match.native);\n        search = \"\";\n      } else {\n        const results = emojiIndex.search(colons[1]);\n\n        if (results[0] && \"native\" in results[0]) {\n          content = content.replace(colons[0], results[0].native);\n        }\n\n        search = \"\";\n      }\n    } else if (colons[1].length > 1) {\n      // colons aren't closed, use the search\n      search = colons[1];\n    } else if (colons[1]) {\n      search = \"\";\n    }\n  }\n\n  return search;\n};\n\nconst EmojiSuggestion = ({\n  value,\n  onSelection\n}) => {\n  const suggestions = useRef(null);\n  const theme = useContext(ThemeContext);\n  const isMedium = useMediaQuery(theme.mediaQueries.medium);\n\n  const replaceEmoji = (search, emoji) => {\n    if (\"native\" in emoji) {\n      const txt = value.replace(`:${search}`, emoji.native);\n      onSelection(txt);\n    }\n  };\n\n  let displayed = false;\n  const emojiSearchTerm = getEmojiSearchTerm(value);\n  const emojis = getEmojisFromEmojiSearchTerm(emojiSearchTerm);\n\n  if (emojiSearchTerm !== \"\" && emojis.length > 0) {\n    displayed = true;\n  } else {\n    displayed = false;\n  }\n\n  useClickOutside([suggestions], () => {\n    displayed = false;\n  });\n  return /*#__PURE__*/React.createElement(Popup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, displayed && /*#__PURE__*/React.createElement(Suggestions, {\n    ref: suggestions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \"Suggestions for \", /*#__PURE__*/React.createElement(EmojiSearchTerm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 29\n    }\n  }, emojiSearchTerm)), /*#__PURE__*/React.createElement(Results, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, emojis.slice(0, isMedium ? 35 : 7).map(emoji => /*#__PURE__*/React.createElement(Result, {\n    key: emoji.id,\n    onClick: () => replaceEmoji(emojiSearchTerm, emoji),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Emoji, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, \"native\" in emoji && emoji.native), /*#__PURE__*/React.createElement(Colons, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, emoji.colons))))));\n};\n\nexport { EmojiSuggestion };","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/emoji/EmojiSuggestion/EmojiSuggestion.tsx"],"names":["React","useRef","useContext","useClickOutside","emojiIndex","Popup","Suggestions","Heading","EmojiSearchTerm","Results","Result","Emoji","Colons","ThemeContext","useMediaQuery","getEmojisFromEmojiSearchTerm","emojiSearchTerm","search","getEmojiSearchTerm","content","colons","match","undefined","emojis","replace","native","results","length","EmojiSuggestion","value","onSelection","suggestions","theme","isMedium","mediaQueries","medium","replaceEmoji","emoji","txt","displayed","slice","map","id"],"mappings":"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","sourcesContent":["import \"emoji-mart/css/emoji-mart.css\";\nimport React, { useRef, useContext } from \"react\";\nimport useClickOutside from \"foundations/hooks/useClickOutside\";\nimport { emojiIndex, EmojiData } from \"emoji-mart\";\nimport {\n  Popup,\n  Suggestions,\n  Heading,\n  EmojiSearchTerm,\n  Results,\n  Result,\n  Emoji,\n  Colons\n} from \"./EmojiSuggestion.style\";\nimport { ThemeContext } from \"styled-components\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\n\ntype EmojiInputProps = {\n  value: string;\n  onSelection(contentWithEmoji: string): any;\n};\n\nconst getEmojisFromEmojiSearchTerm = (emojiSearchTerm: string) =>\n  (emojiIndex.search(emojiSearchTerm) as any) as EmojiData[];\n\nconst getEmojiSearchTerm = (content: string) => {\n  // I don't think this is cross browser - haven't for a better way to detect newlines yet\n  let search = \"\";\n  const colons = content.match(/:([a-z_]+)(:)?/);\n  if (colons) {\n    if (colons[2] !== undefined) {\n      // closing colon is present\n      const match = emojiIndex.emojis[colons[1]];\n      if (match && \"native\" in match) {\n        content = content.replace(colons[0], match.native);\n        search = \"\";\n      } else {\n        const results = (emojiIndex.search(colons[1]) as any) as EmojiData[];\n        if (results[0] && \"native\" in results[0]) {\n          content = content.replace(colons[0], (results[0] as any).native);\n        }\n        search = \"\";\n      }\n    } else if (colons[1].length > 1) {\n      // colons aren't closed, use the search\n      search = colons[1];\n    } else if (colons[1]) {\n      search = \"\";\n    }\n  }\n  return search;\n};\n\nconst EmojiSuggestion = ({ value, onSelection }: EmojiInputProps) => {\n  const suggestions = useRef<HTMLDivElement>(null);\n  const theme = useContext(ThemeContext);\n  const isMedium = useMediaQuery(theme.mediaQueries.medium);\n\n  const replaceEmoji = (search: string, emoji: EmojiData) => {\n    if (\"native\" in emoji) {\n      const txt = value.replace(`:${search}`, emoji.native);\n      onSelection(txt);\n    }\n  };\n\n  let displayed = false;\n\n  const emojiSearchTerm = getEmojiSearchTerm(value);\n  const emojis = getEmojisFromEmojiSearchTerm(emojiSearchTerm);\n\n  if (emojiSearchTerm !== \"\" && emojis.length > 0) {\n    displayed = true;\n  } else {\n    displayed = false;\n  }\n  useClickOutside([suggestions], () => {\n    displayed = false;\n  });\n\n  return (\n    <Popup>\n      {displayed && (\n        <Suggestions ref={suggestions}>\n          <Heading>\n            Suggestions for <EmojiSearchTerm>{emojiSearchTerm}</EmojiSearchTerm>\n          </Heading>\n          <Results>\n            {emojis.slice(0, isMedium ? 35 : 7).map(emoji => (\n              <Result\n                key={emoji.id}\n                onClick={() => replaceEmoji(emojiSearchTerm, emoji)}\n              >\n                <Emoji>{\"native\" in emoji && emoji.native}</Emoji>\n                <Colons>{emoji.colons}</Colons>\n              </Result>\n            ))}\n          </Results>\n        </Suggestions>\n      )}\n    </Popup>\n  );\n};\n\nexport { EmojiSuggestion };\n"]},"metadata":{},"sourceType":"module"}
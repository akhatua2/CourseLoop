{"ast":null,"code":"var _jsxFileName = \"/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/messages/TextMessageDisplay/TextMessageDisplay.tsx\";\nimport React from \"react\";\nimport { Content, Attachments } from \"./TextMessageDisplay.style\";\nimport { AttachmentDisplay } from \"../AttachmentDisplay\";\nimport emojiRegex from \"emoji-regex\";\n\n// make the message larger if there are only emoji and 3 or less emoji\nconst isEmphasized = messageContent => {\n  const trimmed = messageContent.trim();\n\n  if (trimmed.length <= 15) {\n    const emoji = messageContent.match(emojiRegex());\n    return emoji ? emoji.length <= 3 && emoji.join(\"\") === trimmed : false;\n  } else {\n    return false;\n  }\n};\n/**\n * Display a TextMessage such as it would appear in a list of messages\n */\n\n\nexport const TextMessageDisplay = ({\n  message,\n  parentKey\n}) => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Content, {\n    emphasize: isEmphasized(message.text),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, message.text), message.attachments && /*#__PURE__*/React.createElement(Attachments, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, message.attachments.map((attachment, index) => /*#__PURE__*/React.createElement(AttachmentDisplay, {\n    key: `${parentKey}-attachment-${index}`,\n    attachment: attachment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/messages/TextMessageDisplay/TextMessageDisplay.tsx"],"names":["React","Content","Attachments","AttachmentDisplay","emojiRegex","isEmphasized","messageContent","trimmed","trim","length","emoji","match","join","TextMessageDisplay","message","parentKey","text","attachments","map","attachment","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,4BAArC;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AAEA,OAAOC,UAAP,MAAuB,aAAvB;;AAOA;AACA,MAAMC,YAAY,GAAIC,cAAD,IAAqC;AACxD,QAAMC,OAAO,GAAGD,cAAc,CAACE,IAAf,EAAhB;;AACA,MAAID,OAAO,CAACE,MAAR,IAAkB,EAAtB,EAA0B;AACxB,UAAMC,KAAK,GAAGJ,cAAc,CAACK,KAAf,CAAqBP,UAAU,EAA/B,CAAd;AACA,WAAOM,KAAK,GAAGA,KAAK,CAACD,MAAN,IAAgB,CAAhB,IAAqBC,KAAK,CAACE,IAAN,CAAW,EAAX,MAAmBL,OAA3C,GAAqD,KAAjE;AACD,GAHD,MAGO;AACL,WAAO,KAAP;AACD;AACF,CARD;AAUA;;;;;AAGA,OAAO,MAAMM,kBAAkB,GAAG,CAAC;AACjCC,EAAAA,OADiC;AAEjCC,EAAAA;AAFiC,CAAD,KAGV;AACtB,sBACE,uDACE,oBAAC,OAAD;AAAS,IAAA,SAAS,EAAEV,YAAY,CAACS,OAAO,CAACE,IAAT,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiDF,OAAO,CAACE,IAAzD,CADF,EAEGF,OAAO,CAACG,WAAR,iBACC,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,OAAO,CAACG,WAAR,CAAoBC,GAApB,CAAwB,CAACC,UAAD,EAAaC,KAAb,kBACvB,oBAAC,iBAAD;AACE,IAAA,GAAG,EAAG,GAAEL,SAAU,eAAcK,KAAM,EADxC;AAEE,IAAA,UAAU,EAAED,UAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CAHJ,CADF;AAeD,CAnBM","sourcesContent":["import React from \"react\";\nimport { Content, Attachments } from \"./TextMessageDisplay.style\";\nimport { AttachmentDisplay } from \"../AttachmentDisplay\";\nimport { TextMessage } from \"../messageModel\";\nimport emojiRegex from \"emoji-regex\";\n\ntype TextMessageProps = {\n  message: TextMessage;\n  parentKey: string;\n};\n\n// make the message larger if there are only emoji and 3 or less emoji\nconst isEmphasized = (messageContent: string): boolean => {\n  const trimmed = messageContent.trim();\n  if (trimmed.length <= 15) {\n    const emoji = messageContent.match(emojiRegex());\n    return emoji ? emoji.length <= 3 && emoji.join(\"\") === trimmed : false;\n  } else {\n    return false;\n  }\n};\n\n/**\n * Display a TextMessage such as it would appear in a list of messages\n */\nexport const TextMessageDisplay = ({\n  message,\n  parentKey,\n}: TextMessageProps) => {\n  return (\n    <>\n      <Content emphasize={isEmphasized(message.text)}>{message.text}</Content>\n      {message.attachments && (\n        <Attachments>\n          {message.attachments.map((attachment, index) => (\n            <AttachmentDisplay\n              key={`${parentKey}-attachment-${index}`}\n              attachment={attachment}\n            />\n          ))}\n        </Attachments>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
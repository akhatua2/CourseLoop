{"ast":null,"code":"var _jsxFileName = \"/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/joinedConversations/JoinConversationDialog/JoinConversationDialog.tsx\";\nimport React, { useContext } from \"react\";\nimport { getViewStates } from \"features/layout/Selectors\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport { ConversationDescription } from \"../ConversationDescription\";\nimport { getConversationsByUserId } from \"../joinedConversationModel\";\nimport { CrossIcon } from \"foundations/components/icons/CrossIcon\";\nimport { ScrollView, CloseButton, Title, Header } from \"./JoinConversationDialog.style\";\nimport { Overlay, Modal, getAnimatedModalVariants } from \"foundations/components/Modal\";\nimport { createSelector } from \"reselect\";\nimport { getAllConversations } from \"features/conversations/conversationModel\";\nimport { joinConversation } from \"../joinConversationCommand\";\nimport { joinConversationViewHidden } from \"features/layout/LayoutActions\";\nimport { ThemeContext } from \"styled-components\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\"; // Fetch all conversations and remove the ones we're already a member of\n\nconst getJoinableConversations = createSelector([getAllConversations, getLoggedInUserId, getConversationsByUserId], (conversations, userId, joinedConversations) => {\n  return conversations.filter(conversation => {\n    return !joinedConversations[userId].map(conv => conv.id).includes(conversation.id);\n  });\n});\n/**\n * Present list to the user of conversations that they could join, but have not.\n * Allow the user to select the conversation to join or back out.\n *\n * TODO: This renders unconditionally as display:none so it will fetch the\n * list of conversations to join when the UI is rendered even if the user has not\n * opened the dialog.\n */\n\nconst JoinConversationDialog = () => {\n  const conversations = useSelector(getJoinableConversations);\n  const views = useSelector(getViewStates);\n  const currentUserId = useSelector(getLoggedInUserId);\n  const dispatch = useDispatch();\n  const theme = useContext(ThemeContext);\n  const isMedium = useMediaQuery(theme.mediaQueries.medium);\n  return /*#__PURE__*/React.createElement(Overlay, {\n    displayed: views.JoinConversation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    animate: views.JoinConversation ? \"open\" : \"closed\",\n    variants: getAnimatedModalVariants(isMedium),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, \"Join a Conversation\"), /*#__PURE__*/React.createElement(CloseButton, {\n    onClick: () => {\n      dispatch(joinConversationViewHidden());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CrossIcon, {\n    color: theme.colors.normalText,\n    title: \"close\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, conversations.map(conversation => /*#__PURE__*/React.createElement(ConversationDescription, {\n    key: `conversationDescription-${conversation.id}`,\n    onClick: () => {\n      const conversationId = conversation.id;\n      dispatch(joinConversation(currentUserId, conversationId));\n      dispatch(joinConversationViewHidden());\n    },\n    conversation: conversation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport { JoinConversationDialog };","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/joinedConversations/JoinConversationDialog/JoinConversationDialog.tsx"],"names":["React","useContext","getViewStates","useSelector","useDispatch","getLoggedInUserId","ConversationDescription","getConversationsByUserId","CrossIcon","ScrollView","CloseButton","Title","Header","Overlay","Modal","getAnimatedModalVariants","createSelector","getAllConversations","joinConversation","joinConversationViewHidden","ThemeContext","useMediaQuery","getJoinableConversations","conversations","userId","joinedConversations","filter","conversation","map","conv","id","includes","JoinConversationDialog","views","currentUserId","dispatch","theme","isMedium","mediaQueries","medium","JoinConversation","colors","normalText","conversationId"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { getViewStates } from \"features/layout/Selectors\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport {\n  ConversationDescription,\n  ConversationDescriptionFragment\n} from \"../ConversationDescription\";\nimport {\n  getConversationsByUserId,\n  MembershipHash\n} from \"../joinedConversationModel\";\nimport { CrossIcon } from \"foundations/components/icons/CrossIcon\";\nimport {\n  ScrollView,\n  CloseButton,\n  Title,\n  Header\n} from \"./JoinConversationDialog.style\";\nimport {\n  Overlay,\n  Modal,\n  getAnimatedModalVariants\n} from \"foundations/components/Modal\";\nimport { createSelector } from \"reselect\";\nimport {\n  getAllConversations,\n  Conversation\n} from \"features/conversations/conversationModel\";\nimport { joinConversation } from \"../joinConversationCommand\";\nimport { joinConversationViewHidden } from \"features/layout/LayoutActions\";\nimport { ThemeContext } from \"styled-components\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\n\n// Fetch all conversations and remove the ones we're already a member of\nconst getJoinableConversations = createSelector(\n  [getAllConversations, getLoggedInUserId, getConversationsByUserId],\n  (\n    conversations: Conversation[],\n    userId: string,\n    joinedConversations: MembershipHash\n  ): ConversationDescriptionFragment[] => {\n    return conversations.filter(conversation => {\n      return !joinedConversations[userId]\n        .map(conv => conv.id)\n        .includes(conversation.id);\n    });\n  }\n);\n\n/**\n * Present list to the user of conversations that they could join, but have not.\n * Allow the user to select the conversation to join or back out.\n *\n * TODO: This renders unconditionally as display:none so it will fetch the\n * list of conversations to join when the UI is rendered even if the user has not\n * opened the dialog.\n */\nconst JoinConversationDialog = () => {\n  const conversations: ConversationDescriptionFragment[] = useSelector(\n    getJoinableConversations\n  );\n  const views = useSelector(getViewStates);\n  const currentUserId = useSelector(getLoggedInUserId);\n  const dispatch = useDispatch();\n  const theme = useContext(ThemeContext);\n  const isMedium = useMediaQuery(theme.mediaQueries.medium);\n\n  return (\n    <Overlay displayed={views.JoinConversation}>\n      <Modal\n        animate={views.JoinConversation ? \"open\" : \"closed\"}\n        variants={getAnimatedModalVariants(isMedium)}\n      >\n        <Header>\n          <Title>Join a Conversation</Title>\n          <CloseButton\n            onClick={() => {\n              dispatch(joinConversationViewHidden());\n            }}\n          >\n            <CrossIcon color={theme.colors.normalText} title=\"close\" />\n          </CloseButton>\n        </Header>\n        <ScrollView>\n          {conversations.map(conversation => (\n            <ConversationDescription\n              key={`conversationDescription-${conversation.id}`}\n              onClick={() => {\n                const conversationId = conversation.id;\n                dispatch(joinConversation(currentUserId, conversationId));\n                dispatch(joinConversationViewHidden());\n              }}\n              conversation={conversation}\n            />\n          ))}\n        </ScrollView>\n      </Modal>\n    </Overlay>\n  );\n};\n\nexport { JoinConversationDialog };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/sidrajaram/Desktop/chatcat/typescript-ref-app-team-chat/src/features/messages/MessageDisplay/MessageDisplay.tsx\";\nimport React from \"react\";\nimport invariant from \"invariant\";\nimport { TextMessageDisplay } from \"features/messages/TextMessageDisplay\";\nimport { GiphyMessageDisplay } from \"features/messages/GiphyMessageDisplay\";\nimport { MessageType } from \"features/messages/messageModel\";\n\n/**\n * Display a Message based on its type\n */\nexport const MessageDisplay = ({\n  message,\n  parentKey\n}) => {\n  switch (message.type) {\n    case MessageType.Text:\n      return /*#__PURE__*/React.createElement(TextMessageDisplay, {\n        message: message,\n        parentKey: parentKey,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 9\n        }\n      });\n\n    case MessageType.Giphy:\n      return /*#__PURE__*/React.createElement(GiphyMessageDisplay, {\n        message: message,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 14\n        }\n      });\n    // <== Add additional message types here.\n    // Don't show anything for an unrecognized message type\n\n    default:\n      invariant(false, `No component available for displaying message of type \"${message.type}\"`);\n  }\n};","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/chatcat/typescript-ref-app-team-chat/src/features/messages/MessageDisplay/MessageDisplay.tsx"],"names":["React","invariant","TextMessageDisplay","GiphyMessageDisplay","MessageType","MessageDisplay","message","parentKey","type","Text","Giphy"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAASC,kBAAT,QAAmC,sCAAnC;AACA,SAASC,mBAAT,QAAoC,uCAApC;AACA,SAASC,WAAT,QAAwC,gCAAxC;;AAQA;;;AAGA,OAAO,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAA0C;AACtE,UAAQD,OAAO,CAACE,IAAhB;AACE,SAAKJ,WAAW,CAACK,IAAjB;AACE,0BACE,oBAAC,kBAAD;AACE,QAAA,OAAO,EAAEH,OADX;AAEE,QAAA,SAAS,EAAEC,SAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAOF,SAAKH,WAAW,CAACM,KAAjB;AACE,0BAAO,oBAAC,mBAAD;AAAqB,QAAA,OAAO,EAAEJ,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAEF;AAEA;;AACA;AACEL,MAAAA,SAAS,CACP,KADO,EAEN,0DACEK,OAAD,CAAyBE,IAC1B,GAJM,CAAT;AAhBJ;AAuBD,CAxBM","sourcesContent":["import React from \"react\";\nimport invariant from \"invariant\";\nimport { TextMessageDisplay } from \"features/messages/TextMessageDisplay\";\nimport { GiphyMessageDisplay } from \"features/messages/GiphyMessageDisplay\";\nimport { MessageType, AppMessage } from \"features/messages/messageModel\";\nimport { BaseMessage } from \"sharedTypes/messageModel\";\n\ntype MessageProps = {\n  message: AppMessage;\n  parentKey: string;\n};\n\n/**\n * Display a Message based on its type\n */\nexport const MessageDisplay = ({ message, parentKey }: MessageProps) => {\n  switch (message.type) {\n    case MessageType.Text:\n      return (\n        <TextMessageDisplay\n          message={message}\n          parentKey={parentKey}\n        ></TextMessageDisplay>\n      );\n\n    case MessageType.Giphy:\n      return <GiphyMessageDisplay message={message}></GiphyMessageDisplay>;\n\n    // <== Add additional message types here.\n\n    // Don't show anything for an unrecognized message type\n    default:\n      invariant(\n        false,\n        `No component available for displaying message of type \"${\n          (message as BaseMessage).type\n        }\"`\n      );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
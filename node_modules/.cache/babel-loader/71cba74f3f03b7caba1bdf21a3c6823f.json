{"ast":null,"code":"var _jsxFileName = \"/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/joinedConversations/ConversationItem/ConversationItem.tsx\";\nimport React, { useContext } from \"react\";\nimport { Wrapper, Body, ConversationIcon, Name, MessageCount, IconWrapper } from \"./ConversationItem.style\";\nimport { LeaveIcon } from \"foundations/components/icons/LeaveIcon\";\nimport useHover from \"foundations/hooks/useHover\";\nimport { DEFAULT_CONVERSATION } from \"features/currentConversation/currentConversationModel\";\nimport { ThemeContext } from \"styled-components\";\nimport getUniqueColor from \"foundations/utilities/getUniqueColor\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\n\n/**\n * Show a single joined conversation\n *\n * Similiar to ConversationDescription but with different style and more functionality\n */\nconst ConversationItem = ({\n  selected,\n  id,\n  name,\n  onClick,\n  onLeave,\n  unreadMessageCount\n}) => {\n  const [isHovering, hoverProps] = useHover({\n    mouseEnterDelayMS: 0\n  });\n  const canLeave = id !== DEFAULT_CONVERSATION;\n  const theme = useContext(ThemeContext);\n  const isTouch = useMediaQuery(theme.mediaQueries.touch);\n  const color = getUniqueColor(name, theme.colors.avatars);\n  return /*#__PURE__*/React.createElement(Wrapper, Object.assign({}, hoverProps, {\n    selected: selected,\n    emphasized: unreadMessageCount > 0,\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ConversationIcon, {\n    color: color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, \"#\"), /*#__PURE__*/React.createElement(Name, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, name)), (isHovering || isTouch) && canLeave ? /*#__PURE__*/React.createElement(IconWrapper, {\n    onClick: e => {\n      e.stopPropagation();\n      onLeave();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LeaveIcon, {\n    title: \"Leave Conversation\",\n    selected: selected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  })) : unreadMessageCount > 0 && /*#__PURE__*/React.createElement(MessageCount, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, unreadMessageCount));\n};\n\nexport { ConversationItem };","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/joinedConversations/ConversationItem/ConversationItem.tsx"],"names":["React","useContext","Wrapper","Body","ConversationIcon","Name","MessageCount","IconWrapper","LeaveIcon","useHover","DEFAULT_CONVERSATION","ThemeContext","getUniqueColor","useMediaQuery","ConversationItem","selected","id","name","onClick","onLeave","unreadMessageCount","isHovering","hoverProps","mouseEnterDelayMS","canLeave","theme","isTouch","mediaQueries","touch","color","colors","avatars","e","stopPropagation"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SACEC,OADF,EAEEC,IAFF,EAGEC,gBAHF,EAIEC,IAJF,EAKEC,YALF,EAMEC,WANF,QAOO,0BAPP;AAQA,SAASC,SAAT,QAA0B,wCAA1B;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,oBAAT,QAAqC,uDAArC;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,SAASC,aAAT,QAA8B,iCAA9B;;AAWA;;;;;AAKA,MAAMC,gBAAgB,GAAG,CAAC;AACxBC,EAAAA,QADwB;AAExBC,EAAAA,EAFwB;AAGxBC,EAAAA,IAHwB;AAIxBC,EAAAA,OAJwB;AAKxBC,EAAAA,OALwB;AAMxBC,EAAAA;AANwB,CAAD,KAOI;AAC3B,QAAM,CAACC,UAAD,EAAaC,UAAb,IAA2Bb,QAAQ,CAAC;AAAEc,IAAAA,iBAAiB,EAAE;AAArB,GAAD,CAAzC;AACA,QAAMC,QAAiB,GAAGR,EAAE,KAAKN,oBAAjC;AACA,QAAMe,KAAK,GAAGxB,UAAU,CAACU,YAAD,CAAxB;AACA,QAAMe,OAAO,GAAGb,aAAa,CAACY,KAAK,CAACE,YAAN,CAAmBC,KAApB,CAA7B;AACA,QAAMC,KAAK,GAAGjB,cAAc,CAC1BK,IAD0B,EAEzBQ,KAAK,CAACK,MAAN,CAAaC,OAFY,CAA5B;AAIA,sBACE,oBAAC,OAAD,oBACMT,UADN;AAEE,IAAA,QAAQ,EAAEP,QAFZ;AAGE,IAAA,UAAU,EAAEK,kBAAkB,GAAG,CAHnC;AAIE,IAAA,OAAO,EAAEF,OAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAME,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEW,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,eAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOZ,IAAP,CAFF,CANF,EAUG,CAACI,UAAU,IAAIK,OAAf,KAA2BF,QAA3B,gBACC,oBAAC,WAAD;AACE,IAAA,OAAO,EAAEQ,CAAC,IAAI;AACZA,MAAAA,CAAC,CAACC,eAAF;AACAd,MAAAA,OAAO;AACR,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,oBAAjB;AAAsC,IAAA,QAAQ,EAAEJ,QAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADD,GAUCK,kBAAkB,GAAG,CAArB,iBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAeA,kBAAf,CArBN,CADF;AA2BD,CA3CD;;AA6CA,SAASN,gBAAT","sourcesContent":["import React, { useContext } from \"react\";\nimport {\n  Wrapper,\n  Body,\n  ConversationIcon,\n  Name,\n  MessageCount,\n  IconWrapper\n} from \"./ConversationItem.style\";\nimport { LeaveIcon } from \"foundations/components/icons/LeaveIcon\";\nimport useHover from \"foundations/hooks/useHover\";\nimport { DEFAULT_CONVERSATION } from \"features/currentConversation/currentConversationModel\";\nimport { ThemeContext } from \"styled-components\";\nimport getUniqueColor from \"foundations/utilities/getUniqueColor\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\n\ninterface ConversationItemProps {\n  selected: boolean;\n  id: string;\n  name: string;\n  unreadMessageCount: number;\n  onClick: () => void;\n  onLeave: () => void;\n}\n\n/**\n * Show a single joined conversation\n *\n * Similiar to ConversationDescription but with different style and more functionality\n */\nconst ConversationItem = ({\n  selected,\n  id,\n  name,\n  onClick,\n  onLeave,\n  unreadMessageCount\n}: ConversationItemProps) => {\n  const [isHovering, hoverProps] = useHover({ mouseEnterDelayMS: 0 });\n  const canLeave: boolean = id !== DEFAULT_CONVERSATION;\n  const theme = useContext(ThemeContext);\n  const isTouch = useMediaQuery(theme.mediaQueries.touch);\n  const color = getUniqueColor(\n    name,\n    (theme.colors.avatars as unknown) as string[]\n  );\n  return (\n    <Wrapper\n      {...hoverProps}\n      selected={selected}\n      emphasized={unreadMessageCount > 0}\n      onClick={onClick}\n    >\n      <Body>\n        <ConversationIcon color={color}>#</ConversationIcon>\n        <Name>{name}</Name>\n      </Body>\n      {(isHovering || isTouch) && canLeave ? (\n        <IconWrapper\n          onClick={e => {\n            e.stopPropagation();\n            onLeave();\n          }}\n        >\n          <LeaveIcon title=\"Leave Conversation\" selected={selected} />\n        </IconWrapper>\n      ) : (\n        unreadMessageCount > 0 && (\n          <MessageCount>{unreadMessageCount}</MessageCount>\n        )\n      )}\n    </Wrapper>\n  );\n};\n\nexport { ConversationItem };\n"]},"metadata":{},"sourceType":"module"}
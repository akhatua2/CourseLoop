{"ast":null,"code":"import { useEffect, useCallback } from \"react\";\n\nconst isRefArray = r => {\n  return \"length\" in r;\n};\n\nconst isTarget = (ref, event) => {\n  return ref && ref.current && ref.current.contains(event.target);\n};\n\nconst trueForAny = (array, condition) => {\n  return array.reduce((conditionAlreadyMet, value) => {\n    return conditionAlreadyMet || condition(value);\n  }, false);\n};\n\nconst useClickOutside = (ref, onclick) => {\n  const handleClick = useCallback(click => {\n    if (isRefArray(ref)) {\n      if (trueForAny(ref, ref => isTarget(ref, click))) {\n        return;\n      }\n    } else {\n      if (isTarget(ref, click)) {\n        return;\n      }\n    }\n\n    onclick();\n  }, [onclick, ref]);\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClick);\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, [handleClick]);\n  return ref;\n};\n\nexport default useClickOutside;","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/foundations/hooks/useClickOutside.ts"],"names":["useEffect","useCallback","isRefArray","r","isTarget","ref","event","current","contains","target","trueForAny","array","condition","reduce","conditionAlreadyMet","value","useClickOutside","onclick","handleClick","click","document","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,WAApB,QAAkD,OAAlD;;AAEA,MAAMC,UAAU,GACdC,CADiB,IAES;AAC1B,SAAO,YAAYA,CAAnB;AACD,CAJD;;AAMA,MAAMC,QAAQ,GAAG,CAACC,GAAD,EAAsBC,KAAtB,KAA4C;AAC3D,SAAOD,GAAG,IAAIA,GAAG,CAACE,OAAX,IAAsBF,GAAG,CAACE,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAA7B;AACD,CAFD;;AAIA,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAeC,SAAf,KAAsD;AACvE,SAAOD,KAAK,CAACE,MAAN,CAAa,CAACC,mBAAD,EAAsBC,KAAtB,KAAgC;AAClD,WAAOD,mBAAmB,IAAIF,SAAS,CAACG,KAAD,CAAvC;AACD,GAFM,EAEJ,KAFI,CAAP;AAGD,CAJD;;AAMA,MAAMC,eAAe,GAAG,CACtBX,GADsB,EAEtBY,OAFsB,KAGnB;AACH,QAAMC,WAAW,GAAGjB,WAAW,CAC5BkB,KAAD,IAAuB;AACrB,QAAIjB,UAAU,CAACG,GAAD,CAAd,EAAqB;AACnB,UAAIK,UAAU,CAACL,GAAD,EAAOA,GAAD,IAAyBD,QAAQ,CAACC,GAAD,EAAMc,KAAN,CAAvC,CAAd,EAAoE;AAClE;AACD;AACF,KAJD,MAIO;AACL,UAAIf,QAAQ,CAACC,GAAD,EAAMc,KAAN,CAAZ,EAA0B;AACxB;AACD;AACF;;AACDF,IAAAA,OAAO;AACR,GAZ4B,EAa7B,CAACA,OAAD,EAAUZ,GAAV,CAb6B,CAA/B;AAgBAL,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCH,WAAnC;AAEA,WAAO,MAAM;AACXE,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,OAA7B,EAAsCJ,WAAtC;AACD,KAFD;AAGD,GANQ,EAMN,CAACA,WAAD,CANM,CAAT;AAQA,SAAOb,GAAP;AACD,CA7BD;;AA+BA,eAAeW,eAAf","sourcesContent":["import { useEffect, useCallback, RefObject } from \"react\";\n\nconst isRefArray = (\n  r: RefObject<any> | RefObject<any>[]\n): r is RefObject<any>[] => {\n  return \"length\" in r;\n};\n\nconst isTarget = (ref: RefObject<any>, event: MouseEvent) => {\n  return ref && ref.current && ref.current.contains(event.target);\n};\n\nconst trueForAny = (array: any[], condition: (props: any) => boolean) => {\n  return array.reduce((conditionAlreadyMet, value) => {\n    return conditionAlreadyMet || condition(value);\n  }, false);\n};\n\nconst useClickOutside = (\n  ref: RefObject<any> | RefObject<any>[],\n  onclick: () => void\n) => {\n  const handleClick = useCallback(\n    (click: MouseEvent) => {\n      if (isRefArray(ref)) {\n        if (trueForAny(ref, (ref: RefObject<any>) => isTarget(ref, click))) {\n          return;\n        }\n      } else {\n        if (isTarget(ref, click)) {\n          return;\n        }\n      }\n      onclick();\n    },\n    [onclick, ref]\n  );\n\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClick);\n\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, [handleClick]);\n\n  return ref;\n};\n\nexport default useClickOutside;\n"]},"metadata":{},"sourceType":"module"}
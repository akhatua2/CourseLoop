{"ast":null,"code":"var _jsxFileName = \"/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/currentConversation/MessageInput/MessageInput.tsx\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport { getMessageDrafts } from \"features/joinedConversations/DraftsModel\";\nimport { updateMessageDraft } from \"features/joinedConversations/updateMessageDraftCommand\";\nimport { discardMessageDraft } from \"features/joinedConversations/discardMessageDraftCommand\";\nimport { sendMessage } from \"features/messages/sendMessage\";\nimport { sendTypingIndicator } from \"features/typingIndicator/sendTypingIndicator\";\nimport { MessageType } from \"features/messages/messageModel\";\nimport { MessageEditor } from \"features/messages/MessageEditor\";\nimport { getCurrentConversationId } from \"../currentConversationModel\";\nimport { Wrapper } from \"./MessageInput.style\";\nimport { TYPING_INDICATOR_DURATION_SECONDS, TypingIndicatorType } from \"features/typingIndicator/typingIndicatorModel\";\nconst typingIndicators = {};\nconst getConversationMessageDraft = createSelector([getMessageDrafts, getCurrentConversationId], (drafts, conversationId) => {\n  return drafts[conversationId];\n});\n/**\n * Allow editing and sending messages\n */\n\nexport const MessageInput = () => {\n  const conversationId = useSelector(getCurrentConversationId);\n  const userId = useSelector(getLoggedInUserId);\n  const storedDraft = useSelector(getConversationMessageDraft);\n  const defaultDraft = {\n    type: MessageType.Text,\n    senderId: userId,\n    text: \"\"\n  };\n  const message = storedDraft ? storedDraft : defaultDraft;\n  const dispatch = useDispatch();\n\n  const notifyTyping = () => {\n    if (!typingIndicators[conversationId]) {\n      typingIndicators[conversationId] = true;\n      dispatch(sendTypingIndicator(TypingIndicatorType.ShowTypingIndicator)); // allow sending additional typing indicators 1 seconds before display duration ends\n\n      setTimeout(() => {\n        typingIndicators[conversationId] = false;\n      }, (TYPING_INDICATOR_DURATION_SECONDS - 1) * 1000);\n    }\n  };\n\n  const notifyStopTyping = () => {\n    if (typingIndicators[conversationId]) {\n      typingIndicators[conversationId] = false;\n      dispatch(sendTypingIndicator(TypingIndicatorType.HideTypingIndicator));\n    }\n  };\n\n  const send = appMessage => {\n    dispatch(sendMessage(appMessage));\n    dispatch(discardMessageDraft(conversationId));\n    typingIndicators[conversationId] = false;\n  };\n\n  const update = appMessage => {\n    dispatch(updateMessageDraft(conversationId, appMessage));\n\n    if (\"text\" in appMessage) {\n      if (appMessage.text.length > 0) {\n        notifyTyping();\n      } else {\n        notifyStopTyping();\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MessageEditor, {\n    message: message,\n    sendDraft: send,\n    updateDraft: update,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/currentConversation/MessageInput/MessageInput.tsx"],"names":["React","useDispatch","useSelector","createSelector","getLoggedInUserId","getMessageDrafts","updateMessageDraft","discardMessageDraft","sendMessage","sendTypingIndicator","MessageType","MessageEditor","getCurrentConversationId","Wrapper","TYPING_INDICATOR_DURATION_SECONDS","TypingIndicatorType","typingIndicators","getConversationMessageDraft","drafts","conversationId","MessageInput","userId","storedDraft","defaultDraft","type","Text","senderId","text","message","dispatch","notifyTyping","ShowTypingIndicator","setTimeout","notifyStopTyping","HideTypingIndicator","send","appMessage","update","length"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport { getMessageDrafts } from \"features/joinedConversations/DraftsModel\";\nimport { updateMessageDraft } from \"features/joinedConversations/updateMessageDraftCommand\";\nimport { discardMessageDraft } from \"features/joinedConversations/discardMessageDraftCommand\";\nimport { sendMessage } from \"features/messages/sendMessage\";\nimport { sendTypingIndicator } from \"features/typingIndicator/sendTypingIndicator\";\nimport { MessageType } from \"features/messages/messageModel\";\nimport { DraftMessage } from \"features/messages/draft\";\nimport { MessageEditor } from \"features/messages/MessageEditor\";\nimport { getCurrentConversationId } from \"../currentConversationModel\";\nimport { Wrapper } from \"./MessageInput.style\";\nimport {\n  TYPING_INDICATOR_DURATION_SECONDS,\n  TypingIndicatorType,\n} from \"features/typingIndicator/typingIndicatorModel\";\n\nconst typingIndicators: {\n  [conversationId: string]: boolean;\n} = {};\n\nconst getConversationMessageDraft = createSelector(\n  [getMessageDrafts, getCurrentConversationId],\n  (drafts, conversationId): DraftMessage | undefined => {\n    return drafts[conversationId];\n  }\n);\n\n/**\n * Allow editing and sending messages\n */\nexport const MessageInput = () => {\n  const conversationId: string = useSelector(getCurrentConversationId);\n  const userId: string = useSelector(getLoggedInUserId);\n  const storedDraft: DraftMessage | undefined = useSelector(\n    getConversationMessageDraft\n  );\n  const defaultDraft: DraftMessage = {\n    type: MessageType.Text,\n    senderId: userId,\n    text: \"\",\n  };\n  const message: DraftMessage = storedDraft ? storedDraft : defaultDraft;\n  const dispatch = useDispatch();\n\n  const notifyTyping = () => {\n    if (!typingIndicators[conversationId]) {\n      typingIndicators[conversationId] = true;\n      dispatch(sendTypingIndicator(TypingIndicatorType.ShowTypingIndicator));\n\n      // allow sending additional typing indicators 1 seconds before display duration ends\n      setTimeout(() => {\n        typingIndicators[conversationId] = false;\n      }, (TYPING_INDICATOR_DURATION_SECONDS - 1) * 1000);\n    }\n  };\n\n  const notifyStopTyping = () => {\n    if (typingIndicators[conversationId]) {\n      typingIndicators[conversationId] = false;\n      dispatch(sendTypingIndicator(TypingIndicatorType.HideTypingIndicator));\n    }\n  };\n\n  const send = (appMessage: DraftMessage) => {\n    dispatch(sendMessage(appMessage));\n    dispatch(discardMessageDraft(conversationId));\n    typingIndicators[conversationId] = false;\n  };\n\n  const update = (appMessage: DraftMessage) => {\n    dispatch(updateMessageDraft(conversationId, appMessage));\n\n    if (\"text\" in appMessage) {\n      if (appMessage.text.length > 0) {\n        notifyTyping();\n      } else {\n        notifyStopTyping();\n      }\n    }\n  };\n\n  return (\n    <Wrapper>\n      <MessageEditor\n        message={message}\n        sendDraft={send}\n        updateDraft={update}\n      ></MessageEditor>\n    </Wrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport { createUserDataReducer } from \"pubnub-redux\";\n\n/**\n * create a reducer which holds all known user objects in a normalized form\n */\nconst UsersReducer = createUserDataReducer();\nexport { UsersReducer };\n/**\n * Slice selector is used internally to access the state of the reducer\n */\n\nconst getUsersSlice = state => state.users;\n/**\n * Returns an index which can be used to find user objects\n */\n\n\nexport const getUsersById = createSelector([getUsersSlice], users => {\n  return users.byId;\n});","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/users/userModel.ts"],"names":["createSelector","createUserDataReducer","UsersReducer","getUsersSlice","state","users","getUsersById","byId"],"mappings":"AACA,SAASA,cAAT,QAA+B,UAA/B;AACA,SAASC,qBAAT,QAAgD,cAAhD;;AA2BA;;;AAGA,MAAMC,YAAY,GAAGD,qBAAqB,EAA1C;AACA,SAASC,YAAT;AAEA;;;;AAGA,MAAMC,aAAa,GAAIC,KAAD,IAAqBA,KAAK,CAACC,KAAjD;AAEA;;;;;AAGA,OAAO,MAAMC,YAAY,GAAGN,cAAc,CACxC,CAACG,aAAD,CADwC,EAEvCE,KAAD,IAA6B;AAC3B,SAAOA,KAAK,CAACE,IAAb;AACD,CAJuC,CAAnC","sourcesContent":["import { AppState } from \"main/storeTypes\";\nimport { createSelector } from \"reselect\";\nimport { createUserDataReducer, UserData } from \"pubnub-redux\";\nimport { RequireFields } from \"foundations/utilities/requireFields\";\n\n/**\n * This application uses a custom field called title, which must be defined for\n * every user\n */\ntype CustomUserFields = {\n  title: string;\n};\n\n/**\n * Define which fields of PubNub's User object is accessed by this application.\n * Fields not specified in this definition are not used.\n * We use this oportunity to indicate that some fields which are optional in\n * the PubNub object definition are NOT optional in this application.\n */\nexport type User = RequireFields<\n  UserData<CustomUserFields>,\n  \"id\" | \"name\" | \"profileUrl\" | \"custom\"\n>;\n\n/**\n * Describes a way to lookup a user from a userId\n */\nexport type UsersIndexedById = { [id: string]: User };\n\n/**\n * create a reducer which holds all known user objects in a normalized form\n */\nconst UsersReducer = createUserDataReducer<User>();\nexport { UsersReducer };\n\n/**\n * Slice selector is used internally to access the state of the reducer\n */\nconst getUsersSlice = (state: AppState) => state.users;\n\n/**\n * Returns an index which can be used to find user objects\n */\nexport const getUsersById = createSelector(\n  [getUsersSlice],\n  (users): UsersIndexedById => {\n    return users.byId as UsersIndexedById;\n  }\n);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/messages/TextMessageEditor/TextMessageEditor.tsx\";\nimport React, { useEffect, useRef, useContext } from \"react\";\nimport { EmojiInput } from \"features/emoji/EmojiInput/EmojiInput\";\nimport { GifInput } from \"features/gifs/GifInput\";\nimport { EmojiSuggestion } from \"features/emoji/EmojiSuggestion/EmojiSuggestion\";\nimport { Wrapper, Container, TextArea, SendButton, Editor, EditorActions } from \"./TextMessageEditor.style\";\nimport { MessageType } from \"../messageModel\";\nimport { isDraftModified } from \"../draft\";\nimport { SendIcon } from \"foundations/components/icons/SendIcon\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\nimport { ThemeContext } from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { sendMessage } from \"../sendMessage\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\n/**\n * Expand the height of the input box as multiple lines of text are entered.\n */\n\nconst autoExpand = el => {\n  setTimeout(function () {\n    el.style.cssText = \"height:auto; padding:0\";\n    el.style.cssText = \"height:\" + el.scrollHeight + \"px\";\n  }, 0);\n};\n/**\n * Update the text field on a draft text message by returning a new object if\n * the new text is different than the text in the old object.\n * This is the proper way to do updates to avoid unnecessary rerendering.\n */\n\n\nconst newTextDraft = (draft, newText) => {\n  if (draft.text === newText) {\n    return draft;\n  }\n\n  return {\n    type: MessageType.Text,\n    senderId: draft.senderId,\n    text: newText\n  };\n};\n\n/**\n * Edit a draft Text Message\n */\nexport const TextMessageEditor = ({\n  message,\n  sendDraft,\n  updateDraft\n}) => {\n  const dispatch = useDispatch();\n  const userId = useSelector(getLoggedInUserId);\n  const theme = useContext(ThemeContext);\n  const touch = useMediaQuery(theme.mediaQueries.touch);\n  const text = message.text;\n  const textareaRef = useRef(document.createElement(\"textarea\"));\n\n  const textChanged = e => {\n    updateDraft(newTextDraft(message, e.target.value));\n  };\n\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\" && !(e.shiftKey || touch)) {\n      const draft = newTextDraft(message, text);\n\n      if (isDraftModified(draft)) {\n        sendDraft(draft);\n      }\n\n      e.preventDefault();\n    }\n\n    autoExpand(e.target);\n  };\n\n  const emojiInserted = messageWithEmoji => {\n    updateDraft(newTextDraft(message, messageWithEmoji));\n    textareaRef.current.focus();\n  }; // immediately send gifs (without creating a draft message)\n\n\n  const sendGif = (gif, query) => {\n    dispatch(sendMessage({\n      type: MessageType.Giphy,\n      senderId: userId,\n      query,\n      gif\n    }));\n  };\n\n  useEffect(() => {\n    autoExpand(textareaRef.current);\n  }, [textareaRef]);\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(EmojiSuggestion, {\n    value: text,\n    onSelection: emojiInserted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Editor, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    ref: textareaRef,\n    rows: 1,\n    value: text,\n    onChange: textChanged,\n    onKeyPress: handleKeyPress,\n    placeholder: \"Type Message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(EditorActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }, process.env.REACT_APP_GIPHY_API_KEY && /*#__PURE__*/React.createElement(GifInput, {\n    onSelection: sendGif,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(EmojiInput, {\n    value: text,\n    onSelection: emojiInserted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(SendButton, {\n    onClick: () => isDraftModified(message) && sendDraft(message),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(SendIcon, {\n    title: \"Send Message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  })))));\n};","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/messages/TextMessageEditor/TextMessageEditor.tsx"],"names":["React","useEffect","useRef","useContext","EmojiInput","GifInput","EmojiSuggestion","Wrapper","Container","TextArea","SendButton","Editor","EditorActions","MessageType","isDraftModified","SendIcon","useMediaQuery","ThemeContext","useDispatch","useSelector","sendMessage","getLoggedInUserId","autoExpand","el","setTimeout","style","cssText","scrollHeight","newTextDraft","draft","newText","text","type","Text","senderId","TextMessageEditor","message","sendDraft","updateDraft","dispatch","userId","theme","touch","mediaQueries","textareaRef","document","createElement","textChanged","e","target","value","handleKeyPress","key","shiftKey","preventDefault","emojiInserted","messageWithEmoji","current","focus","sendGif","gif","query","Giphy","process","env","REACT_APP_GIPHY_API_KEY"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useContext } from \"react\";\nimport { EmojiInput } from \"features/emoji/EmojiInput/EmojiInput\";\nimport { GifInput } from \"features/gifs/GifInput\";\nimport { IGif } from \"@giphy/js-types\";\nimport { EmojiSuggestion } from \"features/emoji/EmojiSuggestion/EmojiSuggestion\";\nimport {\n  Wrapper,\n  Container,\n  TextArea,\n  SendButton,\n  Editor,\n  EditorActions,\n} from \"./TextMessageEditor.style\";\nimport { MessageType } from \"../messageModel\";\nimport { DraftTextMessage, isDraftModified } from \"../draft\";\nimport { SendIcon } from \"foundations/components/icons/SendIcon\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\nimport { ThemeContext } from \"styled-components\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { sendMessage } from \"../sendMessage\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\n\n/**\n * Expand the height of the input box as multiple lines of text are entered.\n */\nconst autoExpand = (el: HTMLTextAreaElement) => {\n  setTimeout(function () {\n    el.style.cssText = \"height:auto; padding:0\";\n    el.style.cssText = \"height:\" + el.scrollHeight + \"px\";\n  }, 0);\n};\n\n/**\n * Update the text field on a draft text message by returning a new object if\n * the new text is different than the text in the old object.\n * This is the proper way to do updates to avoid unnecessary rerendering.\n */\nconst newTextDraft = (\n  draft: DraftTextMessage,\n  newText: string\n): DraftTextMessage => {\n  if (draft.text === newText) {\n    return draft;\n  }\n  return {\n    type: MessageType.Text,\n    senderId: draft.senderId,\n    text: newText,\n  };\n};\n\ntype TextMessageEditorProps = {\n  message: DraftTextMessage;\n  sendDraft: (message: DraftTextMessage) => void;\n  updateDraft: (message: DraftTextMessage) => void;\n};\n\n/**\n * Edit a draft Text Message\n */\nexport const TextMessageEditor = ({\n  message,\n  sendDraft,\n  updateDraft,\n}: TextMessageEditorProps) => {\n  const dispatch = useDispatch();\n  const userId = useSelector(getLoggedInUserId);\n  const theme = useContext(ThemeContext);\n  const touch = useMediaQuery(theme.mediaQueries.touch);\n  const text = message.text;\n  const textareaRef = useRef<HTMLTextAreaElement>(\n    document.createElement(\"textarea\")\n  );\n\n  const textChanged = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    updateDraft(newTextDraft(message, e.target.value));\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === \"Enter\" && !(e.shiftKey || touch)) {\n      const draft = newTextDraft(message, text);\n      if (isDraftModified(draft)) {\n        sendDraft(draft);\n      }\n      e.preventDefault();\n    }\n    autoExpand(e.target as HTMLTextAreaElement);\n  };\n\n  const emojiInserted = (messageWithEmoji: string) => {\n    updateDraft(newTextDraft(message, messageWithEmoji));\n    textareaRef.current.focus();\n  };\n\n  // immediately send gifs (without creating a draft message)\n  const sendGif = (gif: IGif, query: string) => {\n    dispatch(\n      sendMessage({\n        type: MessageType.Giphy,\n        senderId: userId,\n        query,\n        gif,\n      })\n    );\n  };\n\n  useEffect(() => {\n    autoExpand(textareaRef.current);\n  }, [textareaRef]);\n\n  return (\n    <Wrapper>\n      <EmojiSuggestion value={text} onSelection={emojiInserted} />\n      <Container>\n        <Editor>\n          <TextArea\n            ref={textareaRef}\n            rows={1}\n            value={text}\n            onChange={textChanged}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Type Message\"\n          />\n        </Editor>\n        <EditorActions>\n          {process.env.REACT_APP_GIPHY_API_KEY && (\n            <GifInput onSelection={sendGif} />\n          )}\n          <EmojiInput value={text} onSelection={emojiInserted} />\n          <SendButton\n            onClick={() => isDraftModified(message) && sendDraft(message)}\n          >\n            <SendIcon title=\"Send Message\" />\n          </SendButton>\n        </EditorActions>\n      </Container>\n    </Wrapper>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/joinedConversations/MyConversations/MyConversations.tsx\";\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { getCurrentConversationId } from \"features/currentConversation/currentConversationModel\";\nimport { getConversationsByUserId } from \"../joinedConversationModel\";\nimport { getConversationsById } from \"features/conversations/conversationModel\";\nimport { focusOnConversation } from \"features/currentConversation/currentConversationModel\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport { AddIcon } from \"foundations/components/icons/AddIcon\";\nimport { ConversationItem } from \"../ConversationItem\";\nimport { Wrapper, Title, AddButton, ConversationList } from \"./MyConversations.style\";\nimport { fetchAllChannelData, fetchChannelMembers } from \"pubnub-redux\";\nimport { getCurrentConversationMembers } from \"features/conversationMembers/ConversationMembers/ConversationMembers\";\nimport { leaveConversation } from \"../leaveConversationCommand\";\nimport { currentConversationViewDisplayed, joinConversationViewDisplayed, menuViewHidden } from \"features/layout/LayoutActions\";\nexport const getJoinedConversations = createSelector([getConversationsById, getLoggedInUserId, getConversationsByUserId], (conversations, userId, userConversations) => {\n  return userConversations[userId] ? userConversations[userId].map(conversation => {\n    return {\n      id: conversation.id,\n      name: conversations[conversation.id].name\n    };\n  }) : [];\n});\n\nconst MyConversations = () => {\n  const currentUserId = useSelector(getLoggedInUserId);\n  const conversationsById = useSelector(getConversationsById);\n  const conversations = useSelector(getJoinedConversations);\n  const currentConversationId = useSelector(getCurrentConversationId);\n  const members = useSelector(getCurrentConversationMembers);\n  const dispatch = useDispatch();\n\n  const openOverlay = () => {\n    dispatch(fetchAllChannelData());\n    dispatch(joinConversationViewDisplayed());\n  };\n\n  if (conversationsById === undefined) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, \"Conversations\", /*#__PURE__*/React.createElement(AddButton, {\n    onClick: openOverlay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AddIcon, {\n    title: \"Join conversation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(ConversationList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, conversations.map(conversation => /*#__PURE__*/React.createElement(ConversationItem, {\n    id: conversation.id,\n    name: conversation.name,\n    onLeave: () => {\n      dispatch(leaveConversation(currentUserId, conversation.id));\n    },\n    selected: conversation.id === currentConversationId,\n    key: conversation.id,\n    unreadMessageCount: 0,\n    onClick: () => {\n      dispatch(focusOnConversation(conversation.id));\n      dispatch(currentConversationViewDisplayed());\n      dispatch(menuViewHidden());\n\n      if (members.length === 0) {\n        dispatch(fetchChannelMembers({\n          channel: conversation.id,\n          include: {\n            UUIDFields: true,\n            customUUIDFields: true,\n            totalCount: false\n          }\n        }));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport { MyConversations };","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/joinedConversations/MyConversations/MyConversations.tsx"],"names":["React","useSelector","useDispatch","createSelector","getCurrentConversationId","getConversationsByUserId","getConversationsById","focusOnConversation","getLoggedInUserId","AddIcon","ConversationItem","Wrapper","Title","AddButton","ConversationList","fetchAllChannelData","fetchChannelMembers","getCurrentConversationMembers","leaveConversation","currentConversationViewDisplayed","joinConversationViewDisplayed","menuViewHidden","getJoinedConversations","conversations","userId","userConversations","map","conversation","id","name","MyConversations","currentUserId","conversationsById","currentConversationId","members","dispatch","openOverlay","undefined","length","channel","include","UUIDFields","customUUIDFields","totalCount"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { getCurrentConversationId } from \"features/currentConversation/currentConversationModel\";\nimport { getConversationsByUserId } from \"../joinedConversationModel\";\nimport { MembershipHash } from \"../joinedConversationModel\";\nimport {\n  ConversationsIndexedById,\n  getConversationsById,\n} from \"features/conversations/conversationModel\";\nimport { focusOnConversation } from \"features/currentConversation/currentConversationModel\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport { AddIcon } from \"foundations/components/icons/AddIcon\";\nimport { ConversationItem } from \"../ConversationItem\";\nimport {\n  Wrapper,\n  Title,\n  AddButton,\n  ConversationList,\n} from \"./MyConversations.style\";\nimport { fetchAllChannelData, fetchChannelMembers } from \"pubnub-redux\";\nimport { getCurrentConversationMembers } from \"features/conversationMembers/ConversationMembers/ConversationMembers\";\nimport { UserFragment } from \"features/conversationMembers/MemberDescription/MemberDescription\";\nimport { leaveConversation } from \"../leaveConversationCommand\";\nimport {\n  currentConversationViewDisplayed,\n  joinConversationViewDisplayed,\n  menuViewHidden,\n} from \"features/layout/LayoutActions\";\n\nexport interface ConversationFragment {\n  id: string;\n  name: string;\n}\n\nexport const getJoinedConversations = createSelector(\n  [getConversationsById, getLoggedInUserId, getConversationsByUserId],\n  (\n    conversations: ConversationsIndexedById,\n    userId: string,\n    userConversations: MembershipHash\n  ): ConversationFragment[] => {\n    return userConversations[userId]\n      ? userConversations[userId].map((conversation) => {\n          return {\n            id: conversation.id,\n            name: conversations[conversation.id].name,\n          };\n        })\n      : [];\n  }\n);\n\nconst MyConversations = () => {\n  const currentUserId = useSelector(getLoggedInUserId);\n  const conversationsById = useSelector(getConversationsById);\n  const conversations: ConversationFragment[] = useSelector(\n    getJoinedConversations\n  );\n  const currentConversationId: string = useSelector(getCurrentConversationId);\n  const members: UserFragment[] = useSelector(getCurrentConversationMembers);\n  const dispatch = useDispatch();\n  const openOverlay = () => {\n    dispatch(fetchAllChannelData());\n    dispatch(joinConversationViewDisplayed());\n  };\n\n  if (conversationsById === undefined) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Wrapper>\n      <Title>\n        Conversations\n        <AddButton onClick={openOverlay}>\n          <AddIcon title=\"Join conversation\" />\n        </AddButton>\n      </Title>\n      <ConversationList>\n        {conversations.map((conversation) => (\n          <ConversationItem\n            id={conversation.id}\n            name={conversation.name}\n            onLeave={() => {\n              dispatch(leaveConversation(currentUserId, conversation.id));\n            }}\n            selected={conversation.id === currentConversationId}\n            key={conversation.id}\n            unreadMessageCount={0}\n            onClick={() => {\n              dispatch(focusOnConversation(conversation.id));\n              dispatch(currentConversationViewDisplayed());\n              dispatch(menuViewHidden());\n\n              if (members.length === 0) {\n                dispatch(\n                  fetchChannelMembers({\n                    channel: conversation.id,\n                    include: {\n                      UUIDFields: true,\n                      customUUIDFields: true,\n                      totalCount: false,\n                    },\n                  })\n                );\n              }\n            }}\n          ></ConversationItem>\n        ))}\n      </ConversationList>\n    </Wrapper>\n  );\n};\n\nexport { MyConversations };\n"]},"metadata":{},"sourceType":"module"}
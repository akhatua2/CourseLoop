{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport invariant from \"invariant\";\nexport const LOGGING_IN = \"LOGGIN_IN\";\nexport const LOGIN_SUCCEEDED = \"LOGIN_SUCCEEDED\";\nexport const loggingIn = () => ({\n  type: LOGGING_IN\n});\nexport const loginSucceeded = loginSucceededPayload => ({\n  type: LOGIN_SUCCEEDED,\n  payload: loginSucceededPayload\n});\nconst initialState = {\n  isLoggingIn: false\n};\n\nconst AuthenticationStateReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGGING_IN:\n      {\n        return { ...state,\n          isLoggingIn: true\n        };\n      }\n\n    case LOGIN_SUCCEEDED:\n      {\n        return { ...state,\n          isLoggingIn: false,\n          loggedInUserId: action.payload.loggedInUserId\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst getAuthenticationStateSlice = state => state.authentication;\n\nexport const getLoggedInUserId = createSelector([getAuthenticationStateSlice], authenticationState => {\n  invariant(authenticationState.loggedInUserId !== undefined, \"getLoggedInUserId should not be used in components of the application that are rendered while there is no logged in user\");\n  return authenticationState.loggedInUserId;\n});\nexport const isUserLoggedIn = createSelector(getAuthenticationStateSlice, authenticationState => {\n  return !!authenticationState.loggedInUserId;\n});\nexport const isLoggingIn = createSelector(getAuthenticationStateSlice, authenticationState => {\n  return authenticationState.isLoggingIn;\n});\nexport { AuthenticationStateReducer };","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/authentication/authenticationModel.ts"],"names":["createSelector","invariant","LOGGING_IN","LOGIN_SUCCEEDED","loggingIn","type","loginSucceeded","loginSucceededPayload","payload","initialState","isLoggingIn","AuthenticationStateReducer","state","action","loggedInUserId","getAuthenticationStateSlice","authentication","getLoggedInUserId","authenticationState","undefined","isUserLoggedIn"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAIA,OAAO,MAAMC,UAAU,GAAG,WAAnB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAMP,OAAO,MAAMC,SAAS,GAAG,OAAuB;AAC9CC,EAAAA,IAAI,EAAEH;AADwC,CAAvB,CAAlB;AAaP,OAAO,MAAMI,cAAc,GACzBC,qBAD4B,KAEF;AAC1BF,EAAAA,IAAI,EAAEF,eADoB;AAE1BK,EAAAA,OAAO,EAAED;AAFiB,CAFE,CAAvB;AAYP,MAAME,YAAiC,GAAG;AACxCC,EAAAA,WAAW,EAAE;AAD2B,CAA1C;;AAIA,MAAMC,0BAA0B,GAAG,CACjCC,KAA0B,GAAGH,YADI,EAEjCI,MAFiC,KAGT;AACxB,UAAQA,MAAM,CAACR,IAAf;AACE,SAAKH,UAAL;AAAiB;AACf,eAAO,EAAE,GAAGU,KAAL;AAAYF,UAAAA,WAAW,EAAE;AAAzB,SAAP;AACD;;AACD,SAAKP,eAAL;AAAsB;AACpB,eAAO,EACL,GAAGS,KADE;AAELF,UAAAA,WAAW,EAAE,KAFR;AAGLI,UAAAA,cAAc,EAAED,MAAM,CAACL,OAAP,CAAeM;AAH1B,SAAP;AAKD;;AACD;AACE,aAAOF,KAAP;AAZJ;AAcD,CAlBD;;AAoBA,MAAMG,2BAA2B,GAAIH,KAAD,IAAqBA,KAAK,CAACI,cAA/D;;AAEA,OAAO,MAAMC,iBAAiB,GAAGjB,cAAc,CAC7C,CAACe,2BAAD,CAD6C,EAE5CG,mBAAD,IAAsD;AACpDjB,EAAAA,SAAS,CACPiB,mBAAmB,CAACJ,cAApB,KAAuCK,SADhC,EAEP,0HAFO,CAAT;AAIA,SAAOD,mBAAmB,CAACJ,cAA3B;AACD,CAR4C,CAAxC;AAWP,OAAO,MAAMM,cAAc,GAAGpB,cAAc,CAC1Ce,2BAD0C,EAEzCG,mBAAD,IAAuD;AACrD,SAAO,CAAC,CAACA,mBAAmB,CAACJ,cAA7B;AACD,CAJyC,CAArC;AAOP,OAAO,MAAMJ,WAAW,GAAGV,cAAc,CACvCe,2BADuC,EAEtCG,mBAAD,IAAuD;AACrD,SAAOA,mBAAmB,CAACR,WAA3B;AACD,CAJsC,CAAlC;AAOP,SAASC,0BAAT","sourcesContent":["import { createSelector } from \"reselect\";\nimport invariant from \"invariant\";\nimport { AppState } from \"main/storeTypes\";\nimport { AppActions } from \"main/AppActions\";\n\nexport const LOGGING_IN = \"LOGGIN_IN\";\nexport const LOGIN_SUCCEEDED = \"LOGIN_SUCCEEDED\";\n\nexport interface logingInAction {\n  type: typeof LOGGING_IN;\n}\n\nexport const loggingIn = (): logingInAction => ({\n  type: LOGGING_IN\n});\n\ntype loginSucceededPayloadType = {\n  loggedInUserId?: string;\n};\n\nexport interface loginSucceededAction {\n  type: typeof LOGIN_SUCCEEDED;\n  payload: loginSucceededPayloadType;\n}\n\nexport const loginSucceeded = (\n  loginSucceededPayload: loginSucceededPayloadType\n): loginSucceededAction => ({\n  type: LOGIN_SUCCEEDED,\n  payload: loginSucceededPayload\n});\n\nexport interface AuthenticationState {\n  isLoggingIn: boolean;\n  loggedInUserId?: string;\n}\n\nconst initialState: AuthenticationState = {\n  isLoggingIn: false\n};\n\nconst AuthenticationStateReducer = (\n  state: AuthenticationState = initialState,\n  action: AppActions\n): AuthenticationState => {\n  switch (action.type) {\n    case LOGGING_IN: {\n      return { ...state, isLoggingIn: true };\n    }\n    case LOGIN_SUCCEEDED: {\n      return {\n        ...state,\n        isLoggingIn: false,\n        loggedInUserId: action.payload.loggedInUserId\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst getAuthenticationStateSlice = (state: AppState) => state.authentication;\n\nexport const getLoggedInUserId = createSelector(\n  [getAuthenticationStateSlice],\n  (authenticationState: AuthenticationState): string => {\n    invariant(\n      authenticationState.loggedInUserId !== undefined,\n      \"getLoggedInUserId should not be used in components of the application that are rendered while there is no logged in user\"\n    );\n    return authenticationState.loggedInUserId;\n  }\n);\n\nexport const isUserLoggedIn = createSelector(\n  getAuthenticationStateSlice,\n  (authenticationState: AuthenticationState): boolean => {\n    return !!authenticationState.loggedInUserId;\n  }\n);\n\nexport const isLoggingIn = createSelector(\n  getAuthenticationStateSlice,\n  (authenticationState: AuthenticationState): boolean => {\n    return authenticationState.isLoggingIn;\n  }\n);\n\nexport { AuthenticationStateReducer };\n"]},"metadata":{},"sourceType":"module"}
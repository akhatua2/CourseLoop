{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport { createSignalReducer } from \"pubnub-redux\";\nimport { SignalActionType, PresenceCategory } from \"pubnub-redux\";\nimport { MessageActionType } from \"pubnub-redux\";\nexport const TYPING_INDICATOR_DURATION_SECONDS = 10;\nexport let TypingIndicatorType;\n\n(function (TypingIndicatorType) {\n  TypingIndicatorType[\"ShowTypingIndicator\"] = \"ti_show\";\n  TypingIndicatorType[\"HideTypingIndicator\"] = \"ti_hide\";\n})(TypingIndicatorType || (TypingIndicatorType = {}));\n\nexport let TypingIndicatorActionType;\n\n(function (TypingIndicatorActionType) {\n  TypingIndicatorActionType[\"REMOVE_TYPING_INDICATOR\"] = \"REMOVE_TYPING_INDICATOR\";\n  TypingIndicatorActionType[\"REMOVE_TYPING_INDICATOR_ALL\"] = \"REMOVE_TYPING_INDICATOR_ALL\";\n})(TypingIndicatorActionType || (TypingIndicatorActionType = {}));\n\nconst signalReducer = createSignalReducer();\nconst defaultState = {\n  byId: {}\n};\n\nconst removeTypingIndicator = (state, channel, userId, timetoken) => {\n  let newState = {\n    byId: { ...state.byId\n    }\n  };\n\n  if (newState.byId[channel]) {\n    newState.byId[channel] = newState.byId[channel].filter(signal => timetoken ? !(signal.publisher === userId && signal.timetoken === timetoken) : !(signal.publisher === userId));\n  }\n\n  return newState;\n};\n/**\n * create a reducer which holds all typing indicator signal objects in a normalized form\n */\n\n\nexport const TypingIndicatorStateReducer = (state, action) => {\n  switch (action.type) {\n    case SignalActionType.SIGNAL_RECEIVED:\n      if (action.payload.message.type === TypingIndicatorType.ShowTypingIndicator) {\n        // we only want to store the show typing indicator signals\n        // the hide signal is handled by the listener below\n        return signalReducer(state, action);\n      }\n\n      return state || defaultState;\n\n    case TypingIndicatorActionType.REMOVE_TYPING_INDICATOR:\n      return removeTypingIndicator(state, action.payload.channel, action.payload.userId, action.payload.timetoken);\n\n    case TypingIndicatorActionType.REMOVE_TYPING_INDICATOR_ALL:\n      return removeTypingIndicator(state, action.payload.channel, action.payload.userId);\n\n    case MessageActionType.MESSAGE_RECEIVED:\n      return removeTypingIndicator(state, action.payload.channel, action.payload.message.senderId);\n\n    default:\n      return state || defaultState;\n  }\n};\n\n/**\n * This Slice selector is used internally to access the state of the reducer,\n * primarily as the base selector function for creating other selectors.\n */\nconst getTypingIndicatorsSlice = state => state.typingIndicators;\n/**\n * Returns an index which can be used to find signal objects\n */\n\n\nexport const getTypingIndicatorsById = createSelector([getTypingIndicatorsSlice], typingIndicators => {\n  return typingIndicators.byId;\n});\nexport const typingIndicatorRemoved = payload => ({\n  type: TypingIndicatorActionType.REMOVE_TYPING_INDICATOR,\n  payload\n});\nexport const typingIndicatorRemovedAll = payload => ({\n  type: TypingIndicatorActionType.REMOVE_TYPING_INDICATOR_ALL,\n  payload\n});\n/**\n * This listener will initiate a timer to dispatch a RemoveTypingIndicatorAction once the\n * TYPING_INDICATOR_DURATION_SECONDS time is passed\n */\n\nexport const createTypingIndicatorsListener = dispatch => ({\n  signal: payload => {\n    if (payload.message.type === TypingIndicatorType.ShowTypingIndicator) {\n      // hide indicator after display seconds\n      setTimeout(() => {\n        dispatch(typingIndicatorRemoved({\n          userId: payload.publisher,\n          channel: payload.channel,\n          timetoken: payload.timetoken\n        }));\n      }, TYPING_INDICATOR_DURATION_SECONDS * 1000);\n    } else if (payload.message.type === TypingIndicatorType.HideTypingIndicator) {\n      // hide indicator now, removes all for user regardless of time token\n      dispatch(typingIndicatorRemovedAll({\n        userId: payload.publisher,\n        channel: payload.channel\n      }));\n    }\n  },\n  presence: payload => {\n    if (payload.action === PresenceCategory.LEAVE || payload.action === PresenceCategory.TIMEOUT) {\n      dispatch(typingIndicatorRemovedAll({\n        userId: payload.uuid,\n        channel: payload.channel\n      }));\n    }\n  }\n});","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/typingIndicator/typingIndicatorModel.ts"],"names":["createSelector","createSignalReducer","SignalActionType","PresenceCategory","MessageActionType","TYPING_INDICATOR_DURATION_SECONDS","TypingIndicatorType","TypingIndicatorActionType","signalReducer","defaultState","byId","removeTypingIndicator","state","channel","userId","timetoken","newState","filter","signal","publisher","TypingIndicatorStateReducer","action","type","SIGNAL_RECEIVED","payload","message","ShowTypingIndicator","REMOVE_TYPING_INDICATOR","REMOVE_TYPING_INDICATOR_ALL","MESSAGE_RECEIVED","senderId","getTypingIndicatorsSlice","typingIndicators","getTypingIndicatorsById","typingIndicatorRemoved","typingIndicatorRemovedAll","createTypingIndicatorsListener","dispatch","setTimeout","HideTypingIndicator","presence","LEAVE","TIMEOUT","uuid"],"mappings":"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","sourcesContent":["import { Dispatch } from \"redux\";\nimport { AppState } from \"main/storeTypes\";\nimport { createSelector } from \"reselect\";\nimport { createSignalReducer, Signal } from \"pubnub-redux\";\nimport { SignalActionType, PresenceCategory } from \"pubnub-redux\";\nimport { AppActions } from \"main/AppActions\";\nimport { SignalState } from \"pubnub-redux/dist/features/signal/SignalReducer\";\nimport { MessageActionType } from \"pubnub-redux\";\nimport { PresenceEventMessage } from \"pubnub-redux/dist/features/presence/PresenceActions\";\n\nexport const TYPING_INDICATOR_DURATION_SECONDS = 10;\n\nexport enum TypingIndicatorType {\n  ShowTypingIndicator = \"ti_show\",\n  HideTypingIndicator = \"ti_hide\"\n}\n\nexport enum TypingIndicatorActionType {\n  REMOVE_TYPING_INDICATOR = \"REMOVE_TYPING_INDICATOR\",\n  REMOVE_TYPING_INDICATOR_ALL = \"REMOVE_TYPING_INDICATOR_ALL\"\n}\n\nexport interface TypingIndicator extends Signal {\n  type: TypingIndicatorType;\n}\n\nexport type TypingIndicatorEnvelope = Required<\n  Pick<Signal, \"channel\" | \"message\" | \"timetoken\" | \"publisher\">\n> & {\n  message: TypingIndicator;\n};\n\nconst signalReducer = createSignalReducer<TypingIndicatorEnvelope>();\n\nconst defaultState = { byId: {} };\n\nconst removeTypingIndicator = (\n  state: SignalState<TypingIndicatorEnvelope>,\n  channel: string,\n  userId: string,\n  timetoken?: number\n): SignalState<TypingIndicatorEnvelope> => {\n  let newState = {\n    byId: { ...state.byId }\n  };\n\n  if (newState.byId[channel]) {\n    newState.byId[channel] = newState.byId[channel].filter(signal =>\n      timetoken\n        ? !(signal.publisher === userId && signal.timetoken === timetoken)\n        : !(signal.publisher === userId)\n    );\n  }\n\n  return newState;\n};\n\n/**\n * create a reducer which holds all typing indicator signal objects in a normalized form\n */\nexport const TypingIndicatorStateReducer = (\n  state: SignalState<TypingIndicatorEnvelope>,\n  action: AppActions\n): SignalState<TypingIndicatorEnvelope> => {\n  switch (action.type) {\n    case SignalActionType.SIGNAL_RECEIVED:\n      if (\n        action.payload.message.type === TypingIndicatorType.ShowTypingIndicator\n      ) {\n        // we only want to store the show typing indicator signals\n        // the hide signal is handled by the listener below\n        return signalReducer(state, action);\n      }\n\n      return state || defaultState;\n    case TypingIndicatorActionType.REMOVE_TYPING_INDICATOR:\n      return removeTypingIndicator(\n        state,\n        action.payload.channel,\n        action.payload.userId,\n        action.payload.timetoken\n      );\n    case TypingIndicatorActionType.REMOVE_TYPING_INDICATOR_ALL:\n      return removeTypingIndicator(\n        state,\n        action.payload.channel,\n        action.payload.userId\n      );\n    case MessageActionType.MESSAGE_RECEIVED:\n      return removeTypingIndicator(\n        state,\n        action.payload.channel,\n        action.payload.message.senderId\n      );\n    default:\n      return state || defaultState;\n  }\n};\n\nexport interface RemoveTypingIndicatorPayload {\n  userId: string;\n  channel: string;\n  timetoken: number;\n}\n\nexport interface RemoveTypingIndicatorAllPayload {\n  userId: string;\n  channel: string;\n}\n\nexport interface RemoveTypingIndicatorAction {\n  type: typeof TypingIndicatorActionType.REMOVE_TYPING_INDICATOR;\n  payload: RemoveTypingIndicatorPayload;\n}\n\nexport interface RemoveTypingIndicatorAllAction {\n  type: typeof TypingIndicatorActionType.REMOVE_TYPING_INDICATOR_ALL;\n  payload: RemoveTypingIndicatorAllPayload;\n}\n\n/**\n * This Slice selector is used internally to access the state of the reducer,\n * primarily as the base selector function for creating other selectors.\n */\nconst getTypingIndicatorsSlice = (\n  state: AppState\n): SignalState<TypingIndicatorEnvelope> => state.typingIndicators;\n\n/**\n * Returns an index which can be used to find signal objects\n */\nexport const getTypingIndicatorsById = createSelector(\n  [getTypingIndicatorsSlice],\n  typingIndicators => {\n    return typingIndicators.byId;\n  }\n);\n\nexport const typingIndicatorRemoved = (\n  payload: RemoveTypingIndicatorPayload\n): RemoveTypingIndicatorAction => ({\n  type: TypingIndicatorActionType.REMOVE_TYPING_INDICATOR,\n  payload\n});\n\nexport const typingIndicatorRemovedAll = (\n  payload: RemoveTypingIndicatorAllPayload\n): RemoveTypingIndicatorAllAction => ({\n  type: TypingIndicatorActionType.REMOVE_TYPING_INDICATOR_ALL,\n  payload\n});\n\n/**\n * This listener will initiate a timer to dispatch a RemoveTypingIndicatorAction once the\n * TYPING_INDICATOR_DURATION_SECONDS time is passed\n */\nexport const createTypingIndicatorsListener = (\n  dispatch: Dispatch<AppActions>\n): any => ({\n  signal: (payload: TypingIndicatorEnvelope) => {\n    if (payload.message.type === TypingIndicatorType.ShowTypingIndicator) {\n      // hide indicator after display seconds\n      setTimeout(() => {\n        dispatch(\n          typingIndicatorRemoved({\n            userId: payload.publisher,\n            channel: payload.channel,\n            timetoken: payload.timetoken\n          })\n        );\n      }, TYPING_INDICATOR_DURATION_SECONDS * 1000);\n    } else if (\n      payload.message.type === TypingIndicatorType.HideTypingIndicator\n    ) {\n      // hide indicator now, removes all for user regardless of time token\n      dispatch(\n        typingIndicatorRemovedAll({\n          userId: payload.publisher,\n          channel: payload.channel\n        })\n      );\n    }\n  },\n  presence: (payload: PresenceEventMessage) => {\n    if (\n      payload.action === PresenceCategory.LEAVE ||\n      payload.action === PresenceCategory.TIMEOUT\n    ) {\n      dispatch(\n        typingIndicatorRemovedAll({\n          userId: payload.uuid,\n          channel: payload.channel\n        })\n      );\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"module"}
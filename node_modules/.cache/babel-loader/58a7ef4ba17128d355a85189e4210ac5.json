{"ast":null,"code":"import { removeMemberships } from \"pubnub-redux\";\nimport { focusOnConversation, DEFAULT_CONVERSATION } from \"features/currentConversation/currentConversationModel\";\n/**\n * Leave the current conversation and select the default conversation\n * as the current conversation.  (The application expects that some\n * conversation will always be current.)\n */\n\nexport const leaveConversation = (userId, conversationId) => {\n  return (dispatch, getState, context) => {\n    if (conversationId === DEFAULT_CONVERSATION) {\n      return Promise.resolve();\n    }\n\n    return dispatch(removeMemberships({\n      uuid: userId,\n      channels: [conversationId]\n    })).then(() => {\n      context.pubnub.api.unsubscribe({\n        channels: [conversationId]\n      });\n      dispatch(focusOnConversation(DEFAULT_CONVERSATION));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/chatcat/typescript-ref-app-team-chat/src/features/joinedConversations/leaveConversationCommand.ts"],"names":["removeMemberships","focusOnConversation","DEFAULT_CONVERSATION","leaveConversation","userId","conversationId","dispatch","getState","context","Promise","resolve","uuid","channels","then","pubnub","api","unsubscribe"],"mappings":"AACA,SAASA,iBAAT,QAAkC,cAAlC;AACA,SACEC,mBADF,EAEEC,oBAFF,QAGO,uDAHP;AAKA;;;;;;AAKA,OAAO,MAAMC,iBAAiB,GAAG,CAC/BC,MAD+B,EAE/BC,cAF+B,KAGA;AAC/B,SAAO,CAACC,QAAD,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;AACtC,QAAIH,cAAc,KAAKH,oBAAvB,EAA6C;AAC3C,aAAOO,OAAO,CAACC,OAAR,EAAP;AACD;;AACD,WAAOJ,QAAQ,CACbN,iBAAiB,CAAC;AAChBW,MAAAA,IAAI,EAAEP,MADU;AAEhBQ,MAAAA,QAAQ,EAAE,CAACP,cAAD;AAFM,KAAD,CADJ,CAAR,CAKLQ,IALK,CAKA,MAAM;AACXL,MAAAA,OAAO,CAACM,MAAR,CAAeC,GAAf,CAAmBC,WAAnB,CAA+B;AAC7BJ,QAAAA,QAAQ,EAAE,CAACP,cAAD;AADmB,OAA/B;AAGAC,MAAAA,QAAQ,CAACL,mBAAmB,CAACC,oBAAD,CAApB,CAAR;AACD,KAVM,CAAP;AAWD,GAfD;AAgBD,CApBM","sourcesContent":["import { ThunkAction } from \"main/storeTypes\";\nimport { removeMemberships } from \"pubnub-redux\";\nimport {\n  focusOnConversation,\n  DEFAULT_CONVERSATION,\n} from \"features/currentConversation/currentConversationModel\";\n\n/**\n * Leave the current conversation and select the default conversation\n * as the current conversation.  (The application expects that some\n * conversation will always be current.)\n */\nexport const leaveConversation = (\n  userId: string,\n  conversationId: string\n): ThunkAction<Promise<void>> => {\n  return (dispatch, getState, context) => {\n    if (conversationId === DEFAULT_CONVERSATION) {\n      return Promise.resolve();\n    }\n    return dispatch(\n      removeMemberships({\n        uuid: userId,\n        channels: [conversationId],\n      })\n    ).then(() => {\n      context.pubnub.api.unsubscribe({\n        channels: [conversationId],\n      });\n      dispatch(focusOnConversation(DEFAULT_CONVERSATION));\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
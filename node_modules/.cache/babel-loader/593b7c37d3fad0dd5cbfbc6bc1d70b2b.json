{"ast":null,"code":"import { createSelector } from \"reselect\";\nimport { combineReducers } from \"redux\";\nimport { createChannelDataReducer, createChannelsListReducer } from \"pubnub-redux\";\n\n/**\n * create a reducer which holds all known conversation objects in a normalized form\n */\nconst conversationStateReducer = combineReducers({\n  conversations: createChannelDataReducer(),\n  allConversations: createChannelsListReducer()\n});\nexport { conversationStateReducer };\n/**\n * Slice selectors are used internally to access the state of the reducer\n */\n\nconst getConversationsSlice = state => state.conversations;\n\nconst getChannelsSlice = state => state.conversations.conversations;\n\nconst getAllChannelsSlice = state => state.conversations.allConversations;\n/**\n * Returns an index which can be used to find conversation objects\n */\n\n\nexport const getConversationsById = createSelector([getConversationsSlice], conversations => {\n  return conversations.conversations.byId;\n});\n/**\n * Returns an array of all channels\n */\n\nexport const getAllConversations = createSelector([getChannelsSlice, getAllChannelsSlice], (channels, allChannels) => {\n  return allChannels.channelIds.map(id => channels.byId[id]);\n});","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/chatcat/typescript-ref-app-team-chat/src/features/conversations/conversationModel.ts"],"names":["createSelector","combineReducers","createChannelDataReducer","createChannelsListReducer","conversationStateReducer","conversations","allConversations","getConversationsSlice","state","getChannelsSlice","getAllChannelsSlice","getConversationsById","byId","getAllConversations","channels","allChannels","channelIds","map","id"],"mappings":"AACA,SAASA,cAAT,QAA+B,UAA/B;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SACEC,wBADF,EAEEC,yBAFF,QAIO,cAJP;;AAuBA;;;AAGA,MAAMC,wBAAwB,GAAGH,eAAe,CAAC;AAC/CI,EAAAA,aAAa,EAAEH,wBAAwB,EADQ;AAE/CI,EAAAA,gBAAgB,EAAEH,yBAAyB;AAFI,CAAD,CAAhD;AAIA,SAASC,wBAAT;AAEA;;;;AAGA,MAAMG,qBAAqB,GAAIC,KAAD,IAAqBA,KAAK,CAACH,aAAzD;;AACA,MAAMI,gBAAgB,GAAID,KAAD,IAAqBA,KAAK,CAACH,aAAN,CAAoBA,aAAlE;;AACA,MAAMK,mBAAmB,GAAIF,KAAD,IAC1BA,KAAK,CAACH,aAAN,CAAoBC,gBADtB;AAGA;;;;;AAGA,OAAO,MAAMK,oBAAoB,GAAGX,cAAc,CAChD,CAACO,qBAAD,CADgD,EAE/CF,aAAD,IAA6C;AAC3C,SAAOA,aAAa,CAACA,aAAd,CAA4BO,IAAnC;AACD,CAJ+C,CAA3C;AAOP;;;;AAGA,OAAO,MAAMC,mBAAmB,GAAGb,cAAc,CAC/C,CAACS,gBAAD,EAAmBC,mBAAnB,CAD+C,EAE/C,CAACI,QAAD,EAAWC,WAAX,KAA2B;AACzB,SAAOA,WAAW,CAACC,UAAZ,CAAuBC,GAAvB,CAA4BC,EAAD,IAAQJ,QAAQ,CAACF,IAAT,CAAcM,EAAd,CAAnC,CAAP;AACD,CAJ8C,CAA1C","sourcesContent":["import { AppState } from \"main/storeTypes\";\nimport { createSelector } from \"reselect\";\nimport { combineReducers } from \"redux\";\nimport {\n  createChannelDataReducer,\n  createChannelsListReducer,\n  Channel,\n} from \"pubnub-redux\";\nimport { RequireFields } from \"foundations/utilities/requireFields\";\n\n/**\n * Define which fields of PubNub's User object is accessed by this application.\n * Fields not specified in this definition are not used.\n * We use this oportunity to indicate that some fields which are optional in\n * the PubNub object definition are NOT optional in this application.\n */\nexport type Conversation = RequireFields<\n  Channel<{}>,\n  \"id\" | \"name\" | \"description\"\n>;\n\n/**\n * Describes a way to lookup a conversation from a conversationId\n */\nexport type ConversationsIndexedById = { [id: string]: Conversation };\n\n/**\n * create a reducer which holds all known conversation objects in a normalized form\n */\nconst conversationStateReducer = combineReducers({\n  conversations: createChannelDataReducer<Conversation>(),\n  allConversations: createChannelsListReducer<{}>(),\n});\nexport { conversationStateReducer };\n\n/**\n * Slice selectors are used internally to access the state of the reducer\n */\nconst getConversationsSlice = (state: AppState) => state.conversations;\nconst getChannelsSlice = (state: AppState) => state.conversations.conversations;\nconst getAllChannelsSlice = (state: AppState) =>\n  state.conversations.allConversations;\n\n/**\n * Returns an index which can be used to find conversation objects\n */\nexport const getConversationsById = createSelector(\n  [getConversationsSlice],\n  (conversations): ConversationsIndexedById => {\n    return conversations.conversations.byId;\n  }\n);\n\n/**\n * Returns an array of all channels\n */\nexport const getAllConversations = createSelector(\n  [getChannelsSlice, getAllChannelsSlice],\n  (channels, allChannels) => {\n    return allChannels.channelIds.map((id) => channels.byId[id]);\n  }\n);\n"]},"metadata":{},"sourceType":"module"}
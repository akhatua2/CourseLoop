{"ast":null,"code":"var _jsxFileName = \"/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/conversationMembers/ConversationMembers/ConversationMembers.tsx\";\nimport React, { useEffect, useContext } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { getViewStates } from \"features/layout/Selectors\";\nimport { getUsersById } from \"features/users/userModel\";\nimport { getUsersByConversationId } from \"../conversationMemberModel\";\nimport { getPresenceByConversationId } from \"features/memberPresence/memberPresenceModel\";\nimport { MemberDescription } from \"../MemberDescription\";\nimport { getCurrentConversationId } from \"features/currentConversation/currentConversationModel\";\nimport { CrossIcon } from \"foundations/components/icons/CrossIcon\";\nimport { Wrapper, getAnimatedWrapperVariants, CloseIcon, ScrollableView, Header, Controls, ConversationIcon, IconWrapper, Details, Title, Channel } from \"./ConversationMembers.style\";\nimport { fetchChannelMembers, fetchHereNow } from \"pubnub-redux\";\nimport { usePubNub } from \"pubnub-react\";\nimport { conversationMembersViewHidden } from \"features/layout/LayoutActions\";\nimport { ThemeContext } from \"styled-components\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport getUniqueColor from \"foundations/utilities/getUniqueColor\";\nimport { getCurrentConversationDescription } from \"features/currentConversation/Header\";\nexport const getCurrentConversationMembers = createSelector([getUsersById, getCurrentConversationId, getUsersByConversationId, getPresenceByConversationId], (users, conversationId, conversationMemberships, conversationPresence) => {\n  let presence = conversationPresence[conversationId];\n  return conversationMemberships[conversationId] ? conversationMemberships[conversationId].map(user => {\n    return { ...users[user.id],\n      presence: presence ? presence.occupants.filter(occupant => {\n        return occupant.uuid === user.id;\n      }).length > 0 : false\n    };\n  }) : [];\n});\n\nconst orderByPresence = members => {\n  return members.sort((userA, userB) => userA.presence === userB.presence ? 0 : userA.presence ? -1 : 1);\n};\n\nconst ConversationMembers = () => {\n  const userId = useSelector(getLoggedInUserId);\n  const members = useSelector(getCurrentConversationMembers);\n  const currentConversationId = useSelector(getCurrentConversationId);\n  const dispatch = useDispatch();\n  const pubnub = usePubNub();\n  const views = useSelector(getViewStates);\n  const theme = useContext(ThemeContext);\n  const isMedium = useMediaQuery(theme.mediaQueries.medium);\n  const conversation = useSelector(getCurrentConversationDescription);\n  const conversationColor = getUniqueColor(conversation.name, theme.colors.avatars);\n  useEffect(() => {\n    if (members.length === 0) {\n      dispatch(fetchChannelMembers({\n        channel: currentConversationId,\n        include: {\n          UUIDFields: true,\n          customUUIDFields: true,\n          totalCount: false\n        }\n      }));\n      dispatch(fetchHereNow({\n        channels: [currentConversationId]\n      }));\n    }\n  }, [members, currentConversationId, pubnub, dispatch]);\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    animate: views.ConversationMembers ? \"open\" : \"closed\",\n    variants: getAnimatedWrapperVariants(isMedium, theme.sizes[4]),\n    transition: {\n      ease: \"linear\",\n      duration: 0.15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    onClick: () => {\n      dispatch(conversationMembersViewHidden());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CrossIcon, {\n    color: theme.colors.normalText,\n    title: \"close members list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IconWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ConversationIcon, {\n    color: conversationColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, \"#\"), /*#__PURE__*/React.createElement(Details, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Channel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, conversation.name)))), /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, \"Members\"), /*#__PURE__*/React.createElement(ScrollableView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, orderByPresence(members).map(user => /*#__PURE__*/React.createElement(MemberDescription, {\n    user: user,\n    key: user.id,\n    you: user.id === userId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport { ConversationMembers };","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/conversationMembers/ConversationMembers/ConversationMembers.tsx"],"names":["React","useEffect","useContext","useSelector","useDispatch","createSelector","getViewStates","getUsersById","getUsersByConversationId","getPresenceByConversationId","MemberDescription","getCurrentConversationId","CrossIcon","Wrapper","getAnimatedWrapperVariants","CloseIcon","ScrollableView","Header","Controls","ConversationIcon","IconWrapper","Details","Title","Channel","fetchChannelMembers","fetchHereNow","usePubNub","conversationMembersViewHidden","ThemeContext","useMediaQuery","getLoggedInUserId","getUniqueColor","getCurrentConversationDescription","getCurrentConversationMembers","users","conversationId","conversationMemberships","conversationPresence","presence","map","user","id","occupants","filter","occupant","uuid","length","orderByPresence","members","sort","userA","userB","ConversationMembers","userId","currentConversationId","dispatch","pubnub","views","theme","isMedium","mediaQueries","medium","conversation","conversationColor","name","colors","avatars","channel","include","UUIDFields","customUUIDFields","totalCount","channels","sizes","ease","duration","normalText"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { getViewStates } from \"features/layout/Selectors\";\nimport { UsersIndexedById, getUsersById } from \"features/users/userModel\";\nimport {\n  getUsersByConversationId,\n  MembershipHash,\n} from \"../conversationMemberModel\";\nimport {\n  getPresenceByConversationId,\n  ConversationPresence,\n} from \"features/memberPresence/memberPresenceModel\";\nimport { MemberDescription, UserFragment } from \"../MemberDescription\";\nimport { getCurrentConversationId } from \"features/currentConversation/currentConversationModel\";\nimport { CrossIcon } from \"foundations/components/icons/CrossIcon\";\nimport {\n  Wrapper,\n  getAnimatedWrapperVariants,\n  CloseIcon,\n  ScrollableView,\n  Header,\n  Controls,\n  ConversationIcon,\n  IconWrapper,\n  Details,\n  Title,\n  Channel,\n} from \"./ConversationMembers.style\";\nimport { fetchChannelMembers, fetchHereNow } from \"pubnub-redux\";\nimport { usePubNub } from \"pubnub-react\";\nimport { conversationMembersViewHidden } from \"features/layout/LayoutActions\";\nimport { ThemeContext } from \"styled-components\";\nimport { useMediaQuery } from \"foundations/hooks/useMediaQuery\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport getUniqueColor from \"foundations/utilities/getUniqueColor\";\nimport { getCurrentConversationDescription } from \"features/currentConversation/Header\";\n\nexport const getCurrentConversationMembers = createSelector(\n  [\n    getUsersById,\n    getCurrentConversationId,\n    getUsersByConversationId,\n    getPresenceByConversationId,\n  ],\n  (\n    users: UsersIndexedById,\n    conversationId: string,\n    conversationMemberships: MembershipHash,\n    conversationPresence: ConversationPresence\n  ): UserFragment[] => {\n    let presence = conversationPresence[conversationId];\n    return conversationMemberships[conversationId]\n      ? conversationMemberships[conversationId].map((user) => {\n          return {\n            ...users[user.id],\n            presence: presence\n              ? presence.occupants.filter((occupant) => {\n                  return occupant.uuid === user.id;\n                }).length > 0\n              : false,\n          };\n        })\n      : [];\n  }\n);\n\nconst orderByPresence = (members: UserFragment[]) => {\n  return members.sort((userA, userB) =>\n    userA.presence === userB.presence ? 0 : userA.presence ? -1 : 1\n  );\n};\nconst ConversationMembers = () => {\n  const userId = useSelector(getLoggedInUserId);\n  const members: UserFragment[] = useSelector(getCurrentConversationMembers);\n  const currentConversationId = useSelector(getCurrentConversationId);\n  const dispatch = useDispatch();\n  const pubnub = usePubNub();\n  const views = useSelector(getViewStates);\n  const theme = useContext(ThemeContext);\n  const isMedium = useMediaQuery(theme.mediaQueries.medium);\n  const conversation = useSelector(getCurrentConversationDescription);\n  const conversationColor = getUniqueColor(\n    conversation.name,\n    (theme.colors.avatars as unknown) as string[]\n  );\n\n  useEffect(() => {\n    if (members.length === 0) {\n      dispatch(\n        fetchChannelMembers({\n          channel: currentConversationId,\n          include: {\n            UUIDFields: true,\n            customUUIDFields: true,\n            totalCount: false,\n          },\n        })\n      );\n\n      dispatch(\n        fetchHereNow({\n          channels: [currentConversationId],\n        })\n      );\n    }\n  }, [members, currentConversationId, pubnub, dispatch]);\n\n  return (\n    <Wrapper\n      animate={views.ConversationMembers ? \"open\" : \"closed\"}\n      variants={getAnimatedWrapperVariants(isMedium, theme.sizes[4])}\n      transition={{ ease: \"linear\", duration: 0.15 }}\n    >\n      <Controls>\n        <CloseIcon\n          onClick={() => {\n            dispatch(conversationMembersViewHidden());\n          }}\n        >\n          <CrossIcon\n            color={theme.colors.normalText}\n            title=\"close members list\"\n          />\n        </CloseIcon>\n      </Controls>\n      <Header>\n        <IconWrapper>\n          <ConversationIcon color={conversationColor}>#</ConversationIcon>\n          <Details>\n            <Channel>{conversation.name}</Channel>\n          </Details>\n        </IconWrapper>\n      </Header>\n      <Title>Members</Title>\n      <ScrollableView>\n        {orderByPresence(members).map((user) => (\n          <MemberDescription\n            user={user}\n            key={user.id}\n            you={user.id === userId}\n          />\n        ))}\n      </ScrollableView>\n    </Wrapper>\n  );\n};\n\nexport { ConversationMembers };\n"]},"metadata":{},"sourceType":"module"}
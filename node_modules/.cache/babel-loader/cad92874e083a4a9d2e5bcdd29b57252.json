{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar MembershipActionType;\n\n(function (MembershipActionType) {\n  // fetchMemberships()\n  MembershipActionType[\"FETCH_MEMBERSHIPS_COMMAND\"] = \"pubnub/FETCH_MEMBERSHIPS_COMMAND\";\n  MembershipActionType[\"FETCHING_MEMBERSHIPS\"] = \"pubnub/FETCHING_MEMBERSHIPS\";\n  MembershipActionType[\"MEMBERSHIPS_RETRIEVED\"] = \"pubnub/MEMBERSHIPS_RETRIEVED\";\n  MembershipActionType[\"ERROR_FETCHING_MEMBERSHIPS\"] = \"pubnub/ERROR_FETCHING_MEMBERSHIPS\"; // setMemberships()\n\n  MembershipActionType[\"SET_MEMBERSHIPS_COMMAND\"] = \"pubnub/SET_MEMBERSHIPS_COMMAND\";\n  MembershipActionType[\"SETTING_MEMBERSHIPS\"] = \"pubnub/SETTING_MEMBERSHIPS\";\n  MembershipActionType[\"MEMBERSHIPS_SET\"] = \"pubnub/MEMBERSHIPS_SET\";\n  MembershipActionType[\"ERROR_SETTING_MEMBERSHIPS\"] = \"pubnub/ERROR_SETTING_MEMBERSHIPS\"; // removeMemberships()\n\n  MembershipActionType[\"REMOVE_MEMBERSHIPS_COMMAND\"] = \"pubnub/REMOVE_MEMBERSHIPS_COMMAND\";\n  MembershipActionType[\"REMOVING_MEMBERSHIPS\"] = \"pubnub/REMOVING_MEMBERSHIPS\";\n  MembershipActionType[\"MEMBERSHIPS_REMOVED\"] = \"pubnub/MEMBERSHIPS_REMOVED\";\n  MembershipActionType[\"ERROR_REMOVING_MEMBERSHIPS\"] = \"pubnub/ERROR_REMOVING_MEMBERSHIPS\"; // objects events\n\n  MembershipActionType[\"MEMBERSHIP_REMOVED_EVENT\"] = \"pubnub/MEMBERSHIP_REMOVED_EVENT\";\n  MembershipActionType[\"MEMBERSHIP_SET_EVENT\"] = \"pubnub/MEMBERSHIP_SET_EVENT\";\n})(MembershipActionType || (MembershipActionType = {}));\n\nvar removingMemberships = function removingMemberships(payload, meta) {\n  return {\n    type: MembershipActionType.REMOVING_MEMBERSHIPS,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar membershipsRemoved = function membershipsRemoved(payload, meta) {\n  return {\n    type: MembershipActionType.MEMBERSHIPS_REMOVED,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorRemovingMemberships = function errorRemovingMemberships(payload, meta) {\n  return {\n    type: MembershipActionType.ERROR_REMOVING_MEMBERSHIPS,\n    payload: payload,\n    meta: meta,\n    error: true\n  };\n};\n\nvar removeMemberships = function removeMemberships(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(removingMemberships(request, meta));\n      pubnub.api.objects.removeMemberships(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorRemovingMemberships(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = membershipsRemoved(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = MembershipActionType.REMOVE_MEMBERSHIPS_COMMAND;\n  return thunkFunction;\n};\n\nvar fetchingMemberships = function fetchingMemberships(payload, meta) {\n  return {\n    type: MembershipActionType.FETCHING_MEMBERSHIPS,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar membershipsRetrieved = function membershipsRetrieved(payload, meta) {\n  return {\n    type: MembershipActionType.MEMBERSHIPS_RETRIEVED,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorFetchingMemberships = function errorFetchingMemberships(payload, meta) {\n  return {\n    type: MembershipActionType.ERROR_FETCHING_MEMBERSHIPS,\n    payload: payload,\n    meta: meta,\n    error: true\n  };\n};\n\nvar fetchMemberships = function fetchMemberships(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(fetchingMemberships(request, meta));\n      pubnub.api.objects.getMemberships(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorFetchingMemberships(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = membershipsRetrieved(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = MembershipActionType.FETCH_MEMBERSHIPS_COMMAND;\n  return thunkFunction;\n};\n\nvar settingMemberships = function settingMemberships(payload, meta) {\n  return {\n    type: MembershipActionType.SETTING_MEMBERSHIPS,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar membershipsSet = function membershipsSet(payload, meta) {\n  return {\n    type: MembershipActionType.MEMBERSHIPS_SET,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorSettingMemberships = function errorSettingMemberships(payload, meta) {\n  return {\n    type: MembershipActionType.ERROR_SETTING_MEMBERSHIPS,\n    payload: payload,\n    meta: meta,\n    error: true\n  };\n};\n\nvar setMemberships = function setMemberships(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(settingMemberships(request, meta));\n      pubnub.api.objects.setMemberships(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorSettingMemberships(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = membershipsSet(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = MembershipActionType.SET_MEMBERSHIPS_COMMAND;\n  return thunkFunction;\n};\n\nvar ChannelMembersActionType;\n\n(function (ChannelMembersActionType) {\n  // fetchChannelMembers()\n  ChannelMembersActionType[\"FETCH_CHANNEL_MEMBERS_COMMAND\"] = \"pubnub/FETCH_CHANNEL_MEMBERS_COMMAND\";\n  ChannelMembersActionType[\"FETCHING_CHANNEL_MEMBERS\"] = \"pubnub/FETCHING_CHANNEL_MEMBERS\";\n  ChannelMembersActionType[\"CHANNEL_MEMBERS_RETRIEVED\"] = \"pubnub/CHANNEL_MEMBERS_RETRIEVED\";\n  ChannelMembersActionType[\"ERROR_FETCHING_CHANNEL_MEMBERS\"] = \"pubnub/ERROR_FETCHING_CHANNEL_MEMBERS\"; // setChannelMembers()\n\n  ChannelMembersActionType[\"SET_CHANNEL_MEMBERS_COMMAND\"] = \"pubnub/SET_CHANNEL_MEMBERS_COMMAND\";\n  ChannelMembersActionType[\"SETTING_CHANNEL_MEMBERS\"] = \"pubnub/SETTING_CHANNEL_MEMBERS\";\n  ChannelMembersActionType[\"CHANNEL_MEMBERS_SET\"] = \"pubnub/CHANNEL_MEMBERS_SET\";\n  ChannelMembersActionType[\"ERROR_SETTING_CHANNEL_MEMBERS\"] = \"pubnub/ERROR_SETTING_CHANNEL_MEMBERS\"; // removeChannelMembers()\n\n  ChannelMembersActionType[\"REMOVE_CHANNEL_MEMBERS_COMMAND\"] = \"pubnub/REMOVE_CHANNEL_MEMBERS_COMMAND\";\n  ChannelMembersActionType[\"REMOVING_CHANNEL_MEMBERS\"] = \"pubnub/REMOVING_CHANNEL_MEMBERS\";\n  ChannelMembersActionType[\"CHANNEL_MEMBERS_REMOVED\"] = \"pubnub/CHANNEL_MEMBERS_REMOVED\";\n  ChannelMembersActionType[\"ERROR_REMOVING_CHANNEL_MEMBERS\"] = \"pubnub/ERROR_REMOVING_CHANNEL_MEMBERS\";\n})(ChannelMembersActionType || (ChannelMembersActionType = {}));\n\nvar fetchingChannelMembers = function fetchingChannelMembers(payload, meta) {\n  return {\n    type: ChannelMembersActionType.FETCHING_CHANNEL_MEMBERS,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar channelMembersRetrieved = function channelMembersRetrieved(payload, meta) {\n  return {\n    type: ChannelMembersActionType.CHANNEL_MEMBERS_RETRIEVED,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorFetchingChannelMembers = function errorFetchingChannelMembers(payload, meta) {\n  return {\n    type: ChannelMembersActionType.ERROR_FETCHING_CHANNEL_MEMBERS,\n    payload: payload,\n    meta: meta,\n    error: true\n  };\n};\n\nvar fetchChannelMembers = function fetchChannelMembers(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(fetchingChannelMembers(request, meta));\n      pubnub.api.objects.getChannelMembers(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorFetchingChannelMembers(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = channelMembersRetrieved(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = ChannelMembersActionType.FETCH_CHANNEL_MEMBERS_COMMAND;\n  return thunkFunction;\n};\n\nvar settingChannelMembers = function settingChannelMembers(payload, meta) {\n  return {\n    type: ChannelMembersActionType.SETTING_CHANNEL_MEMBERS,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar channelMembersSet = function channelMembersSet(payload, meta) {\n  return {\n    type: ChannelMembersActionType.CHANNEL_MEMBERS_SET,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorSettingChannelMembers = function errorSettingChannelMembers(payload, meta) {\n  return {\n    type: ChannelMembersActionType.ERROR_SETTING_CHANNEL_MEMBERS,\n    payload: payload,\n    meta: meta,\n    error: true\n  };\n};\n\nvar setChannelMembers = function setChannelMembers(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(settingChannelMembers(request, meta));\n      pubnub.api.objects.setChannelMembers(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorSettingChannelMembers(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = channelMembersSet(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = ChannelMembersActionType.SET_CHANNEL_MEMBERS_COMMAND;\n  return thunkFunction;\n};\n\nvar removingChannelMembers = function removingChannelMembers(payload, meta) {\n  return {\n    type: ChannelMembersActionType.REMOVING_CHANNEL_MEMBERS,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar channelMembersRemoved = function channelMembersRemoved(payload, meta) {\n  return {\n    type: ChannelMembersActionType.CHANNEL_MEMBERS_REMOVED,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorRemovingChannelMembers = function errorRemovingChannelMembers(payload, meta) {\n  return {\n    type: ChannelMembersActionType.ERROR_REMOVING_CHANNEL_MEMBERS,\n    payload: payload,\n    meta: meta,\n    error: true\n  };\n};\n\nvar removeChannelMembers = function removeChannelMembers(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(removingChannelMembers(request, meta));\n      pubnub.api.objects.removeChannelMembers(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorRemovingChannelMembers(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = channelMembersRemoved(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = ChannelMembersActionType.REMOVE_CHANNEL_MEMBERS_COMMAND;\n  return thunkFunction;\n};\n\nvar MessageActionType;\n\n(function (MessageActionType) {\n  MessageActionType[\"SEND_MESSAGE_COMMAND\"] = \"pubnub/SEND_MESSAGE_COMMAND\";\n  MessageActionType[\"FETCH_MESSAGE_HISTORY_COMMAND\"] = \"pubnub/FETCH_MESSAGE_HISTORY_COMMAND\";\n  MessageActionType[\"MESSAGE_RECEIVED\"] = \"pubnub/MESSAGE_RECEIVED\";\n  MessageActionType[\"SENDING_MESSAGE\"] = \"pubnub/SENDING_MESSAGE\";\n  MessageActionType[\"MESSAGE_SENT\"] = \"pubnub/MESSAGE_SENT\";\n  MessageActionType[\"ERROR_SENDING_MESSAGE\"] = \"pubnub/ERROR_SENDING_MESSAGE\";\n  MessageActionType[\"FETCHING_MESSAGE_HISTORY\"] = \"pubnub/FETCHING_MESSAGE_HISTORY\";\n  MessageActionType[\"MESSAGE_HISTORY_RETRIEVED\"] = \"pubnub/MESSAGE_HISTORY_RETRIEVED\";\n  MessageActionType[\"ERROR_FETCHING_MESSAGE_HISTORY\"] = \"pubnub/ERROR_FETCHING_MESSAGE_HISTORY\";\n})(MessageActionType || (MessageActionType = {}));\n\nvar sendingMessage = function sendingMessage(payload, meta) {\n  return {\n    type: MessageActionType.SENDING_MESSAGE,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar messageSent = function messageSent(payload, meta) {\n  return {\n    type: MessageActionType.MESSAGE_SENT,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorSendingMessage = function errorSendingMessage(payload, meta) {\n  return {\n    type: MessageActionType.ERROR_SENDING_MESSAGE,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar sendMessage = function sendMessage(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(sendingMessage(request, meta));\n      pubnub.api.publish(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorSendingMessage(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = messageSent(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = MessageActionType.SEND_MESSAGE_COMMAND;\n  return thunkFunction;\n};\n\nvar SignalActionType;\n\n(function (SignalActionType) {\n  SignalActionType[\"SEND_SIGNAL_COMMAND\"] = \"pubnub/SEND_SIGNAL_COMMAND\";\n  SignalActionType[\"SIGNAL_RECEIVED\"] = \"pubnub/SIGNAL_RECEIVED\";\n  SignalActionType[\"SENDING_SIGNAL\"] = \"pubnub/SENDING_SIGNAL\";\n  SignalActionType[\"SIGNAL_SENT\"] = \"pubnub/SIGNAL_SENT\";\n  SignalActionType[\"ERROR_SENDING_SIGNAL\"] = \"pubnub/ERROR_SENDING_SIGNAL\";\n})(SignalActionType || (SignalActionType = {}));\n\nvar sendingSignal = function sendingSignal(payload, meta) {\n  return {\n    type: SignalActionType.SENDING_SIGNAL,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar signalSent = function signalSent(payload, meta) {\n  return {\n    type: SignalActionType.SIGNAL_SENT,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorSendingSignal = function errorSendingSignal(payload, meta) {\n  return {\n    type: SignalActionType.ERROR_SENDING_SIGNAL,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar sendSignal = function sendSignal(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(sendingSignal(request, meta));\n      pubnub.api.signal(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorSendingSignal(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = signalSent(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = SignalActionType.SEND_SIGNAL_COMMAND;\n  return thunkFunction;\n};\n\nvar fetchingMessageHistory = function fetchingMessageHistory(payload, meta) {\n  return {\n    type: MessageActionType.FETCHING_MESSAGE_HISTORY,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar messageHistoryRetrieved = function messageHistoryRetrieved(payload, meta) {\n  return {\n    type: MessageActionType.MESSAGE_HISTORY_RETRIEVED,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorFetchingMessageHistory = function errorFetchingMessageHistory(payload, meta) {\n  return {\n    type: MessageActionType.ERROR_FETCHING_MESSAGE_HISTORY,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar fetchMessageHistory = function fetchMessageHistory(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(fetchingMessageHistory(request, meta));\n      pubnub.api.history(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorFetchingMessageHistory(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = messageHistoryRetrieved(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = MessageActionType.FETCH_MESSAGE_HISTORY_COMMAND;\n  return thunkFunction;\n};\n\nvar ChannelDataActionType;\n\n(function (ChannelDataActionType) {\n  // fetchAllChannelData()\n  ChannelDataActionType[\"FETCH_ALL_CHANNEL_DATA_COMMAND\"] = \"pubnub/FETCH_ALL_CHANNEL_DATA_COMMAND\";\n  ChannelDataActionType[\"FETCHING_ALL_CHANNEL_DATA\"] = \"pubnub/FETCHING_ALL_CHANNEL_DATA\";\n  ChannelDataActionType[\"ALL_CHANNEL_DATA_RETRIEVED\"] = \"pubnub/ALL_CHANNEL_DATA_RETRIEVED\";\n  ChannelDataActionType[\"ERROR_FETCHING_ALL_CHANNEL_DATA\"] = \"pubnub/ERROR_FETCHING_ALL_CHANNEL_DATA\"; // fetchChannelData()\n\n  ChannelDataActionType[\"FETCH_CHANNEL_DATA_COMMAND\"] = \"pubnub/FETCH_CHANNEL_DATA_COMMAND\";\n  ChannelDataActionType[\"FETCHING_CHANNEL_DATA\"] = \"pubnub/FETCHING_CHANNEL_DATA\";\n  ChannelDataActionType[\"CHANNEL_DATA_RETRIEVED\"] = \"pubnub/CHANNEL_DATA_RETRIEVED\";\n  ChannelDataActionType[\"ERROR_FETCHING_CHANNEL_DATA\"] = \"pubnub/ERROR_FETCHING_CHANNEL_DATA\"; // setChannelData()\n\n  ChannelDataActionType[\"SET_CHANNEL_DATA_COMMAND\"] = \"pubnub/SET_CHANNEL_DATA_COMMAND\";\n  ChannelDataActionType[\"SETTING_CHANNEL_DATA\"] = \"pubnub/SETTING_CHANNEL_DATA\";\n  ChannelDataActionType[\"CHANNEL_DATA_SET\"] = \"pubnub/CHANNEL_DATA_SET\";\n  ChannelDataActionType[\"ERROR_SETTING_CHANNEL_DATA\"] = \"pubnub/ERROR_SETTING_CHANNEL_DATA\"; // removeChannelData()\n\n  ChannelDataActionType[\"REMOVE_CHANNEL_DATA_COMMAND\"] = \"pubnub/REMOVE_CHANNEL_DATA_COMMAND\";\n  ChannelDataActionType[\"REMOVING_CHANNEL_DATA\"] = \"pubnub/REMOVING_CHANNEL_DATA\";\n  ChannelDataActionType[\"CHANNEL_DATA_REMOVED\"] = \"pubnub/CHANNEL_DATA_REMOVED\";\n  ChannelDataActionType[\"ERROR_REMOVING_CHANNEL_DATA\"] = \"pubnub/ERROR_REMOVING_CHANNEL_DATA\"; // objects events\n\n  ChannelDataActionType[\"CHANNEL_DATA_SET_EVENT\"] = \"pubnub/CHANNEL_DATA_SET_EVENT\";\n  ChannelDataActionType[\"CHANNEL_DATA_REMOVED_EVENT\"] = \"pubnub/CHANNEL_DATA_REMOVED_EVENT\";\n})(ChannelDataActionType || (ChannelDataActionType = {}));\n\nvar removingChannelData = function removingChannelData(payload, meta) {\n  return {\n    type: ChannelDataActionType.REMOVING_CHANNEL_DATA,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar channelDataRemoved = function channelDataRemoved(payload, meta) {\n  return {\n    type: ChannelDataActionType.CHANNEL_DATA_REMOVED,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorRemovingChannelData = function errorRemovingChannelData(payload, meta) {\n  return {\n    type: ChannelDataActionType.ERROR_REMOVING_CHANNEL_DATA,\n    payload: payload,\n    meta: meta,\n    error: true\n  };\n};\n\nvar removeChannelData = function removeChannelData(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(removingChannelData(request, meta));\n      pubnub.api.objects.removeChannelMetadata({\n        channel: request.channel\n      }, function (status) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorRemovingChannelData(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            status: status\n          };\n          var action = channelDataRemoved(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = ChannelDataActionType.REMOVE_CHANNEL_DATA_COMMAND;\n  return thunkFunction;\n};\n\nvar fetchingChannelData = function fetchingChannelData(payload, meta) {\n  return {\n    type: ChannelDataActionType.FETCHING_CHANNEL_DATA,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar channelDataRetrieved = function channelDataRetrieved(payload, meta) {\n  return {\n    type: ChannelDataActionType.CHANNEL_DATA_RETRIEVED,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorFetchingChannelData = function errorFetchingChannelData(payload, meta) {\n  return {\n    type: ChannelDataActionType.ERROR_FETCHING_CHANNEL_DATA,\n    payload: payload,\n    meta: meta,\n    error: true\n  };\n};\n\nvar fetchChannelData = function fetchChannelData(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(fetchingChannelData(_extends({}, request), meta));\n      pubnub.api.objects.getChannelMetadata(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorFetchingChannelData(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = channelDataRetrieved(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = ChannelDataActionType.FETCH_CHANNEL_DATA_COMMAND;\n  return thunkFunction;\n};\n\nvar fetchingAllChannelData = function fetchingAllChannelData(payload, meta) {\n  return {\n    type: ChannelDataActionType.FETCHING_ALL_CHANNEL_DATA,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar allChannelDataRetrieved = function allChannelDataRetrieved(payload, meta) {\n  return {\n    type: ChannelDataActionType.ALL_CHANNEL_DATA_RETRIEVED,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorFetchingAllChannelData = function errorFetchingAllChannelData(payload, meta) {\n  return {\n    type: ChannelDataActionType.ERROR_FETCHING_ALL_CHANNEL_DATA,\n    payload: payload,\n    meta: meta,\n    error: true\n  };\n};\n\nvar fetchAllChannelData = function fetchAllChannelData(request, meta) {\n  if (request === void 0) {\n    request = {};\n  }\n\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(fetchingAllChannelData(request, meta));\n      pubnub.api.objects.getAllChannelMetadata(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorFetchingAllChannelData(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = allChannelDataRetrieved(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = ChannelDataActionType.FETCH_ALL_CHANNEL_DATA_COMMAND;\n  return thunkFunction;\n};\n\nvar settingChannelData = function settingChannelData(payload, meta) {\n  return {\n    type: ChannelDataActionType.SETTING_CHANNEL_DATA,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar channelDataSet = function channelDataSet(payload, meta) {\n  return {\n    type: ChannelDataActionType.CHANNEL_DATA_SET,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorSettingChannelData = function errorSettingChannelData(payload, meta) {\n  return {\n    type: ChannelDataActionType.ERROR_SETTING_CHANNEL_DATA,\n    payload: payload,\n    meta: meta,\n    error: true\n  };\n};\n\nvar setChannelData = function setChannelData(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(settingChannelData(request, meta));\n      pubnub.api.objects.setChannelMetadata(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorSettingChannelData(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = channelDataSet(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = ChannelDataActionType.SET_CHANNEL_DATA_COMMAND;\n  return thunkFunction;\n};\n\nvar UserDataActionType;\n\n(function (UserDataActionType) {\n  // fetchAllUserData()\n  UserDataActionType[\"FETCH_ALL_USER_DATA_COMMAND\"] = \"pubnub/FETCH_ALL_USER_DATA_COMMAND\";\n  UserDataActionType[\"FETCHING_ALL_USER_DATA\"] = \"pubnub/FETCHING_ALL_USER_DATA\";\n  UserDataActionType[\"ALL_USER_DATA_RETRIEVED\"] = \"pubnub/ALL_USER_DATA_RETRIEVED\";\n  UserDataActionType[\"ERROR_FETCHING_ALL_USER_DATA\"] = \"pubnub/ERROR_FETCHING_ALL_USER_DATA\"; // fetchUserData()\n\n  UserDataActionType[\"FETCH_USER_DATA_COMMAND\"] = \"pubnub/FETCH_USER_DATA_COMMAND\";\n  UserDataActionType[\"FETCHING_USER_DATA\"] = \"pubnub/FETCHING_USER_DATA\";\n  UserDataActionType[\"USER_DATA_RETRIEVED\"] = \"pubnub/USER_DATA_RETRIEVED\";\n  UserDataActionType[\"ERROR_FETCHING_USER_DATA\"] = \"pubnub/ERROR_FETCHING_USER_DATA\"; // setUserData()\n\n  UserDataActionType[\"SET_USER_DATA_COMMAND\"] = \"pubnub/SET_USER_DATA_COMMAND\";\n  UserDataActionType[\"SETTING_USER_DATA\"] = \"pubnub/SETTING_USER_DATA\";\n  UserDataActionType[\"USER_DATA_SET\"] = \"pubnub/USER_DATA_SET\";\n  UserDataActionType[\"ERROR_SETTING_USER_DATA\"] = \"pubnub/ERROR_SETTING_USER_DATA\"; // removeUserData()\n\n  UserDataActionType[\"REMOVE_USER_DATA_COMMAND\"] = \"pubnub/REMOVE_USER_DATA_COMMAND\";\n  UserDataActionType[\"REMOVING_USER_DATA\"] = \"pubnub/REMOVING_USER_DATA\";\n  UserDataActionType[\"USER_DATA_REMOVED\"] = \"pubnub/USER_DATA_REMOVED\";\n  UserDataActionType[\"ERROR_REMOVING_USER_DATA\"] = \"pubnub/ERROR_REMOVING_USER_DATA\"; // objects events\n\n  UserDataActionType[\"USER_DATA_SET_EVENT\"] = \"pubnub/USER_DATA_SET_EVENT\";\n  UserDataActionType[\"USER_DATA_REMOVED_EVENT\"] = \"pubnub/USER_DATA_REMOVED_EVENT\";\n})(UserDataActionType || (UserDataActionType = {}));\n\nvar removingUserData = function removingUserData(payload, meta) {\n  return {\n    type: UserDataActionType.REMOVING_USER_DATA,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar UserDataRemoved = function UserDataRemoved(payload, meta) {\n  return {\n    type: UserDataActionType.USER_DATA_REMOVED,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorRemovingUserData = function errorRemovingUserData(payload, meta) {\n  return {\n    type: UserDataActionType.ERROR_REMOVING_USER_DATA,\n    payload: payload,\n    meta: meta,\n    error: true\n  };\n};\n\nvar removeUserData = function removeUserData(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(removingUserData(request, meta));\n      pubnub.api.objects.removeUUIDMetadata({\n        uuid: request.uuid\n      }, function (status) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorRemovingUserData(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            status: status\n          };\n          var action = UserDataRemoved(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = UserDataActionType.REMOVE_USER_DATA_COMMAND;\n  return thunkFunction;\n};\n\nvar fetchingUserData = function fetchingUserData(payload, meta) {\n  return {\n    type: UserDataActionType.FETCHING_USER_DATA,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar UserDataRetrieved = function UserDataRetrieved(payload, meta) {\n  return {\n    type: UserDataActionType.USER_DATA_RETRIEVED,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorFetchingUserData = function errorFetchingUserData(payload, meta) {\n  return {\n    type: UserDataActionType.ERROR_FETCHING_USER_DATA,\n    payload: payload,\n    meta: meta,\n    error: true\n  };\n};\n\nvar fetchUserData = function fetchUserData(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(fetchingUserData(_extends({}, request), meta));\n      pubnub.api.objects.getUUIDMetadata(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorFetchingUserData(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = UserDataRetrieved(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = UserDataActionType.FETCH_USER_DATA_COMMAND;\n  return thunkFunction;\n};\n\nvar fetchingAllUserData = function fetchingAllUserData(payload, meta) {\n  return {\n    type: UserDataActionType.FETCHING_ALL_USER_DATA,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar allUserDataRetrieved = function allUserDataRetrieved(payload, meta) {\n  return {\n    type: UserDataActionType.ALL_USER_DATA_RETRIEVED,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorFetchingAllUserData = function errorFetchingAllUserData(payload, meta) {\n  return {\n    type: UserDataActionType.ERROR_FETCHING_ALL_USER_DATA,\n    payload: payload,\n    meta: meta,\n    error: true\n  };\n};\n\nvar fetchAllUserData = function fetchAllUserData(request, meta) {\n  if (request === void 0) {\n    request = {};\n  }\n\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(fetchingAllUserData(request, meta));\n      pubnub.api.objects.getAllUUIDMetadata(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorFetchingAllUserData(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = allUserDataRetrieved(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = UserDataActionType.FETCH_ALL_USER_DATA_COMMAND;\n  return thunkFunction;\n};\n\nvar settingUserData = function settingUserData(payload, meta) {\n  return {\n    type: UserDataActionType.SETTING_USER_DATA,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar UserDataSet = function UserDataSet(payload, meta) {\n  return {\n    type: UserDataActionType.USER_DATA_SET,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorSettingUserData = function errorSettingUserData(payload, meta) {\n  return {\n    type: UserDataActionType.ERROR_SETTING_USER_DATA,\n    payload: payload,\n    meta: meta,\n    error: true\n  };\n};\n\nvar setUserData = function setUserData(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(settingUserData(request, meta));\n      pubnub.api.objects.setUUIDMetadata(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorSettingUserData(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = UserDataSet(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = UserDataActionType.SET_USER_DATA_COMMAND;\n  return thunkFunction;\n};\n\nvar PresenceActionType;\n\n(function (PresenceActionType) {\n  PresenceActionType[\"HERE_NOW_COMMAND\"] = \"pubnub/HERE_NOW_COMMAND\";\n  PresenceActionType[\"PRESENCE_STATE_COMMAND\"] = \"pubnub/PRESENCE_STATE_COMMAND\";\n  PresenceActionType[\"FETCHING_HERE_NOW\"] = \"pubnub/FETCHING_HERE_NOW\";\n  PresenceActionType[\"HERE_NOW_RETRIEVED\"] = \"pubnub/HERE_NOW_RETRIEVED\";\n  PresenceActionType[\"ERROR_FETCHING_HERE_NOW\"] = \"pubnub/ERROR_FETCHING_HERE_NOW\";\n  PresenceActionType[\"FETCHING_PRESENCE_STATE\"] = \"pubnub/FETCHING_PRESENCE_STATE\";\n  PresenceActionType[\"PRESENCE_STATE_RETRIEVED\"] = \"pubnub/PRESENCE_STATE_RETRIEVED\";\n  PresenceActionType[\"ERROR_FETCHING_PRESENCE_STATE\"] = \"pubnub/ERROR_FETCHING_PRESENCE_STATE\";\n  PresenceActionType[\"JOIN_EVENT\"] = \"pubnub/JOIN_EVENT\";\n  PresenceActionType[\"LEAVE_EVENT\"] = \"pubnub/LEAVE_EVENT\";\n  PresenceActionType[\"TIMEOUT_EVENT\"] = \"pubnub/TIMEOUT_EVENT\";\n  PresenceActionType[\"STATE_CHANGE_EVENT\"] = \"pubnub/STATE_CHANGE_EVENT\";\n})(PresenceActionType || (PresenceActionType = {}));\n\nvar fetchingHereNow = function fetchingHereNow(payload, meta) {\n  return {\n    type: PresenceActionType.FETCHING_HERE_NOW,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar hereNowRetrieved = function hereNowRetrieved(payload, meta) {\n  return {\n    type: PresenceActionType.HERE_NOW_RETRIEVED,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorFetchingHereNow = function errorFetchingHereNow(payload, meta) {\n  return {\n    type: PresenceActionType.ERROR_FETCHING_HERE_NOW,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar fetchHereNow = function fetchHereNow(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(fetchingHereNow(request, meta));\n      pubnub.api.hereNow(_extends(_extends({}, request), {}, {\n        includeUUIDs: true,\n        includeState: false\n      }), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorFetchingHereNow(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = hereNowRetrieved(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = PresenceActionType.HERE_NOW_COMMAND;\n  return thunkFunction;\n};\n\nvar fetchingPresenceState = function fetchingPresenceState(payload, meta) {\n  return {\n    type: PresenceActionType.FETCHING_PRESENCE_STATE,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar presenceStateRetrieved = function presenceStateRetrieved(payload, meta) {\n  return {\n    type: PresenceActionType.PRESENCE_STATE_RETRIEVED,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar errorFetchingPresenceState = function errorFetchingPresenceState(payload, meta) {\n  return {\n    type: PresenceActionType.ERROR_FETCHING_PRESENCE_STATE,\n    payload: payload,\n    meta: meta\n  };\n};\n\nvar fetchPresenceState = function fetchPresenceState(request, meta) {\n  var thunkFunction = function thunkFunction(dispatch, _getState, _ref) {\n    var pubnub = _ref.pubnub;\n    return new Promise(function (resolve, reject) {\n      dispatch(fetchingPresenceState(request, meta));\n      pubnub.api.getState(_extends({}, request), function (status, response) {\n        if (status.error) {\n          var payload = {\n            request: request,\n            status: status\n          };\n          dispatch(errorFetchingPresenceState(payload, meta));\n          reject(payload);\n        } else {\n          var _payload = {\n            request: request,\n            response: response,\n            status: status\n          };\n          var action = presenceStateRetrieved(_payload, meta);\n          dispatch(action);\n          resolve(action);\n        }\n      });\n    });\n  };\n\n  thunkFunction.type = PresenceActionType.PRESENCE_STATE_COMMAND;\n  return thunkFunction;\n};\n\nvar UserDataSet$1 = function UserDataSet(payload) {\n  return {\n    type: UserDataActionType.USER_DATA_SET_EVENT,\n    payload: payload\n  };\n};\n\nvar UserDataRemoved$1 = function UserDataRemoved(payload) {\n  return {\n    type: UserDataActionType.USER_DATA_REMOVED_EVENT,\n    payload: payload\n  };\n};\n\nvar createUserDataListener = function createUserDataListener(dispatch) {\n  return {\n    objects: function objects(payload) {\n      if (payload.message.type !== 'uuid') {\n        return;\n      }\n\n      switch (payload.message.event) {\n        case 'set':\n          dispatch(UserDataSet$1(payload.message));\n          break;\n\n        case 'delete':\n          dispatch(UserDataRemoved$1(payload.message));\n          break;\n      }\n    }\n  };\n};\n\nvar channelDataSet$1 = function channelDataSet(payload) {\n  return {\n    type: ChannelDataActionType.CHANNEL_DATA_SET_EVENT,\n    payload: payload\n  };\n};\n\nvar channelDataRemoved$1 = function channelDataRemoved(payload) {\n  return {\n    type: ChannelDataActionType.CHANNEL_DATA_REMOVED_EVENT,\n    payload: payload\n  };\n};\n\nvar createChannelDataListener = function createChannelDataListener(dispatch) {\n  return {\n    objects: function objects(payload) {\n      if (payload.message.type !== 'channel') {\n        return;\n      }\n\n      switch (payload.message.event) {\n        case 'set':\n          dispatch(channelDataSet$1(payload.message));\n          break;\n\n        case 'delete':\n          dispatch(channelDataRemoved$1(payload.message));\n          break;\n      }\n    }\n  };\n};\n\nvar membershipSetEventRecieved = function membershipSetEventRecieved(payload) {\n  return {\n    type: MembershipActionType.MEMBERSHIP_SET_EVENT,\n    payload: payload\n  };\n};\n\nvar membershipRemovedEventRecieved = function membershipRemovedEventRecieved(payload) {\n  return {\n    type: MembershipActionType.MEMBERSHIP_REMOVED_EVENT,\n    payload: payload\n  };\n};\n\nvar createMembershipListener = function createMembershipListener(dispatch) {\n  return {\n    objects: function objects(payload) {\n      if (payload.message.type === 'membership') {\n        switch (payload.message.event) {\n          case 'set':\n            dispatch(membershipSetEventRecieved(payload.message));\n            break;\n\n          case 'delete':\n            dispatch(membershipRemovedEventRecieved(payload.message));\n            break;\n        }\n      }\n    }\n  };\n};\n\nvar messageReceived = function messageReceived(payload) {\n  return {\n    type: MessageActionType.MESSAGE_RECEIVED,\n    payload: payload\n  };\n};\n\nvar createMessageListener = function createMessageListener(dispatch) {\n  return {\n    message: function message(payload) {\n      return dispatch(messageReceived(payload));\n    }\n  };\n};\n\nvar PresenceCategory;\n\n(function (PresenceCategory) {\n  PresenceCategory[\"JOIN\"] = \"join\";\n  PresenceCategory[\"STATE_CHANGE\"] = \"state-change\";\n  PresenceCategory[\"LEAVE\"] = \"leave\";\n  PresenceCategory[\"TIMEOUT\"] = \"timeout\";\n})(PresenceCategory || (PresenceCategory = {}));\n\nvar userJoin = function userJoin(payload) {\n  return {\n    type: PresenceActionType.JOIN_EVENT,\n    payload: payload\n  };\n};\n\nvar userLeave = function userLeave(payload) {\n  return {\n    type: PresenceActionType.LEAVE_EVENT,\n    payload: payload\n  };\n};\n\nvar userTimeout = function userTimeout(payload) {\n  return {\n    type: PresenceActionType.TIMEOUT_EVENT,\n    payload: payload\n  };\n};\n\nvar userStateChange = function userStateChange(payload) {\n  return {\n    type: PresenceActionType.STATE_CHANGE_EVENT,\n    payload: payload\n  };\n};\n\nvar createPresenceListener = function createPresenceListener(dispatch) {\n  return {\n    presence: function presence(payload) {\n      switch (payload.action) {\n        case PresenceCategory.JOIN:\n          dispatch(userJoin(payload));\n          break;\n\n        case PresenceCategory.LEAVE:\n          dispatch(userLeave(payload));\n          break;\n\n        case PresenceCategory.TIMEOUT:\n          dispatch(userTimeout(payload));\n          break;\n\n        case PresenceCategory.STATE_CHANGE:\n          dispatch(userStateChange(payload));\n          break;\n      }\n    }\n  };\n};\n\nvar signalReceived = function signalReceived(payload) {\n  return {\n    type: SignalActionType.SIGNAL_RECEIVED,\n    payload: payload\n  };\n};\n\nvar createSignalListener = function createSignalListener(dispatch) {\n  return {\n    signal: function signal(payload) {\n      return dispatch(signalReceived(payload));\n    }\n  };\n};\n\nvar ErrorStatusCategory;\n\n(function (ErrorStatusCategory) {\n  ErrorStatusCategory[\"PN_NETWORK_ISSUES_CATEGORY\"] = \"PNNetworkIssuesCategory\";\n  ErrorStatusCategory[\"PN_ACCES_DENIED_CATEGORY\"] = \"PNAccessDeniedCategory\";\n  ErrorStatusCategory[\"PN_MALFORMED_RESPONSE_CATEGORY\"] = \"PNMalformedResponseCategory\";\n  ErrorStatusCategory[\"PN_BAD_REQUEST_CATEGORY\"] = \"PNBadRequestCategory\";\n  ErrorStatusCategory[\"PN_DECRYPTION_ERROR_CATEGORY\"] = \"PNDecryptionErrorCategory\";\n  ErrorStatusCategory[\"PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY\"] = \"PNRequestMessageCountExceedCategory\";\n  ErrorStatusCategory[\"PN_UNKNOWN_CATEGORY\"] = \"PNUnknownCategory\";\n})(ErrorStatusCategory || (ErrorStatusCategory = {}));\n\nvar ErrorStatusActionType;\n\n(function (ErrorStatusActionType) {\n  ErrorStatusActionType[\"NETWORK_ISSUES_EVENT\"] = \"pubnub/NETWORK_ISSUES_EVENT\";\n  ErrorStatusActionType[\"ACCESS_DENIED_EVENT\"] = \"pubnub/ACCESS_DENIED_EVENT\";\n  ErrorStatusActionType[\"MALFORMED_RESPONSE_EVENT\"] = \"pubnub/MALFORMED_RESPONSE_EVENT\";\n  ErrorStatusActionType[\"BAD_REQUEST_EVENT\"] = \"pubnub/BAD_REQUEST_EVENT\";\n  ErrorStatusActionType[\"DECRYPTION_ERROR_EVENT\"] = \"pubnub/DECRYPTION_ERROR_EVENT\";\n  ErrorStatusActionType[\"TIMEOUT_CONNECTION_EVENT\"] = \"pubnub/TIMEOUT_CONNECTION_EVENT\";\n  ErrorStatusActionType[\"REQUEST_MESSAGE_COUNT_EXCEED_EVENT\"] = \"pubnub/REQUEST_MESSAGE_COUNT_EXCEED_EVENT\";\n  ErrorStatusActionType[\"UNKNOWN_EVENT\"] = \"pubnub/UNKNOWN_EVENT\";\n})(ErrorStatusActionType || (ErrorStatusActionType = {}));\n\nvar networkIssues = function networkIssues(payload) {\n  return {\n    type: ErrorStatusActionType.NETWORK_ISSUES_EVENT,\n    payload: payload\n  };\n};\n\nvar accessDenied = function accessDenied(payload) {\n  return {\n    type: ErrorStatusActionType.ACCESS_DENIED_EVENT,\n    payload: payload\n  };\n};\n\nvar malformedResponse = function malformedResponse(payload) {\n  return {\n    type: ErrorStatusActionType.MALFORMED_RESPONSE_EVENT,\n    payload: payload\n  };\n};\n\nvar badRequest = function badRequest(payload) {\n  return {\n    type: ErrorStatusActionType.BAD_REQUEST_EVENT,\n    payload: payload\n  };\n};\n\nvar decryptionError = function decryptionError(payload) {\n  return {\n    type: ErrorStatusActionType.DECRYPTION_ERROR_EVENT,\n    payload: payload\n  };\n};\n\nvar timeoutConnection = function timeoutConnection(payload) {\n  return {\n    type: ErrorStatusActionType.TIMEOUT_CONNECTION_EVENT,\n    payload: payload\n  };\n};\n\nvar requestMessageCountExceeded = function requestMessageCountExceeded(payload) {\n  return {\n    type: ErrorStatusActionType.REQUEST_MESSAGE_COUNT_EXCEED_EVENT,\n    payload: payload\n  };\n};\n\nvar unknown = function unknown(payload) {\n  return {\n    type: ErrorStatusActionType.UNKNOWN_EVENT,\n    payload: payload\n  };\n};\n\nvar createErrorStatusListener = function createErrorStatusListener(dispatch) {\n  return {\n    status: function status(payload) {\n      switch (payload.category) {\n        case ErrorStatusCategory.PN_ACCES_DENIED_CATEGORY:\n          dispatch(accessDenied(payload));\n          break;\n\n        case ErrorStatusCategory.PN_MALFORMED_RESPONSE_CATEGORY:\n          dispatch(malformedResponse(payload));\n          break;\n\n        case ErrorStatusCategory.PN_BAD_REQUEST_CATEGORY:\n          dispatch(badRequest(payload));\n          break;\n\n        case ErrorStatusCategory.PN_DECRYPTION_ERROR_CATEGORY:\n          dispatch(decryptionError(payload));\n          break;\n\n        case ErrorStatusCategory.PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY:\n          dispatch(requestMessageCountExceeded(payload));\n          break;\n\n        case ErrorStatusCategory.PN_UNKNOWN_CATEGORY:\n          dispatch(unknown(payload));\n          break;\n      }\n    }\n  };\n};\n\nvar NetworkStatusActionType;\n\n(function (NetworkStatusActionType) {\n  NetworkStatusActionType[\"NETWORK_UP_EVENT\"] = \"pubnub/NETWORK_UP_EVENT\";\n  NetworkStatusActionType[\"NETWORK_DOWN_EVENT\"] = \"pubnub/NETWORK_DOWN_EVENT\";\n})(NetworkStatusActionType || (NetworkStatusActionType = {}));\n\nvar NetworkStatusCategory;\n\n(function (NetworkStatusCategory) {\n  NetworkStatusCategory[\"PN_NETWORK_UP_CATEGORY\"] = \"PNNetworkUpCategory\";\n  NetworkStatusCategory[\"PN_NETWORK_DOWN_CATEGORY\"] = \"PNNetworkDownCategory\";\n  NetworkStatusCategory[\"PN_RECONNECTED_CATEGORY\"] = \"PNReconnectedCategory\";\n  NetworkStatusCategory[\"PN_CONNECTED_CATEGORY\"] = \"PNConnectedCategory\";\n  NetworkStatusCategory[\"PN_TIMEOUT_CATEGORY\"] = \"PNTimeoutCategory\";\n})(NetworkStatusCategory || (NetworkStatusCategory = {}));\n\nvar networkUp = function networkUp() {\n  return {\n    type: NetworkStatusActionType.NETWORK_UP_EVENT\n  };\n};\n\nvar networkDown = function networkDown() {\n  return {\n    type: NetworkStatusActionType.NETWORK_DOWN_EVENT\n  };\n};\n\nvar createNetworkStatusListener = function createNetworkStatusListener(dispatch) {\n  return {\n    status: function status(payload) {\n      switch (payload.category) {\n        case NetworkStatusCategory.PN_NETWORK_UP_CATEGORY:\n          dispatch(networkUp());\n          break;\n\n        case NetworkStatusCategory.PN_NETWORK_DOWN_CATEGORY:\n          dispatch(networkDown());\n          break;\n\n        case NetworkStatusCategory.PN_RECONNECTED_CATEGORY:\n          dispatch(networkUp());\n          break;\n\n        case NetworkStatusCategory.PN_CONNECTED_CATEGORY:\n          dispatch(networkUp());\n          break;\n\n        case NetworkStatusCategory.PN_TIMEOUT_CATEGORY:\n          dispatch(networkDown());\n          break;\n      }\n    }\n  };\n};\n\nvar SubscriptionStatusActionType;\n\n(function (SubscriptionStatusActionType) {\n  SubscriptionStatusActionType[\"RECONNECTED_EVENT\"] = \"pubnub/RECONNECTED_EVENT\";\n  SubscriptionStatusActionType[\"CONNECTED_EVENT\"] = \"pubnub/CONNECTED_EVENT\";\n})(SubscriptionStatusActionType || (SubscriptionStatusActionType = {}));\n\nvar SubscriptionStatusCategory;\n\n(function (SubscriptionStatusCategory) {\n  SubscriptionStatusCategory[\"PN_CONNECTED_CATEGORY\"] = \"PNConnectedCategory\";\n  SubscriptionStatusCategory[\"PN_RECONNECTED_CATEGORY\"] = \"PNReconnectedCategory\";\n})(SubscriptionStatusCategory || (SubscriptionStatusCategory = {}));\n\nvar reconnected = function reconnected(payload) {\n  return {\n    type: SubscriptionStatusActionType.RECONNECTED_EVENT,\n    payload: payload\n  };\n};\n\nvar connected = function connected(payload) {\n  return {\n    type: SubscriptionStatusActionType.CONNECTED_EVENT,\n    payload: payload\n  };\n};\n\nvar createSubscriptionStatusListener = function createSubscriptionStatusListener(dispatch) {\n  return {\n    status: function status(payload) {\n      switch (payload.category) {\n        case SubscriptionStatusCategory.PN_CONNECTED_CATEGORY:\n          dispatch(connected(payload));\n          break;\n\n        case SubscriptionStatusCategory.PN_RECONNECTED_CATEGORY:\n          dispatch(reconnected(payload));\n          break;\n      }\n    }\n  };\n};\n/**\r\n * Combines multiple listener objects into one object that supports all of them.\r\n *\r\n * @param listeners Array of listener objects.\r\n * @returns The combined listener Object.\r\n */\n\n\nvar combineListeners = function combineListeners() {\n  for (var _len = arguments.length, listeners = new Array(_len), _key = 0; _key < _len; _key++) {\n    listeners[_key] = arguments[_key];\n  }\n\n  return Object.assign.apply(Object, [{}].concat(mergeListenersByType(listeners)));\n};\n/**\r\n * Take a list of listeners and combine listeners of the same type together.\r\n *\r\n * @param listeners Array of listener objects.\r\n * @returns Array of listener objects with like types combined to single listener object.\r\n */\n\n\nvar mergeListenersByType = function mergeListenersByType(listeners) {\n  var result = [];\n  var incomingListeners = {}; // group the listeners by type so we can combine them\n\n  listeners.forEach(function (listener) {\n    var allowedListeners = ['status', 'message', 'presence', 'signal', 'messageAction', 'objects'];\n\n    for (var _i = 0, _allowedListeners = allowedListeners; _i < _allowedListeners.length; _i++) {\n      var listenerType = _allowedListeners[_i];\n\n      if (listener[listenerType] !== undefined) {\n        var _incomingListeners$li;\n\n        if (incomingListeners[listenerType] === undefined) {\n          incomingListeners[listenerType] = [];\n        }\n\n        (_incomingListeners$li = incomingListeners[listenerType]) === null || _incomingListeners$li === void 0 ? void 0 : _incomingListeners$li.push(listener);\n      }\n    }\n  }); // merge the grouped listeners and add to the result list\n\n  Object.entries(incomingListeners).forEach(function (_ref) {\n    var listenerType = _ref[0],\n        listenersOfType = _ref[1];\n\n    if (listenersOfType && listenersOfType.length === 1) {\n      // only one listener for this type so add directly to the result list\n      result.push(listenersOfType[0]);\n    } else if (listenersOfType && listenersOfType.length > 1) {\n      // multiple listeners for this type so combine them and add to the result list\n      result.push(createCombinedListener(listenerType, listenersOfType));\n    }\n  });\n  return result;\n};\n/**\r\n * Take a list of listeners of the same type and combine to single listener object.\r\n * For example an array of status listener objects combined to a single status listener object.\r\n *\r\n * @param listenerType The listener type.\r\n * @param listeners The Array of listeners of the same type.\r\n */\n\n\nvar createCombinedListener = function createCombinedListener(listenerType, listeners) {\n  var _ref2; // returns a single listener which invokes each of the incomming listeners\n\n\n  return _ref2 = {}, _ref2[listenerType] = function (payload) {\n    listeners.forEach(function (listener) {\n      var currentListener = listener[listenerType];\n\n      if (currentListener !== undefined) {\n        currentListener(payload);\n      }\n    });\n  }, _ref2;\n};\n\nvar createPubNubListener = function createPubNubListener(dispatch) {\n  return combineListeners(createMessageListener(dispatch), createPresenceListener(dispatch), createSignalListener(dispatch), createErrorStatusListener(dispatch), createErrorStatusListener(dispatch), createNetworkStatusListener(dispatch), createSubscriptionStatusListener(dispatch), createUserDataListener(dispatch), createChannelDataListener(dispatch), createMembershipListener(dispatch));\n};\n\nvar createInitialState = function createInitialState() {\n  return {\n    byId: {}\n  };\n};\n\nvar messageReceived$1 = function messageReceived(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  };\n\n  if (newState.byId[payload.channel] === undefined) {\n    newState.byId[payload.channel] = [];\n  }\n\n  newState.byId[payload.channel] = [].concat(newState.byId[payload.channel], [payload]);\n  return newState;\n};\n\nvar messageHistoryRetrieved$1 = function messageHistoryRetrieved(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  };\n\n  if (newState.byId[payload.request.channel] === undefined) {\n    newState.byId[payload.request.channel] = [];\n  }\n\n  var results = payload.response.messages.map(function (m) {\n    return {\n      channel: payload.request.channel,\n      message: m.entry,\n      timetoken: m.timetoken\n    };\n  });\n  newState.byId[payload.request.channel] = [].concat(newState.byId[payload.request.channel], results);\n  return newState;\n};\n\nvar createMessageReducer = function createMessageReducer() {\n  return function (state, action) {\n    if (state === void 0) {\n      state = createInitialState();\n    }\n\n    switch (action.type) {\n      case MessageActionType.MESSAGE_RECEIVED:\n        return messageReceived$1(state, action.payload);\n\n      case MessageActionType.MESSAGE_HISTORY_RETRIEVED:\n        return messageHistoryRetrieved$1(state, action.payload);\n\n      default:\n        return state;\n    }\n  };\n};\n\nvar createInitialState$1 = function createInitialState() {\n  return {\n    byId: {}\n  };\n};\n\nvar signalReceived$1 = function signalReceived(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  };\n\n  if (newState.byId[payload.channel] === undefined) {\n    newState.byId[payload.channel] = [];\n  }\n\n  newState.byId[payload.channel] = [].concat(newState.byId[payload.channel], [payload]);\n  return newState;\n};\n\nvar createSignalReducer = function createSignalReducer() {\n  return function (state, action) {\n    if (state === void 0) {\n      state = createInitialState$1();\n    }\n\n    switch (action.type) {\n      case SignalActionType.SIGNAL_RECEIVED:\n        return signalReceived$1(state, action.payload);\n\n      default:\n        return state;\n    }\n  };\n};\n\nvar createInitialState$2 = function createInitialState() {\n  return {\n    byId: {},\n    totalOccupancy: 0\n  };\n};\n\nvar hereNow = function hereNow(state, payload) {\n  var newState = {\n    byId: _extends(_extends({}, state.byId), payload.response.channels),\n    totalOccupancy: payload.response.totalOccupancy\n  };\n  return newState;\n};\n\nvar getState = function getState(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId),\n    totalOccupancy: state.totalOccupancy\n  };\n  Object.keys(payload.channels).forEach(function (channel) {\n    // update occupant state if exists\n    if (newState.byId[channel]) {\n      newState.byId[channel] = payload.channels[channel];\n    }\n  });\n  return newState;\n};\n\nvar userJoined = function userJoined(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId),\n    totalOccupancy: state.totalOccupancy\n  };\n  var occupants = []; // remove occupant if exists\n\n  if (newState.byId[payload.channel]) {\n    occupants = newState.byId[payload.channel].occupants;\n    newState.byId[payload.channel].occupants = occupants.filter(function (occupant) {\n      return occupant.uuid !== payload.uuid;\n    });\n    newState.byId[payload.channel].occupancy = newState.byId[payload.channel].occupants.length;\n\n    if (occupants.length === newState.byId[payload.channel].occupants.length) {\n      newState.totalOccupancy++;\n    }\n  } else {\n    newState.totalOccupancy++;\n  } // add occupant and update occupancy\n\n\n  newState.byId[payload.channel] = {\n    name: payload.channel,\n    occupants: [].concat(occupants, [{\n      uuid: payload.uuid,\n      state: payload.state\n    }]),\n    occupancy: payload.occupancy\n  };\n  return newState;\n};\n\nvar userLeft = function userLeft(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId),\n    totalOccupancy: state.totalOccupancy\n  }; // remove occupant if exists\n\n  if (newState.byId[payload.channel]) {\n    var occupants = newState.byId[payload.channel].occupants;\n    newState.byId[payload.channel].occupants = occupants.filter(function (occupant) {\n      return occupant.uuid !== payload.uuid;\n    });\n\n    if (occupants.length > newState.byId[payload.channel].occupants.length) {\n      newState.byId[payload.channel].occupancy--;\n      newState.totalOccupancy--;\n    }\n  }\n\n  return newState;\n};\n\nvar userStateChange$1 = function userStateChange(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId),\n    totalOccupancy: state.totalOccupancy\n  }; // update occupant state if exists\n\n  if (newState.byId[payload.channel]) {\n    var occupants = newState.byId[payload.channel].occupants;\n    occupants.forEach(function (occupant) {\n      if (occupant.uuid === payload.uuid) {\n        occupant.state = payload.state;\n      }\n    });\n  }\n\n  return newState;\n};\n\nvar createPresenceReducer = function createPresenceReducer() {\n  return function (state, action) {\n    if (state === void 0) {\n      state = createInitialState$2();\n    }\n\n    switch (action.type) {\n      case PresenceActionType.HERE_NOW_RETRIEVED:\n        return hereNow(state, action.payload);\n\n      case PresenceActionType.PRESENCE_STATE_RETRIEVED:\n        return getState(state, action.payload);\n\n      case PresenceActionType.JOIN_EVENT:\n        return userJoined(state, action.payload);\n\n      case PresenceActionType.LEAVE_EVENT:\n      case PresenceActionType.TIMEOUT_EVENT:\n        return userLeft(state, action.payload);\n\n      case PresenceActionType.STATE_CHANGE_EVENT:\n        return userStateChange$1(state, action.payload);\n\n      default:\n        return state;\n    }\n  };\n};\n\nvar createNetworkStatusReducer = function createNetworkStatusReducer(initializer) {\n  var initialState;\n\n  if (typeof initializer === 'boolean') {\n    initialState = {\n      isConnected: initializer\n    };\n  } else if (typeof initializer === 'function') {\n    initialState = {\n      isConnected: initializer()\n    };\n\n    if (typeof initialState.isConnected !== 'boolean') {\n      throw new Error('The initializer function must return a boolean value (true or false)');\n    }\n  } else {\n    throw new Error('The initializer parameter must be a boolean value (true or false) or function');\n  }\n\n  return function networkStatusReducer(state, action) {\n    if (state === void 0) {\n      state = initialState;\n    }\n\n    switch (action.type) {\n      case NetworkStatusActionType.NETWORK_UP_EVENT:\n        return {\n          isConnected: true\n        };\n\n      case NetworkStatusActionType.NETWORK_DOWN_EVENT:\n        return {\n          isConnected: false\n        };\n\n      default:\n        return state;\n    }\n  };\n};\n\nvar createInitialState$3 = function createInitialState() {\n  return {\n    byId: {}\n  };\n};\n\nvar UserDataSet$2 = function UserDataSet(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  }; // partial update\n\n  newState.byId[payload.response.data.id] = _extends(_extends({}, state.byId[payload.response.data.id]), payload.response.data);\n  return newState;\n};\n\nvar UserDataRemoved$2 = function UserDataRemoved(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  };\n  delete newState.byId[payload.request.uuid];\n  return newState;\n};\n\nvar allUserDataRetrieved$1 = function allUserDataRetrieved(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  };\n  payload.response.data.forEach(function (item) {\n    newState.byId[item.id] = item;\n  });\n  return newState;\n};\n\nvar UserDataRetrieved$1 = function UserDataRetrieved(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  };\n  newState.byId[payload.response.data.id] = payload.response.data;\n  return newState;\n};\n\nvar UserDataSetEventReceived = function UserDataSetEventReceived(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  }; // partial update\n\n  newState.byId[payload.data.id] = _extends(_extends({}, state.byId[payload.data.id]), payload.data);\n  return newState;\n};\n\nvar UserDataRemovedEventReceived = function UserDataRemovedEventReceived(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  };\n  delete newState.byId[payload.data.id];\n  return newState;\n};\n\nvar membersRetrieved = function membersRetrieved(state, payload) {\n  var newState = state;\n\n  if (payload.response.data.length > 0) {\n    newState = {\n      byId: _extends({}, state.byId)\n    };\n\n    for (var i = 0; i < payload.response.data.length; i++) {\n      var currentMember = payload.response.data[i]; // important: consumers *must* include UUIDFields for the state to be updated\n\n      if (currentMember.uuid && 'eTag' in currentMember.uuid) {\n        newState.byId[currentMember.uuid.id] = currentMember.uuid;\n      }\n    }\n  }\n\n  return newState;\n};\n\nvar createUserDataReducer = function createUserDataReducer() {\n  return function (state, action) {\n    if (state === void 0) {\n      state = createInitialState$3();\n    }\n\n    switch (action.type) {\n      case UserDataActionType.USER_DATA_SET:\n        return UserDataSet$2(state, action.payload);\n\n      case UserDataActionType.USER_DATA_REMOVED:\n        return UserDataRemoved$2(state, action.payload);\n\n      case UserDataActionType.ALL_USER_DATA_RETRIEVED:\n        return allUserDataRetrieved$1(state, action.payload);\n\n      case UserDataActionType.USER_DATA_RETRIEVED:\n        return UserDataRetrieved$1(state, action.payload);\n\n      case UserDataActionType.USER_DATA_SET_EVENT:\n        return UserDataSetEventReceived(state, action.payload);\n\n      case UserDataActionType.USER_DATA_REMOVED_EVENT:\n        return UserDataRemovedEventReceived(state, action.payload);\n\n      case ChannelMembersActionType.CHANNEL_MEMBERS_RETRIEVED:\n        return membersRetrieved(state, action.payload);\n\n      default:\n        return state;\n    }\n  };\n};\n\nvar createInitialState$4 = function createInitialState() {\n  return {\n    uuids: []\n  };\n};\n\nvar allUserDataRetrieved$2 = function allUserDataRetrieved(payload) {\n  return {\n    uuids: payload.response.data.map(function (uuid) {\n      return uuid.id;\n    })\n  };\n};\n\nvar createUsersListReducer = function createUsersListReducer() {\n  return function (state, action) {\n    if (state === void 0) {\n      state = createInitialState$4();\n    }\n\n    switch (action.type) {\n      case UserDataActionType.ALL_USER_DATA_RETRIEVED:\n        return allUserDataRetrieved$2(action.payload);\n\n      default:\n        return state;\n    }\n  };\n};\n\nvar createInitialState$5 = function createInitialState() {\n  return {\n    byId: {}\n  };\n};\n\nvar channelDataSet$2 = function channelDataSet(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  }; // partial update\n\n  newState.byId[payload.response.data.id] = _extends(_extends({}, state.byId[payload.response.data.id]), payload.response.data);\n  return newState;\n};\n\nvar channelDataRemoved$2 = function channelDataRemoved(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  };\n  delete newState.byId[payload.request.channel];\n  return newState;\n};\n\nvar allChannelDataRetrieved$1 = function allChannelDataRetrieved(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  };\n  payload.response.data.forEach(function (item) {\n    newState.byId[item.id] = item;\n  });\n  return newState;\n};\n\nvar channelDataRetrieved$1 = function channelDataRetrieved(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  };\n  newState.byId[payload.response.data.id] = payload.response.data;\n  return newState;\n};\n\nvar channelDataSetEventReceived = function channelDataSetEventReceived(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  }; // partial update\n\n  newState.byId[payload.data.id] = _extends(_extends({}, state.byId[payload.data.id]), payload.data);\n  return newState;\n};\n\nvar channelDataRemovedEventReceived = function channelDataRemovedEventReceived(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  };\n  delete newState.byId[payload.data.id];\n  return newState;\n};\n\nvar membershipRetrieved = function membershipRetrieved(state, payload) {\n  var newState = state;\n\n  if (payload.response.data.length > 0) {\n    newState = {\n      byId: _extends({}, state.byId)\n    };\n\n    for (var i = 0; i < payload.response.data.length; i++) {\n      var currentMembership = payload.response.data[i]; // important: consumers *must* include ChannelFields for the state to be updated\n\n      if (currentMembership.channel && 'eTag' in currentMembership.channel) {\n        newState.byId[currentMembership.channel.id] = currentMembership.channel;\n      }\n    }\n  }\n\n  return newState;\n};\n\nvar createChannelDataReducer = function createChannelDataReducer() {\n  return function (state, action) {\n    if (state === void 0) {\n      state = createInitialState$5();\n    }\n\n    switch (action.type) {\n      case ChannelDataActionType.CHANNEL_DATA_SET:\n        return channelDataSet$2(state, action.payload);\n\n      case ChannelDataActionType.CHANNEL_DATA_REMOVED:\n        return channelDataRemoved$2(state, action.payload);\n\n      case ChannelDataActionType.ALL_CHANNEL_DATA_RETRIEVED:\n        return allChannelDataRetrieved$1(state, action.payload);\n\n      case ChannelDataActionType.CHANNEL_DATA_RETRIEVED:\n        return channelDataRetrieved$1(state, action.payload);\n\n      case ChannelDataActionType.CHANNEL_DATA_SET_EVENT:\n        return channelDataSetEventReceived(state, action.payload);\n\n      case ChannelDataActionType.CHANNEL_DATA_REMOVED_EVENT:\n        return channelDataRemovedEventReceived(state, action.payload);\n\n      case MembershipActionType.MEMBERSHIPS_RETRIEVED:\n        return membershipRetrieved(state, action.payload);\n\n      default:\n        return state;\n    }\n  };\n};\n\nvar createInitialState$6 = function createInitialState() {\n  return {\n    channelIds: []\n  };\n};\n\nvar allChannelDataRetrieved$2 = function allChannelDataRetrieved(payload) {\n  return {\n    channelIds: payload.response.data.map(function (channel) {\n      return channel.id;\n    })\n  };\n};\n\nvar createChannelsListReducer = function createChannelsListReducer() {\n  return function (state, action) {\n    if (state === void 0) {\n      state = createInitialState$6();\n    }\n\n    switch (action.type) {\n      case ChannelDataActionType.ALL_CHANNEL_DATA_RETRIEVED:\n        return allChannelDataRetrieved$2(action.payload);\n\n      default:\n        return state;\n    }\n  };\n};\n\nvar createInitialState$7 = function createInitialState() {\n  return {\n    byId: {}\n  };\n};\n\nvar uuidRemovedFromChannel = function uuidRemovedFromChannel(state, payload) {\n  if (state.byId[payload.data.uuid.id] && state.byId[payload.data.uuid.id].filter(function (membership) {\n    return membership.id === payload.data.channel.id;\n  }).length > 0) {\n    var newState = {\n      byId: _extends({}, state.byId)\n    };\n    newState.byId[payload.data.uuid.id] = newState.byId[payload.data.uuid.id].filter(function (membership) {\n      return membership.id !== payload.data.channel.id;\n    });\n    return newState;\n  }\n\n  return state;\n};\n\nvar uuidMembershipUpdatedOnChannel = function uuidMembershipUpdatedOnChannel(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  };\n  var clonedUUID = [].concat(newState.byId[payload.data.uuid.id] || []);\n  var exists = false;\n  clonedUUID = clonedUUID.map(function (channel) {\n    if (channel.id === payload.data.channel.id) {\n      exists = true;\n      return _extends(_extends({}, channel), {}, {\n        custom: payload.data.custom\n      });\n    } else {\n      return channel;\n    }\n  });\n\n  if (!exists) {\n    clonedUUID.push({\n      id: payload.data.channel.id,\n      custom: payload.data.custom\n    });\n  }\n\n  newState.byId[payload.data.uuid.id] = clonedUUID;\n  return newState;\n};\n\nvar membershipResult = function membershipResult(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  };\n  var memberships = payload.response.data.map(function (complete) {\n    return {\n      id: complete.channel.id,\n      custom: complete.custom || null\n    };\n  });\n  newState.byId[payload.request.uuid] = memberships;\n  return newState;\n};\n\nvar createMembershipReducer = function createMembershipReducer() {\n  return function (state, action) {\n    if (state === void 0) {\n      state = createInitialState$7();\n    }\n\n    switch (action.type) {\n      case MembershipActionType.MEMBERSHIPS_RETRIEVED:\n      case MembershipActionType.MEMBERSHIPS_SET:\n      case MembershipActionType.MEMBERSHIPS_REMOVED:\n        return membershipResult(state, action.payload);\n\n      case MembershipActionType.MEMBERSHIP_SET_EVENT:\n        return uuidMembershipUpdatedOnChannel(state, action.payload);\n\n      case MembershipActionType.MEMBERSHIP_REMOVED_EVENT:\n        return uuidRemovedFromChannel(state, action.payload);\n\n      default:\n        return state;\n    }\n  };\n};\n\nvar createInitialState$8 = function createInitialState() {\n  return {\n    byId: {}\n  };\n};\n\nvar channelMembershipRemoveEventRecieved = function channelMembershipRemoveEventRecieved(state, payload) {\n  if (state.byId[payload.data.channel.id] && state.byId[payload.data.channel.id].filter(function (membership) {\n    return membership.id === payload.data.uuid.id;\n  }).length > 0) {\n    var newState = {\n      byId: _extends({}, state.byId)\n    };\n    newState.byId[payload.data.channel.id] = newState.byId[payload.data.channel.id].filter(function (membership) {\n      return membership.id !== payload.data.uuid.id;\n    });\n    return newState;\n  }\n\n  return state;\n};\n\nvar channelMembershipSetEventRecieved = function channelMembershipSetEventRecieved(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  };\n  var clonedChannel = [].concat(newState.byId[payload.data.channel.id] || []);\n  var exists = false;\n  clonedChannel = clonedChannel.map(function (uuid) {\n    if (uuid.id === payload.data.uuid.id) {\n      exists = true;\n      return {\n        id: uuid.id,\n        custom: payload.data.custom\n      };\n    } else {\n      return uuid;\n    }\n  });\n\n  if (!exists) {\n    clonedChannel.push({\n      id: payload.data.uuid.id,\n      custom: payload.data.custom\n    });\n  }\n\n  newState.byId[payload.data.channel.id] = clonedChannel;\n  return newState;\n};\n\nvar channelMembersResult = function channelMembersResult(state, payload) {\n  var newState = {\n    byId: _extends({}, state.byId)\n  };\n  var memberships = payload.response.data.map(function (complete) {\n    return {\n      id: complete.uuid.id,\n      custom: complete.custom || null\n    };\n  });\n  newState.byId[payload.request.channel] = memberships;\n  return newState;\n};\n\nvar createChannelMembersReducer = function createChannelMembersReducer() {\n  return function (state, action) {\n    if (state === void 0) {\n      state = createInitialState$8();\n    }\n\n    switch (action.type) {\n      case ChannelMembersActionType.CHANNEL_MEMBERS_RETRIEVED:\n      case ChannelMembersActionType.CHANNEL_MEMBERS_SET:\n      case ChannelMembersActionType.CHANNEL_MEMBERS_REMOVED:\n        return channelMembersResult(state, action.payload);\n\n      case MembershipActionType.MEMBERSHIP_SET_EVENT:\n        return channelMembershipSetEventRecieved(state, action.payload);\n\n      case MembershipActionType.MEMBERSHIP_REMOVED_EVENT:\n        return channelMembershipRemoveEventRecieved(state, action.payload);\n\n      default:\n        return state;\n    }\n  };\n};\n\nexport { ChannelDataActionType, ChannelMembersActionType, ErrorStatusActionType, MembershipActionType, MessageActionType, NetworkStatusActionType, PresenceActionType, PresenceCategory, SignalActionType, SubscriptionStatusActionType, UserDataActionType, UserDataRemoved, UserDataRetrieved, UserDataSet, accessDenied, allChannelDataRetrieved, allUserDataRetrieved, badRequest, channelDataRemoved, channelDataRetrieved, channelDataSet, channelMembersRemoved, channelMembersRetrieved, channelMembersSet, combineListeners, connected, createChannelDataListener, createChannelDataReducer, createChannelMembersReducer, createChannelsListReducer, createErrorStatusListener, createMembershipListener, createMembershipReducer, createMessageListener, createMessageReducer, createNetworkStatusListener, createNetworkStatusReducer, createPresenceListener, createPresenceReducer, createPubNubListener, createSignalListener, createSignalReducer, createSubscriptionStatusListener, createUserDataListener, createUserDataReducer, createUsersListReducer, decryptionError, errorFetchingAllChannelData, errorFetchingAllUserData, errorFetchingChannelData, errorFetchingChannelMembers, errorFetchingHereNow, errorFetchingMemberships, errorFetchingMessageHistory, errorFetchingPresenceState, errorFetchingUserData, errorRemovingChannelData, errorRemovingChannelMembers, errorRemovingMemberships, errorRemovingUserData, errorSendingMessage, errorSendingSignal, errorSettingChannelData, errorSettingChannelMembers, errorSettingMemberships, errorSettingUserData, fetchAllChannelData, fetchAllUserData, fetchChannelData, fetchChannelMembers, fetchHereNow, fetchMemberships, fetchMessageHistory, fetchPresenceState, fetchUserData, fetchingAllChannelData, fetchingAllUserData, fetchingChannelData, fetchingChannelMembers, fetchingHereNow, fetchingMemberships, fetchingMessageHistory, fetchingPresenceState, fetchingUserData, hereNowRetrieved, malformedResponse, membershipsRemoved, membershipsRetrieved, membershipsSet, messageHistoryRetrieved, messageSent, networkDown, networkIssues, networkUp, presenceStateRetrieved, reconnected, removeChannelData, removeChannelMembers, removeMemberships, removeUserData, removingChannelData, removingChannelMembers, removingMemberships, removingUserData, requestMessageCountExceeded, sendMessage, sendSignal, sendingMessage, sendingSignal, setChannelData, setChannelMembers, setMemberships, setUserData, settingChannelData, settingChannelMembers, settingMemberships, settingUserData, signalSent, timeoutConnection, unknown };","map":{"version":3,"sources":["../src/features/membership/MembershipActionType.enum.ts","../src/features/membership/commands/RemoveMemberships.ts","../src/features/membership/commands/FetchMemberships.ts","../src/features/membership/commands/SetMemberships.ts","../src/features/members/ChannelMembersActionType.enum.ts","../src/features/members/commands/FetchChannelMembers.ts","../src/features/members/commands/SetChannelMembers.ts","../src/features/members/commands/RemoveChannelMembers.ts","../src/features/message/MessageActionType.enum.ts","../src/features/message/commands/SendMessage.ts","../src/features/signal/SignalActionType.enum.ts","../src/features/signal/commands/SendSignal.ts","../src/features/message/commands/FetchMessageHistory.ts","../src/features/channel/ChannelDataActionType.enum.ts","../src/features/channel/commands/RemoveChannelData.ts","../src/features/channel/commands/FetchChannelData.ts","../src/features/channel/commands/FetchAllChannelData.ts","../src/features/channel/commands/SetChannelData.ts","../src/features/user/UserDataActionType.enum.ts","../src/features/user/commands/RemoveUserData.ts","../src/features/user/commands/FetchUserData.ts","../src/features/user/commands/FetchAllUserData.ts","../src/features/user/commands/SetUserData.ts","../src/features/presence/PresenceActionType.enum.ts","../src/features/presence/commands/FetchHereNow.ts","../src/features/presence/commands/FetchPresenceState.ts","../src/features/user/UserDataListener.ts","../src/features/channel/ChannelDataListener.ts","../src/features/membership/MembershipListener.ts","../src/features/message/MessageListener.ts","../src/features/presence/PresenceCategory.enum.ts","../src/features/presence/PresenceListener.ts","../src/features/signal/SignalListener.ts","../src/features/errorStatus/ErrorStatusCategory.enum.ts","../src/features/errorStatus/ErrorStatusActionType.enum.ts","../src/features/errorStatus/ErrorStatusListener.ts","../src/features/networkStatus/NetworkStatusActionType.enum.ts","../src/features/networkStatus/NetworkStatusCategory.enum.ts","../src/features/networkStatus/NetworkStatusListener.ts","../src/features/subscriptionStatus/SubscriptionStatusActionType.enum.ts","../src/features/subscriptionStatus/SubscriptionStatusCategory.enum.ts","../src/features/subscriptionStatus/SubscriptionStatusListener.ts","../src/foundations/CombineListeners.ts","../src/features/helpers/PubNubListener.ts","../src/features/message/MessageReducer.ts","../src/features/signal/SignalReducer.ts","../src/features/presence/PresenceReducer.ts","../src/features/networkStatus/NetworkStatusReducer.ts","../src/features/user/UserDataReducer.ts","../src/features/user/UsersListReducer.ts","../src/features/channel/ChannelDataReducer.ts","../src/features/channel/ChannelsListReducer.ts","../src/features/membership/MembershipReducer.ts","../src/features/members/ChannelMembersReducer.ts"],"names":["MembershipActionType","removingMemberships","type","payload","meta","membershipsRemoved","errorRemovingMemberships","error","removeMemberships","thunkFunction","pubnub","dispatch","status","request","reject","response","action","resolve","fetchingMemberships","membershipsRetrieved","errorFetchingMemberships","fetchMemberships","settingMemberships","membershipsSet","errorSettingMemberships","setMemberships","ChannelMembersActionType","fetchingChannelMembers","channelMembersRetrieved","errorFetchingChannelMembers","fetchChannelMembers","settingChannelMembers","channelMembersSet","errorSettingChannelMembers","setChannelMembers","removingChannelMembers","channelMembersRemoved","errorRemovingChannelMembers","removeChannelMembers","MessageActionType","sendingMessage","messageSent","errorSendingMessage","sendMessage","SignalActionType","sendingSignal","signalSent","errorSendingSignal","sendSignal","fetchingMessageHistory","messageHistoryRetrieved","errorFetchingMessageHistory","fetchMessageHistory","ChannelDataActionType","removingChannelData","channelDataRemoved","errorRemovingChannelData","removeChannelData","channel","fetchingChannelData","channelDataRetrieved","errorFetchingChannelData","fetchChannelData","fetchingAllChannelData","allChannelDataRetrieved","errorFetchingAllChannelData","fetchAllChannelData","settingChannelData","channelDataSet","errorSettingChannelData","setChannelData","UserDataActionType","removingUserData","UserDataRemoved","errorRemovingUserData","removeUserData","uuid","fetchingUserData","UserDataRetrieved","errorFetchingUserData","fetchUserData","fetchingAllUserData","allUserDataRetrieved","errorFetchingAllUserData","fetchAllUserData","settingUserData","UserDataSet","errorSettingUserData","setUserData","PresenceActionType","fetchingHereNow","hereNowRetrieved","errorFetchingHereNow","fetchHereNow","includeUUIDs","includeState","fetchingPresenceState","presenceStateRetrieved","errorFetchingPresenceState","fetchPresenceState","createUserDataListener","objects","createChannelDataListener","membershipSetEventRecieved","membershipRemovedEventRecieved","createMembershipListener","messageReceived","createMessageListener","message","PresenceCategory","userJoin","userLeave","userTimeout","userStateChange","createPresenceListener","presence","signalReceived","createSignalListener","signal","ErrorStatusCategory","ErrorStatusActionType","networkIssues","accessDenied","malformedResponse","badRequest","decryptionError","timeoutConnection","requestMessageCountExceeded","unknown","createErrorStatusListener","NetworkStatusActionType","NetworkStatusCategory","networkUp","NETWORK_UP_EVENT","networkDown","NETWORK_DOWN_EVENT","createNetworkStatusListener","SubscriptionStatusActionType","SubscriptionStatusCategory","reconnected","connected","createSubscriptionStatusListener","combineListeners","listeners","Object","mergeListenersByType","result","incomingListeners","allowedListeners","listenerType","listener","listenersOfType","createCombinedListener","currentListener","createPubNubListener","createInitialState","byId","newState","state","results","m","timetoken","createMessageReducer","createSignalReducer","totalOccupancy","hereNow","getState","userJoined","occupants","occupant","name","occupancy","userLeft","createPresenceReducer","createNetworkStatusReducer","initialState","isConnected","initializer","item","UserDataSetEventReceived","UserDataRemovedEventReceived","membersRetrieved","i","currentMember","createUserDataReducer","uuids","createUsersListReducer","channelDataSetEventReceived","channelDataRemovedEventReceived","membershipRetrieved","currentMembership","createChannelDataReducer","channelIds","createChannelsListReducer","uuidRemovedFromChannel","membership","uuidMembershipUpdatedOnChannel","clonedUUID","exists","custom","id","membershipResult","memberships","complete","createMembershipReducer","channelMembershipRemoveEventRecieved","channelMembershipSetEventRecieved","clonedChannel","channelMembersResult","createChannelMembersReducer"],"mappings":"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","sourcesContent":["export enum MembershipActionType {\n  // fetchMemberships()\n  FETCH_MEMBERSHIPS_COMMAND = 'pubnub/FETCH_MEMBERSHIPS_COMMAND',\n  FETCHING_MEMBERSHIPS = 'pubnub/FETCHING_MEMBERSHIPS',\n  MEMBERSHIPS_RETRIEVED = 'pubnub/MEMBERSHIPS_RETRIEVED',\n  ERROR_FETCHING_MEMBERSHIPS = 'pubnub/ERROR_FETCHING_MEMBERSHIPS',\n  // setMemberships()\n  SET_MEMBERSHIPS_COMMAND = 'pubnub/SET_MEMBERSHIPS_COMMAND',\n  SETTING_MEMBERSHIPS = 'pubnub/SETTING_MEMBERSHIPS',\n  MEMBERSHIPS_SET = 'pubnub/MEMBERSHIPS_SET',\n  ERROR_SETTING_MEMBERSHIPS = 'pubnub/ERROR_SETTING_MEMBERSHIPS',\n  // removeMemberships()\n  REMOVE_MEMBERSHIPS_COMMAND = 'pubnub/REMOVE_MEMBERSHIPS_COMMAND',\n  REMOVING_MEMBERSHIPS = 'pubnub/REMOVING_MEMBERSHIPS',\n  MEMBERSHIPS_REMOVED = 'pubnub/MEMBERSHIPS_REMOVED',\n  ERROR_REMOVING_MEMBERSHIPS = 'pubnub/ERROR_REMOVING_MEMBERSHIPS',\n  // objects events\n  MEMBERSHIP_REMOVED_EVENT = 'pubnub/MEMBERSHIP_REMOVED_EVENT',\n  MEMBERSHIP_SET_EVENT = 'pubnub/MEMBERSHIP_SET_EVENT',\n}\n","import { Dispatch } from 'redux';\nimport {\n  RemovingChannelsAction,\n  MembershipsRemovedAction,\n  SetMembershipsSuccess,\n  ErrorRemovingMembershipsAction,\n  SetMembershipsError,\n  SetMembershipsRequest,\n  RemoveMembershipsRequest,\n} from '../MembershipActions';\nimport { MembershipActionType } from '../MembershipActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\nimport { ObjectCustom } from 'pubnub';\n\nexport const removingMemberships = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsRequest<ChannelCustom>,\n  meta?: Meta\n): RemovingChannelsAction<ChannelCustom, Meta> => ({\n  type: MembershipActionType.REMOVING_MEMBERSHIPS,\n  payload,\n  meta,\n});\n\nexport const membershipsRemoved = <\n  MembershipCustom extends ObjectCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsSuccess<MembershipCustom, ChannelCustom>,\n  meta?: Meta\n): MembershipsRemovedAction<MembershipCustom, ChannelCustom, Meta> => ({\n  type: MembershipActionType.MEMBERSHIPS_REMOVED,\n  payload,\n  meta,\n});\n\nexport const errorRemovingMemberships = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsError<ChannelCustom>,\n  meta?: Meta\n): ErrorRemovingMembershipsAction<ChannelCustom, Meta> => ({\n  type: MembershipActionType.ERROR_REMOVING_MEMBERSHIPS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const removeMemberships = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: RemoveMembershipsRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<\n      MembershipsRemovedAction<MembershipCustom, ChannelCustom, Meta>\n    >((resolve, reject) => {\n      dispatch(removingMemberships<ChannelCustom, Meta>(request, meta));\n\n      pubnub.api.objects.removeMemberships<MembershipCustom, ChannelCustom>(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorRemovingMemberships(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = membershipsRemoved<\n              MembershipCustom,\n              ChannelCustom,\n              Meta\n            >(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = MembershipActionType.REMOVE_MEMBERSHIPS_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  FetchingMembershipsAction,\n  MembershipsRetrievedAction,\n  FetchMembershipsSuccess,\n  ErrorFetchingMembershipsAction,\n  FetchMembershipsError,\n  FetchMembershipsRequest,\n} from '../MembershipActions';\nimport { MembershipActionType } from '../MembershipActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingMemberships = <Meta extends ActionMeta>(\n  payload: FetchMembershipsRequest,\n  meta?: Meta\n): FetchingMembershipsAction<Meta> => ({\n  type: MembershipActionType.FETCHING_MEMBERSHIPS,\n  payload,\n  meta,\n});\n\nexport const membershipsRetrieved = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchMembershipsSuccess<MembershipCustom, ChannelCustom>,\n  meta?: Meta\n): MembershipsRetrievedAction<MembershipCustom, ChannelCustom, Meta> => ({\n  type: MembershipActionType.MEMBERSHIPS_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingMemberships = <Meta extends ActionMeta>(\n  payload: FetchMembershipsError,\n  meta?: Meta\n): ErrorFetchingMembershipsAction<Meta> => ({\n  type: MembershipActionType.ERROR_FETCHING_MEMBERSHIPS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchMemberships = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchMembershipsRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<\n      MembershipsRetrievedAction<MembershipCustom, ChannelCustom, Meta>\n    >((resolve, reject) => {\n      dispatch(fetchingMemberships<Meta>(request, meta));\n\n      pubnub.api.objects.getMemberships<MembershipCustom, ChannelCustom>(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorFetchingMemberships<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = membershipsRetrieved<\n              MembershipCustom,\n              ChannelCustom,\n              Meta\n            >(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = MembershipActionType.FETCH_MEMBERSHIPS_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  SettingMembershipsAction,\n  MembershipsSetAction,\n  SetMembershipsSuccess,\n  ErrorSettingMembershipsAction,\n  SetMembershipsError,\n  SetMembershipsRequest,\n} from '../MembershipActions';\nimport { MembershipActionType } from '../MembershipActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const settingMemberships = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsRequest<ChannelCustom>,\n  meta?: Meta\n): SettingMembershipsAction<ChannelCustom, Meta> => ({\n  type: MembershipActionType.SETTING_MEMBERSHIPS,\n  payload,\n  meta,\n});\n\nexport const membershipsSet = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsSuccess<MembershipCustom, ChannelCustom>,\n  meta?: Meta\n): MembershipsSetAction<MembershipCustom, ChannelCustom, Meta> => ({\n  type: MembershipActionType.MEMBERSHIPS_SET,\n  payload,\n  meta,\n});\n\nexport const errorSettingMemberships = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetMembershipsError<ChannelCustom>,\n  meta?: Meta\n): ErrorSettingMembershipsAction<ChannelCustom, Meta> => ({\n  type: MembershipActionType.ERROR_SETTING_MEMBERSHIPS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const setMemberships = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SetMembershipsRequest<ChannelCustom>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<MembershipsSetAction<MembershipCustom, ChannelCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(settingMemberships<ChannelCustom, Meta>(request, meta));\n\n        pubnub.api.objects.setMemberships<MembershipCustom, ChannelCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(\n                errorSettingMemberships<ChannelCustom, Meta>(payload, meta)\n              );\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = membershipsSet<\n                MembershipCustom,\n                ChannelCustom,\n                Meta\n              >(payload, meta);\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = MembershipActionType.SET_MEMBERSHIPS_COMMAND;\n\n  return thunkFunction;\n};\n","export enum ChannelMembersActionType {\n  // fetchChannelMembers()\n  FETCH_CHANNEL_MEMBERS_COMMAND = 'pubnub/FETCH_CHANNEL_MEMBERS_COMMAND',\n  FETCHING_CHANNEL_MEMBERS = 'pubnub/FETCHING_CHANNEL_MEMBERS',\n  CHANNEL_MEMBERS_RETRIEVED = 'pubnub/CHANNEL_MEMBERS_RETRIEVED',\n  ERROR_FETCHING_CHANNEL_MEMBERS = 'pubnub/ERROR_FETCHING_CHANNEL_MEMBERS',\n  // setChannelMembers()\n  SET_CHANNEL_MEMBERS_COMMAND = 'pubnub/SET_CHANNEL_MEMBERS_COMMAND',\n  SETTING_CHANNEL_MEMBERS = 'pubnub/SETTING_CHANNEL_MEMBERS',\n  CHANNEL_MEMBERS_SET = 'pubnub/CHANNEL_MEMBERS_SET',\n  ERROR_SETTING_CHANNEL_MEMBERS = 'pubnub/ERROR_SETTING_CHANNEL_MEMBERS',\n  // removeChannelMembers()\n  REMOVE_CHANNEL_MEMBERS_COMMAND = 'pubnub/REMOVE_CHANNEL_MEMBERS_COMMAND',\n  REMOVING_CHANNEL_MEMBERS = 'pubnub/REMOVING_CHANNEL_MEMBERS',\n  CHANNEL_MEMBERS_REMOVED = 'pubnub/CHANNEL_MEMBERS_REMOVED',\n  ERROR_REMOVING_CHANNEL_MEMBERS = 'pubnub/ERROR_REMOVING_CHANNEL_MEMBERS',\n}\n","import { Dispatch } from 'redux';\nimport {\n  ChannelMembersRetrievedAction,\n  ErrorFetchingChannelMembersAction,\n  FetchingChannelMembersAction,\n  FetchChannelMembersError,\n  FetchChannelMembersSuccess,\n  FetchChannelMembersRequest,\n} from '../ChannelMembersActions';\nimport { ChannelMembersActionType } from '../ChannelMembersActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingChannelMembers = <Meta extends ActionMeta>(\n  payload: FetchChannelMembersRequest,\n  meta?: Meta\n): FetchingChannelMembersAction<Meta> => ({\n  type: ChannelMembersActionType.FETCHING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n});\n\nexport const channelMembersRetrieved = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchChannelMembersSuccess<MembershipCustom, UserCustom>,\n  meta?: Meta\n): ChannelMembersRetrievedAction<MembershipCustom, UserCustom, Meta> => ({\n  type: ChannelMembersActionType.CHANNEL_MEMBERS_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingChannelMembers = <Meta extends ActionMeta>(\n  payload: FetchChannelMembersError,\n  meta?: Meta\n): ErrorFetchingChannelMembersAction<Meta> => ({\n  type: ChannelMembersActionType.ERROR_FETCHING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchChannelMembers = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchChannelMembersRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<\n      ChannelMembersRetrievedAction<MembershipCustom, UserCustom, Meta>\n    >((resolve, reject) => {\n      dispatch(fetchingChannelMembers<Meta>(request, meta));\n\n      pubnub.api.objects.getChannelMembers<MembershipCustom, UserCustom>(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorFetchingChannelMembers<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = channelMembersRetrieved<\n              MembershipCustom,\n              UserCustom,\n              Meta\n            >(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = ChannelMembersActionType.FETCH_CHANNEL_MEMBERS_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  SettingChannelMembersAction,\n  ChannelMembersSetAction,\n  ErrorSettingChannelMembersAction,\n  SetChannelMembersError,\n  SetChannelMembersSuccess,\n  SetChannelMembersRequest,\n} from '../ChannelMembersActions';\nimport { ChannelMembersActionType } from '../ChannelMembersActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const settingChannelMembers = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelMembersRequest<UserCustom>,\n  meta?: Meta\n): SettingChannelMembersAction<UserCustom, Meta> => ({\n  type: ChannelMembersActionType.SETTING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n});\n\nexport const channelMembersSet = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelMembersSuccess<MembershipCustom, UserCustom>,\n  meta?: Meta\n): ChannelMembersSetAction<MembershipCustom, UserCustom, Meta> => ({\n  type: ChannelMembersActionType.CHANNEL_MEMBERS_SET,\n  payload,\n  meta,\n});\n\nexport const errorSettingChannelMembers = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelMembersError<UserCustom>,\n  meta?: Meta\n): ErrorSettingChannelMembersAction<UserCustom, Meta> => ({\n  type: ChannelMembersActionType.ERROR_SETTING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const setChannelMembers = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SetChannelMembersRequest<MembershipCustom>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<ChannelMembersSetAction<MembershipCustom, UserCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(settingChannelMembers(request, meta));\n\n        pubnub.api.objects.setChannelMembers<MembershipCustom, UserCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(\n                errorSettingChannelMembers<MembershipCustom, Meta>(\n                  payload,\n                  meta\n                )\n              );\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = channelMembersSet<\n                MembershipCustom,\n                UserCustom,\n                Meta\n              >(payload, meta);\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = ChannelMembersActionType.SET_CHANNEL_MEMBERS_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  RemovingChannelMembersAction,\n  ChannelMembersRemovedAction,\n  ErrorRemovingChannelMembersAction,\n  SetChannelMembersError,\n  SetChannelMembersSuccess,\n  RemoveChannelMembersRequest,\n} from '../ChannelMembersActions';\nimport { ChannelMembersActionType } from '../ChannelMembersActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const removingChannelMembers = <Meta extends ActionMeta>(\n  payload: RemoveChannelMembersRequest,\n  meta?: Meta\n): RemovingChannelMembersAction<Meta> => ({\n  type: ChannelMembersActionType.REMOVING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n});\n\nexport const channelMembersRemoved = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelMembersSuccess<MembershipCustom, UserCustom>,\n  meta?: Meta\n): ChannelMembersRemovedAction<MembershipCustom, UserCustom, Meta> => ({\n  type: ChannelMembersActionType.CHANNEL_MEMBERS_REMOVED,\n  payload,\n  meta,\n});\n\nexport const errorRemovingChannelMembers = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelMembersError<UserCustom>,\n  meta?: Meta\n): ErrorRemovingChannelMembersAction<UserCustom, Meta> => ({\n  type: ChannelMembersActionType.ERROR_REMOVING_CHANNEL_MEMBERS,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const removeChannelMembers = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: RemoveChannelMembersRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<\n      ChannelMembersRemovedAction<MembershipCustom, UserCustom, Meta>\n    >((resolve, reject) => {\n      dispatch(removingChannelMembers<Meta>(request, meta));\n\n      pubnub.api.objects.removeChannelMembers<MembershipCustom, UserCustom>(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(\n              errorRemovingChannelMembers<MembershipCustom, Meta>(payload, meta)\n            );\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = channelMembersRemoved<\n              MembershipCustom,\n              UserCustom,\n              Meta\n            >(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = ChannelMembersActionType.REMOVE_CHANNEL_MEMBERS_COMMAND;\n\n  return thunkFunction;\n};\n","export enum MessageActionType {\n  SEND_MESSAGE_COMMAND = 'pubnub/SEND_MESSAGE_COMMAND',\n  FETCH_MESSAGE_HISTORY_COMMAND = 'pubnub/FETCH_MESSAGE_HISTORY_COMMAND',\n  MESSAGE_RECEIVED = 'pubnub/MESSAGE_RECEIVED',\n  SENDING_MESSAGE = 'pubnub/SENDING_MESSAGE',\n  MESSAGE_SENT = 'pubnub/MESSAGE_SENT',\n  ERROR_SENDING_MESSAGE = 'pubnub/ERROR_SENDING_MESSAGE',\n  FETCHING_MESSAGE_HISTORY = 'pubnub/FETCHING_MESSAGE_HISTORY',\n  MESSAGE_HISTORY_RETRIEVED = 'pubnub/MESSAGE_HISTORY_RETRIEVED',\n  ERROR_FETCHING_MESSAGE_HISTORY = 'pubnub/ERROR_FETCHING_MESSAGE_HISTORY',\n}\n","import { Dispatch } from 'redux';\nimport {\n  SendMessageRequest,\n  SendingMessageAction,\n  MessageSentAction,\n  SendMessageSuccess,\n  ErrorSendingMessageAction,\n  SendMessageError,\n} from '../MessageActions';\nimport { MessageActionType } from '../MessageActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport const sendingMessage = <\n  MessageContentType extends object,\n  MessageMeta extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendMessageRequest<MessageContentType, MessageMeta>,\n  meta?: Meta\n): SendingMessageAction<MessageContentType, MessageMeta, Meta> => ({\n  type: MessageActionType.SENDING_MESSAGE,\n  payload,\n  meta,\n});\n\nexport const messageSent = <\n  MessageContentType extends object,\n  MessageMeta extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendMessageSuccess<MessageContentType, MessageMeta>,\n  meta?: Meta\n): MessageSentAction<MessageContentType, MessageMeta, Meta> => ({\n  type: MessageActionType.MESSAGE_SENT,\n  payload,\n  meta,\n});\n\nexport const errorSendingMessage = <\n  MessageContentType extends object,\n  MessageMeta extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendMessageError<MessageContentType, MessageMeta>,\n  meta?: Meta\n): ErrorSendingMessageAction<MessageContentType, MessageMeta, Meta> => ({\n  type: MessageActionType.ERROR_SENDING_MESSAGE,\n  payload,\n  meta,\n});\n\nexport const sendMessage = <\n  MessageContentType extends object = {},\n  MessageMeta extends object = {},\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SendMessageRequest<MessageContentType, MessageMeta>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<MessageSentAction<MessageContentType, MessageMeta, Meta>>(\n      (resolve, reject) => {\n        dispatch(sendingMessage(request, meta));\n\n        pubnub.api.publish(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(\n                errorSendingMessage<MessageContentType, MessageMeta, Meta>(\n                  payload,\n                  meta\n                )\n              );\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = messageSent<MessageContentType, MessageMeta, Meta>(\n                payload,\n                meta\n              );\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = MessageActionType.SEND_MESSAGE_COMMAND;\n\n  return thunkFunction;\n};\n","export enum SignalActionType {\n  SEND_SIGNAL_COMMAND = 'pubnub/SEND_SIGNAL_COMMAND',\n  SIGNAL_RECEIVED = 'pubnub/SIGNAL_RECEIVED',\n  SENDING_SIGNAL = 'pubnub/SENDING_SIGNAL',\n  SIGNAL_SENT = 'pubnub/SIGNAL_SENT',\n  ERROR_SENDING_SIGNAL = 'pubnub/ERROR_SENDING_SIGNAL',\n}\n","import { Dispatch } from 'redux';\nimport {\n  SendSignalRequest,\n  SendingSignalAction,\n  SignalSentAction,\n  SendSignalSuccess,\n  ErrorSendingSignalAction,\n  SendSignalError,\n} from '../SignalActions';\nimport { SignalActionType } from '../SignalActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport const sendingSignal = <\n  SignalContentType extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendSignalRequest<SignalContentType>,\n  meta?: Meta\n): SendingSignalAction<SignalContentType, Meta> => ({\n  type: SignalActionType.SENDING_SIGNAL,\n  payload,\n  meta,\n});\n\nexport const signalSent = <\n  SignalContentType extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendSignalSuccess<SignalContentType>,\n  meta?: Meta\n): SignalSentAction<SignalContentType, Meta> => ({\n  type: SignalActionType.SIGNAL_SENT,\n  payload,\n  meta,\n});\n\nexport const errorSendingSignal = <\n  SignalContentType extends object,\n  Meta extends ActionMeta\n>(\n  payload: SendSignalError<SignalContentType>,\n  meta?: Meta\n): ErrorSendingSignalAction<SignalContentType, Meta> => ({\n  type: SignalActionType.ERROR_SENDING_SIGNAL,\n  payload,\n  meta,\n});\n\nexport const sendSignal = <\n  SignalContentType extends object = {},\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SendSignalRequest<SignalContentType>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<SignalSentAction<SignalContentType, Meta>>(\n      (resolve, reject) => {\n        dispatch(sendingSignal(request, meta));\n\n        pubnub.api.signal(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(\n                errorSendingSignal<SignalContentType, Meta>(payload, meta)\n              );\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = signalSent<SignalContentType, Meta>(payload, meta);\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = SignalActionType.SEND_SIGNAL_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  FetchMessageHistoryRequest,\n  FetchMessageHistoryResponse,\n  FetchMessageHistoryError,\n  FetchingMessageHistoryAction,\n  ErrorFetchingMessageHistoryAction,\n  MessageHistoryRetrievedAction,\n  FetchMessageHistorySuccess,\n} from '../../message/MessageActions';\nimport { MessageActionType } from '../../message/MessageActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta } from 'foundations/ActionMeta';\nimport Pubnub from 'pubnub';\n\nexport const fetchingMessageHistory = <Meta extends ActionMeta>(\n  payload: FetchMessageHistoryRequest,\n  meta?: Meta\n): FetchingMessageHistoryAction<Meta> => ({\n  type: MessageActionType.FETCHING_MESSAGE_HISTORY,\n  payload,\n  meta,\n});\n\nexport const messageHistoryRetrieved = <\n  MessageContentType,\n  Meta extends ActionMeta\n>(\n  payload: FetchMessageHistorySuccess<MessageContentType>,\n  meta?: Meta\n): MessageHistoryRetrievedAction<MessageContentType, Meta> => ({\n  type: MessageActionType.MESSAGE_HISTORY_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingMessageHistory = <Meta extends ActionMeta>(\n  payload: FetchMessageHistoryError,\n  meta?: Meta\n): ErrorFetchingMessageHistoryAction<Meta> => ({\n  type: MessageActionType.ERROR_FETCHING_MESSAGE_HISTORY,\n  payload,\n  meta,\n});\n\nexport const fetchMessageHistory = <\n  MessageContentType,\n  Meta extends ActionMeta\n>(\n  request: FetchMessageHistoryRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<MessageHistoryRetrievedAction<MessageContentType, Meta>>(\n      (resolve, reject) => {\n        dispatch(fetchingMessageHistory(request, meta));\n\n        pubnub.api.history(\n          {\n            ...(request as Pubnub.HistoryParameters),\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(errorFetchingMessageHistory<Meta>(payload, meta));\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response: response as FetchMessageHistoryResponse<\n                  MessageContentType\n                >,\n                status,\n              };\n\n              const action = messageHistoryRetrieved<MessageContentType, Meta>(\n                payload,\n                meta\n              );\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = MessageActionType.FETCH_MESSAGE_HISTORY_COMMAND;\n\n  return thunkFunction;\n};\n","export enum ChannelDataActionType {\n  // fetchAllChannelData()\n  FETCH_ALL_CHANNEL_DATA_COMMAND = 'pubnub/FETCH_ALL_CHANNEL_DATA_COMMAND',\n  FETCHING_ALL_CHANNEL_DATA = 'pubnub/FETCHING_ALL_CHANNEL_DATA',\n  ALL_CHANNEL_DATA_RETRIEVED = 'pubnub/ALL_CHANNEL_DATA_RETRIEVED',\n  ERROR_FETCHING_ALL_CHANNEL_DATA = 'pubnub/ERROR_FETCHING_ALL_CHANNEL_DATA',\n  // fetchChannelData()\n  FETCH_CHANNEL_DATA_COMMAND = 'pubnub/FETCH_CHANNEL_DATA_COMMAND',\n  FETCHING_CHANNEL_DATA = 'pubnub/FETCHING_CHANNEL_DATA',\n  CHANNEL_DATA_RETRIEVED = 'pubnub/CHANNEL_DATA_RETRIEVED',\n  ERROR_FETCHING_CHANNEL_DATA = 'pubnub/ERROR_FETCHING_CHANNEL_DATA',\n  // setChannelData()\n  SET_CHANNEL_DATA_COMMAND = 'pubnub/SET_CHANNEL_DATA_COMMAND',\n  SETTING_CHANNEL_DATA = 'pubnub/SETTING_CHANNEL_DATA',\n  CHANNEL_DATA_SET = 'pubnub/CHANNEL_DATA_SET',\n  ERROR_SETTING_CHANNEL_DATA = 'pubnub/ERROR_SETTING_CHANNEL_DATA',\n  // removeChannelData()\n  REMOVE_CHANNEL_DATA_COMMAND = 'pubnub/REMOVE_CHANNEL_DATA_COMMAND',\n  REMOVING_CHANNEL_DATA = 'pubnub/REMOVING_CHANNEL_DATA',\n  CHANNEL_DATA_REMOVED = 'pubnub/CHANNEL_DATA_REMOVED',\n  ERROR_REMOVING_CHANNEL_DATA = 'pubnub/ERROR_REMOVING_CHANNEL_DATA',\n  // objects events\n  CHANNEL_DATA_SET_EVENT = 'pubnub/CHANNEL_DATA_SET_EVENT',\n  CHANNEL_DATA_REMOVED_EVENT = 'pubnub/CHANNEL_DATA_REMOVED_EVENT',\n}\n","import { Dispatch } from 'redux';\nimport {\n  ChannelDataRemovedAction,\n  RemovingChannelDataAction,\n  ErrorRemovingChannelDataAction,\n  RemoveChannelRequest,\n  RemoveChannelError,\n  RemoveChannelSuccess,\n} from '../ChannelDataActions';\nimport { ChannelDataActionType } from '../ChannelDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport const removingChannelData = <Meta extends ActionMeta>(\n  payload: RemoveChannelRequest,\n  meta?: Meta\n): RemovingChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.REMOVING_CHANNEL_DATA,\n  payload,\n  meta,\n});\n\nexport const channelDataRemoved = <Meta extends ActionMeta>(\n  payload: RemoveChannelSuccess,\n  meta?: Meta\n): ChannelDataRemovedAction<Meta> => ({\n  type: ChannelDataActionType.CHANNEL_DATA_REMOVED,\n  payload,\n  meta,\n});\n\nexport const errorRemovingChannelData = <Meta extends ActionMeta>(\n  payload: RemoveChannelError,\n  meta?: Meta\n): ErrorRemovingChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.ERROR_REMOVING_CHANNEL_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const removeChannelData = <Meta extends ActionMeta = AnyMeta>(\n  request: RemoveChannelRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<ChannelDataRemovedAction<Meta>>((resolve, reject) => {\n      dispatch(removingChannelData<Meta>(request, meta));\n\n      pubnub.api.objects.removeChannelMetadata(\n        { channel: request.channel },\n        (status) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorRemovingChannelData<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              status,\n            };\n\n            const action = channelDataRemoved<Meta>(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = ChannelDataActionType.REMOVE_CHANNEL_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport { ChannelDataActionType } from '../ChannelDataActionType.enum';\nimport {\n  ErrorFetchingChannelDataAction,\n  ChannelDataRetrievedAction,\n  FetchingChannelDataAction,\n  FetchChannelDataError,\n  FetchChannelDataSuccess,\n  FetchChannelDataRequest,\n} from '../ChannelDataActions';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingChannelData = <Meta extends ActionMeta>(\n  payload: FetchChannelDataRequest,\n  meta?: Meta\n): FetchingChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.FETCHING_CHANNEL_DATA,\n  payload,\n  meta,\n});\n\nexport const channelDataRetrieved = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchChannelDataSuccess<ChannelCustom>,\n  meta?: Meta\n): ChannelDataRetrievedAction<ChannelCustom, Meta> => ({\n  type: ChannelDataActionType.CHANNEL_DATA_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingChannelData = <Meta extends ActionMeta>(\n  payload: FetchChannelDataError,\n  meta?: Meta\n): ErrorFetchingChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.ERROR_FETCHING_CHANNEL_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchChannelData = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchChannelDataRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<ChannelDataRetrievedAction<ChannelCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(\n          fetchingChannelData<Meta>(\n            {\n              ...request,\n            },\n            meta\n          )\n        );\n\n        pubnub.api.objects.getChannelMetadata<ChannelCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(errorFetchingChannelData<Meta>(payload, meta));\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = channelDataRetrieved<ChannelCustom, Meta>(\n                payload,\n                meta\n              );\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = ChannelDataActionType.FETCH_CHANNEL_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  ErrorFetchingAllChannelDataAction,\n  AllChannelDataRetrievedAction,\n  FetchingAllChannelDataAction,\n  FetchAllChannelDataError,\n  FetchAllChannelDataSuccess,\n  FetchAllChannelDataRequest,\n} from '../ChannelDataActions';\nimport { ChannelDataActionType } from '../ChannelDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingAllChannelData = <Meta extends ActionMeta>(\n  payload: FetchAllChannelDataRequest,\n  meta?: Meta\n): FetchingAllChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.FETCHING_ALL_CHANNEL_DATA,\n  payload,\n  meta,\n});\n\nexport const allChannelDataRetrieved = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchAllChannelDataSuccess<ChannelCustom>,\n  meta?: Meta\n): AllChannelDataRetrievedAction<ChannelCustom, Meta> => ({\n  type: ChannelDataActionType.ALL_CHANNEL_DATA_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingAllChannelData = <Meta extends ActionMeta>(\n  payload: FetchAllChannelDataError,\n  meta?: Meta\n): ErrorFetchingAllChannelDataAction<Meta> => ({\n  type: ChannelDataActionType.ERROR_FETCHING_ALL_CHANNEL_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchAllChannelData = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchAllChannelDataRequest = {},\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<AllChannelDataRetrievedAction<ChannelCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(fetchingAllChannelData<Meta>(request, meta));\n\n        pubnub.api.objects.getAllChannelMetadata<ChannelCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(errorFetchingAllChannelData<Meta>(payload, meta));\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = allChannelDataRetrieved<ChannelCustom, Meta>(\n                payload,\n                meta\n              );\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = ChannelDataActionType.FETCH_ALL_CHANNEL_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  SettingChannelDataAction,\n  ChannelDataSetAction,\n  ErrorSettingChannelDataAction,\n  SetChannelDataError,\n  SetChannelDataSuccess,\n  SetChannelDataRequest,\n} from '../ChannelDataActions';\nimport { ChannelDataActionType } from '../ChannelDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const settingChannelData = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelDataRequest<ChannelCustom>,\n  meta?: Meta\n): SettingChannelDataAction<ChannelCustom, Meta> => ({\n  type: ChannelDataActionType.SETTING_CHANNEL_DATA,\n  payload,\n  meta,\n});\n\nexport const channelDataSet = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelDataSuccess<ChannelCustom>,\n  meta?: Meta\n): ChannelDataSetAction<ChannelCustom, Meta> => ({\n  type: ChannelDataActionType.CHANNEL_DATA_SET,\n  payload,\n  meta,\n});\n\nexport const errorSettingChannelData = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetChannelDataError<ChannelCustom>,\n  meta?: Meta\n): ErrorSettingChannelDataAction<ChannelCustom, Meta> => ({\n  type: ChannelDataActionType.ERROR_SETTING_CHANNEL_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const setChannelData = <\n  ChannelCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SetChannelDataRequest<ChannelCustom>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<ChannelDataSetAction<ChannelCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(settingChannelData<ChannelCustom, Meta>(request, meta));\n\n        pubnub.api.objects.setChannelMetadata<ChannelCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(\n                errorSettingChannelData<ChannelCustom, Meta>(payload, meta)\n              );\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = channelDataSet<ChannelCustom, Meta>(payload, meta);\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = ChannelDataActionType.SET_CHANNEL_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","export enum UserDataActionType {\n  // fetchAllUserData()\n  FETCH_ALL_USER_DATA_COMMAND = 'pubnub/FETCH_ALL_USER_DATA_COMMAND',\n  FETCHING_ALL_USER_DATA = 'pubnub/FETCHING_ALL_USER_DATA',\n  ALL_USER_DATA_RETRIEVED = 'pubnub/ALL_USER_DATA_RETRIEVED',\n  ERROR_FETCHING_ALL_USER_DATA = 'pubnub/ERROR_FETCHING_ALL_USER_DATA',\n  // fetchUserData()\n  FETCH_USER_DATA_COMMAND = 'pubnub/FETCH_USER_DATA_COMMAND',\n  FETCHING_USER_DATA = 'pubnub/FETCHING_USER_DATA',\n  USER_DATA_RETRIEVED = 'pubnub/USER_DATA_RETRIEVED',\n  ERROR_FETCHING_USER_DATA = 'pubnub/ERROR_FETCHING_USER_DATA',\n  // setUserData()\n  SET_USER_DATA_COMMAND = 'pubnub/SET_USER_DATA_COMMAND',\n  SETTING_USER_DATA = 'pubnub/SETTING_USER_DATA',\n  USER_DATA_SET = 'pubnub/USER_DATA_SET',\n  ERROR_SETTING_USER_DATA = 'pubnub/ERROR_SETTING_USER_DATA',\n  // removeUserData()\n  REMOVE_USER_DATA_COMMAND = 'pubnub/REMOVE_USER_DATA_COMMAND',\n  REMOVING_USER_DATA = 'pubnub/REMOVING_USER_DATA',\n  USER_DATA_REMOVED = 'pubnub/USER_DATA_REMOVED',\n  ERROR_REMOVING_USER_DATA = 'pubnub/ERROR_REMOVING_USER_DATA',\n  // objects events\n  USER_DATA_SET_EVENT = 'pubnub/USER_DATA_SET_EVENT',\n  USER_DATA_REMOVED_EVENT = 'pubnub/USER_DATA_REMOVED_EVENT',\n}\n","import { Dispatch } from 'redux';\nimport {\n  UserDataRemovedAction,\n  RemovingUserDataAction,\n  ErrorRemovingUserDataAction,\n  DeleteUserDataRequest,\n  DeleteUserDataError,\n  DeleteUserDataSuccess,\n} from '../UserDataActions';\nimport { UserDataActionType } from '../UserDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport const removingUserData = <Meta extends ActionMeta>(\n  payload: DeleteUserDataRequest,\n  meta?: Meta\n): RemovingUserDataAction<Meta> => ({\n  type: UserDataActionType.REMOVING_USER_DATA,\n  payload,\n  meta,\n});\n\nexport const UserDataRemoved = <Meta extends ActionMeta>(\n  payload: DeleteUserDataSuccess,\n  meta?: Meta\n): UserDataRemovedAction<Meta> => ({\n  type: UserDataActionType.USER_DATA_REMOVED,\n  payload,\n  meta,\n});\n\nexport const errorRemovingUserData = <Meta extends ActionMeta>(\n  payload: DeleteUserDataError,\n  meta?: Meta\n): ErrorRemovingUserDataAction<Meta> => ({\n  type: UserDataActionType.ERROR_REMOVING_USER_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const removeUserData = <Meta extends ActionMeta = AnyMeta>(\n  request: DeleteUserDataRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<UserDataRemovedAction<Meta>>((resolve, reject) => {\n      dispatch(removingUserData<Meta>(request, meta));\n\n      pubnub.api.objects.removeUUIDMetadata(\n        { uuid: request.uuid },\n        (status) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorRemovingUserData<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              status,\n            };\n\n            const action = UserDataRemoved<Meta>(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = UserDataActionType.REMOVE_USER_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport { UserDataActionType } from '../UserDataActionType.enum';\nimport {\n  ErrorFetchingUserDataAction,\n  UserDataRetrievedAction,\n  FetchingUserDataAction,\n  FetchUserDataError,\n  FetchUserDataSuccess,\n  FetchUserDataRequest,\n} from '../UserDataActions';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingUserData = <Meta extends ActionMeta>(\n  payload: FetchUserDataRequest,\n  meta?: Meta\n): FetchingUserDataAction<Meta> => ({\n  type: UserDataActionType.FETCHING_USER_DATA,\n  payload,\n  meta,\n});\n\nexport const UserDataRetrieved = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchUserDataSuccess<UserCustom>,\n  meta?: Meta\n): UserDataRetrievedAction<UserCustom, Meta> => ({\n  type: UserDataActionType.USER_DATA_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingUserData = <Meta extends ActionMeta>(\n  payload: FetchUserDataError,\n  meta?: Meta\n): ErrorFetchingUserDataAction<Meta> => ({\n  type: UserDataActionType.ERROR_FETCHING_USER_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchUserData = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchUserDataRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<UserDataRetrievedAction<UserCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(\n          fetchingUserData<Meta>(\n            {\n              ...request,\n            },\n            meta\n          )\n        );\n\n        pubnub.api.objects.getUUIDMetadata<UserCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(errorFetchingUserData<Meta>(payload, meta));\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = UserDataRetrieved<UserCustom, Meta>(payload, meta);\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = UserDataActionType.FETCH_USER_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  ErrorFetchingAllUserDataAction,\n  AllUserDataRetrievedAction,\n  FetchingAllUserDataAction,\n  FetchAllUserDataError,\n  FetchAllUserDataSuccess,\n  FetchAllUserDataRequest,\n} from '../UserDataActions';\nimport { UserDataActionType } from '../UserDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const fetchingAllUserData = <Meta extends ActionMeta>(\n  payload: FetchAllUserDataRequest,\n  meta?: Meta\n): FetchingAllUserDataAction<Meta> => ({\n  type: UserDataActionType.FETCHING_ALL_USER_DATA,\n  payload,\n  meta,\n});\n\nexport const allUserDataRetrieved = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: FetchAllUserDataSuccess<UserCustom>,\n  meta?: Meta\n): AllUserDataRetrievedAction<UserCustom, Meta> => ({\n  type: UserDataActionType.ALL_USER_DATA_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingAllUserData = <Meta extends ActionMeta = AnyMeta>(\n  payload: FetchAllUserDataError,\n  meta?: Meta\n): ErrorFetchingAllUserDataAction<Meta> => ({\n  type: UserDataActionType.ERROR_FETCHING_ALL_USER_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const fetchAllUserData = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: FetchAllUserDataRequest = {},\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<AllUserDataRetrievedAction<UserCustom, Meta>>(\n      (resolve, reject) => {\n        dispatch(fetchingAllUserData<Meta>(request, meta));\n\n        pubnub.api.objects.getAllUUIDMetadata<UserCustom>(\n          {\n            ...request,\n          },\n          (status, response) => {\n            if (status.error) {\n              const payload = {\n                request,\n                status,\n              };\n\n              dispatch(errorFetchingAllUserData<Meta>(payload, meta));\n              reject(payload);\n            } else {\n              const payload = {\n                request,\n                response,\n                status,\n              };\n\n              const action = allUserDataRetrieved<UserCustom, Meta>(\n                payload,\n                meta\n              );\n\n              dispatch(action);\n              resolve(action);\n            }\n          }\n        );\n      }\n    );\n\n  thunkFunction.type = UserDataActionType.FETCH_ALL_USER_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  SettingUserDataAction,\n  UserDataSetAction,\n  ErrorSettingUserDataAction,\n  UserDataError,\n  UserDataSuccess,\n  SetUserDataRequest,\n} from '../UserDataActions';\nimport { UserDataActionType } from '../UserDataActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const settingUserData = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: SetUserDataRequest<UserCustom>,\n  meta?: Meta\n): SettingUserDataAction<Meta> => ({\n  type: UserDataActionType.SETTING_USER_DATA,\n  payload,\n  meta,\n});\n\nexport const UserDataSet = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta\n>(\n  payload: UserDataSuccess<UserCustom>,\n  meta?: Meta\n): UserDataSetAction<UserCustom, Meta> => ({\n  type: UserDataActionType.USER_DATA_SET,\n  payload,\n  meta,\n});\n\nexport const errorSettingUserData = <Meta extends ActionMeta>(\n  payload: UserDataError,\n  meta?: Meta\n): ErrorSettingUserDataAction<Meta> => ({\n  type: UserDataActionType.ERROR_SETTING_USER_DATA,\n  payload,\n  meta,\n  error: true,\n});\n\nexport const setUserData = <\n  UserCustom extends ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>(\n  request: SetUserDataRequest<UserCustom>,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<UserDataSetAction<UserCustom, Meta>>((resolve, reject) => {\n      dispatch(settingUserData<UserCustom, Meta>(request, meta));\n\n      pubnub.api.objects.setUUIDMetadata<UserCustom>(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorSettingUserData<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = UserDataSet<UserCustom, Meta>(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = UserDataActionType.SET_USER_DATA_COMMAND;\n\n  return thunkFunction;\n};\n","export enum PresenceActionType {\n  HERE_NOW_COMMAND = 'pubnub/HERE_NOW_COMMAND',\n  PRESENCE_STATE_COMMAND = 'pubnub/PRESENCE_STATE_COMMAND',\n  FETCHING_HERE_NOW = 'pubnub/FETCHING_HERE_NOW',\n  HERE_NOW_RETRIEVED = 'pubnub/HERE_NOW_RETRIEVED',\n  ERROR_FETCHING_HERE_NOW = 'pubnub/ERROR_FETCHING_HERE_NOW',\n  FETCHING_PRESENCE_STATE = 'pubnub/FETCHING_PRESENCE_STATE',\n  PRESENCE_STATE_RETRIEVED = 'pubnub/PRESENCE_STATE_RETRIEVED',\n  ERROR_FETCHING_PRESENCE_STATE = 'pubnub/ERROR_FETCHING_PRESENCE_STATE',\n  JOIN_EVENT = 'pubnub/JOIN_EVENT',\n  LEAVE_EVENT = 'pubnub/LEAVE_EVENT',\n  TIMEOUT_EVENT = 'pubnub/TIMEOUT_EVENT',\n  STATE_CHANGE_EVENT = 'pubnub/STATE_CHANGE_EVENT',\n}\n","import { Dispatch } from 'redux';\nimport {\n  HereNowRequest,\n  HereNowError,\n  FetchingHereNowAction,\n  ErrorFetchingHereNowAction,\n  HereNowRetrievedAction,\n  HereNowSuccess,\n} from '../PresenceActions';\nimport { PresenceActionType } from '../PresenceActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta } from 'foundations/ActionMeta';\n\nexport const fetchingHereNow = <Meta extends ActionMeta>(\n  payload: HereNowRequest,\n  meta?: Meta\n): FetchingHereNowAction<Meta> => ({\n  type: PresenceActionType.FETCHING_HERE_NOW,\n  payload,\n  meta,\n});\n\nexport const hereNowRetrieved = <Meta extends ActionMeta>(\n  payload: HereNowSuccess,\n  meta?: Meta\n): HereNowRetrievedAction<Meta> => ({\n  type: PresenceActionType.HERE_NOW_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingHereNow = <Meta extends ActionMeta>(\n  payload: HereNowError,\n  meta?: Meta\n): ErrorFetchingHereNowAction<Meta> => ({\n  type: PresenceActionType.ERROR_FETCHING_HERE_NOW,\n  payload,\n  meta,\n});\n\nexport const fetchHereNow = <Meta extends ActionMeta>(\n  request: HereNowRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<HereNowRetrievedAction<Meta>>((resolve, reject) => {\n      dispatch(fetchingHereNow(request, meta));\n\n      pubnub.api.hereNow(\n        {\n          ...request,\n          includeUUIDs: true,\n          includeState: false,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorFetchingHereNow<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = hereNowRetrieved<Meta>(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = PresenceActionType.HERE_NOW_COMMAND;\n\n  return thunkFunction;\n};\n","import { Dispatch } from 'redux';\nimport {\n  PresenceStateRequest,\n  PresenceStateError,\n  FetchingPresenceStateAction,\n  ErrorFetchingPresenceStateAction,\n  PresenceStateRetrievedAction,\n  PresenceStateSuccess,\n} from '../PresenceActions';\nimport { PresenceActionType } from '../PresenceActionType.enum';\nimport { PubnubThunkContext } from 'foundations/ThunkTypes';\nimport { ActionMeta } from 'foundations/ActionMeta';\n\nexport const fetchingPresenceState = <Meta extends ActionMeta>(\n  payload: PresenceStateRequest,\n  meta?: Meta\n): FetchingPresenceStateAction<Meta> => ({\n  type: PresenceActionType.FETCHING_PRESENCE_STATE,\n  payload,\n  meta,\n});\n\nexport const presenceStateRetrieved = <Meta extends ActionMeta>(\n  payload: PresenceStateSuccess,\n  meta?: Meta\n): PresenceStateRetrievedAction<Meta> => ({\n  type: PresenceActionType.PRESENCE_STATE_RETRIEVED,\n  payload,\n  meta,\n});\n\nexport const errorFetchingPresenceState = <Meta extends ActionMeta>(\n  payload: PresenceStateError,\n  meta?: Meta\n): ErrorFetchingPresenceStateAction<Meta> => ({\n  type: PresenceActionType.ERROR_FETCHING_PRESENCE_STATE,\n  payload,\n  meta,\n});\n\nexport const fetchPresenceState = <Meta extends ActionMeta>(\n  request: PresenceStateRequest,\n  meta?: Meta\n) => {\n  const thunkFunction = (\n    dispatch: Dispatch,\n    _getState: any,\n    { pubnub }: PubnubThunkContext\n  ) =>\n    new Promise<PresenceStateRetrievedAction<Meta>>((resolve, reject) => {\n      dispatch(fetchingPresenceState(request, meta));\n\n      pubnub.api.getState(\n        {\n          ...request,\n        },\n        (status, response) => {\n          if (status.error) {\n            const payload = {\n              request,\n              status,\n            };\n\n            dispatch(errorFetchingPresenceState<Meta>(payload, meta));\n            reject(payload);\n          } else {\n            const payload = {\n              request,\n              response,\n              status,\n            };\n\n            const action = presenceStateRetrieved<Meta>(payload, meta);\n\n            dispatch(action);\n            resolve(action);\n          }\n        }\n      );\n    });\n\n  thunkFunction.type = PresenceActionType.PRESENCE_STATE_COMMAND;\n\n  return thunkFunction;\n};\n","import Pubnub from 'pubnub';\nimport { Dispatch } from 'redux';\nimport {\n  UserDataSetEventAction,\n  UserDataRemovedEventAction,\n  UserDataListenerActions,\n  UserDataEventMessage,\n  UsersListenerPayload,\n} from './UserDataActions';\nimport { UserDataActionType } from './UserDataActionType.enum';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport const UserDataSet = <UserCustom extends ObjectsCustom>(\n  payload: UserDataEventMessage<UserCustom>\n): UserDataSetEventAction<UserCustom> => ({\n  type: UserDataActionType.USER_DATA_SET_EVENT,\n  payload,\n});\n\nexport const UserDataRemoved = <UserCustom extends ObjectsCustom>(\n  payload: UserDataEventMessage<UserCustom>\n): UserDataRemovedEventAction<UserCustom> => ({\n  type: UserDataActionType.USER_DATA_REMOVED_EVENT,\n  payload,\n});\n\nexport const createUserDataListener = <\n  UserCustom extends ObjectsCustom = ObjectsCustom\n>(\n  dispatch: Dispatch<UserDataListenerActions<UserCustom>>\n): Pubnub.ListenerParameters => ({\n  objects: (payload) => {\n    if (payload.message.type !== 'uuid') {\n      return;\n    }\n    switch (payload.message.event) {\n      case 'set':\n        dispatch(\n          UserDataSet<UserCustom>(\n            ((payload as unknown) as UsersListenerPayload<UserCustom>).message\n          )\n        );\n        break;\n      case 'delete':\n        dispatch(UserDataRemoved<UserCustom>(payload.message));\n        break;\n      default:\n        break;\n    }\n  },\n});\n","import Pubnub from 'pubnub';\nimport { Dispatch } from 'redux';\nimport {\n  ChannelDataSetEventAction,\n  ChannelDataRemovedEventAction,\n  ChannelDataListenerActions,\n  ChannelDataEventMessage,\n  Channel,\n} from './ChannelDataActions';\nimport { ChannelDataActionType } from './ChannelDataActionType.enum';\nimport { ObjectsCustom, GetChannelCustom } from 'foundations/ObjectsCustom';\n\nexport const channelDataSet = <ChannelCustom extends ObjectsCustom>(\n  payload: ChannelDataEventMessage<ChannelCustom>\n): ChannelDataSetEventAction<ChannelCustom> => ({\n  type: ChannelDataActionType.CHANNEL_DATA_SET_EVENT,\n  payload,\n});\n\nexport const channelDataRemoved = <ChannelCustom extends ObjectsCustom>(\n  payload: ChannelDataEventMessage<ChannelCustom>\n): ChannelDataRemovedEventAction<ChannelCustom> => ({\n  type: ChannelDataActionType.CHANNEL_DATA_REMOVED_EVENT,\n  payload,\n});\n\nexport const createChannelDataListener = <ChannelType extends Channel>(\n  dispatch: Dispatch<ChannelDataListenerActions<GetChannelCustom<ChannelType>>>\n) => ({\n  objects: (\n    payload: Pubnub.ObjectsEvent<\n      ObjectsCustom,\n      GetChannelCustom<ChannelType>,\n      ObjectsCustom\n    >\n  ) => {\n    if (payload.message.type !== 'channel') {\n      return;\n    }\n    switch (payload.message.event) {\n      case 'set':\n        dispatch(\n          channelDataSet<GetChannelCustom<ChannelType>>(payload.message)\n        );\n        break;\n      case 'delete':\n        dispatch(\n          channelDataRemoved<GetChannelCustom<ChannelType>>(payload.message)\n        );\n        break;\n      default:\n        break;\n    }\n  },\n});\n","import Pubnub from 'pubnub';\nimport { Dispatch } from 'redux';\nimport {\n  MembershipListenerActions,\n  MembershipSetEventAction,\n  MembershipRemovedEventAction,\n  MembershipEventMessage,\n} from './MembershipActions';\nimport { MembershipActionType } from './MembershipActionType.enum';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nconst membershipSetEventRecieved = <MembershipCustom extends ObjectsCustom>(\n  payload: MembershipEventMessage<MembershipCustom>\n): MembershipSetEventAction<MembershipCustom> => ({\n  type: MembershipActionType.MEMBERSHIP_SET_EVENT,\n  payload,\n});\n\nconst membershipRemovedEventRecieved = <MembershipCustom extends ObjectsCustom>(\n  payload: MembershipEventMessage<MembershipCustom>\n): MembershipRemovedEventAction<MembershipCustom> => ({\n  type: MembershipActionType.MEMBERSHIP_REMOVED_EVENT,\n  payload,\n});\n\nexport const createMembershipListener = <\n  MembershipCustom extends ObjectsCustom\n>(\n  dispatch: Dispatch<MembershipListenerActions<MembershipCustom>>\n): Pubnub.ListenerParameters => ({\n  objects: (payload) => {\n    if (payload.message.type === 'membership') {\n      switch (payload.message.event) {\n        case 'set':\n          dispatch(\n            membershipSetEventRecieved<MembershipCustom>(\n              (payload as Pubnub.SetMembershipEvent<MembershipCustom>).message\n            )\n          );\n          break;\n        case 'delete':\n          dispatch(\n            membershipRemovedEventRecieved<MembershipCustom>(payload.message)\n          );\n          break;\n        default:\n          break;\n      }\n    }\n  },\n});\n","import Pubnub from 'pubnub';\nimport { Dispatch } from 'redux';\nimport { MessageReceivedAction, Message } from './MessageActions';\nimport { MessageActionType } from './MessageActionType.enum';\n\nexport const messageReceived = <MessageType extends Message>(\n  payload: MessageType\n): MessageReceivedAction<MessageType> => ({\n  type: MessageActionType.MESSAGE_RECEIVED,\n  payload,\n});\n\nexport const createMessageListener = <MessageType extends Message>(\n  dispatch: Dispatch<MessageReceivedAction<MessageType>>\n): Pubnub.ListenerParameters => ({\n  message: (payload) =>\n    dispatch(messageReceived<MessageType>((payload as unknown) as MessageType)),\n});\n","export enum PresenceCategory {\n  JOIN = 'join',\n  STATE_CHANGE = 'state-change',\n  LEAVE = 'leave',\n  TIMEOUT = 'timeout',\n}\n","import { Dispatch } from 'redux';\nimport Pubnub from 'pubnub';\nimport {\n  PresenceListenerActions,\n  JoinEventAction,\n  LeaveEventAction,\n  TimeoutEventAction,\n  StateChangeEventAction,\n  PresenceEventMessage,\n} from './PresenceActions';\nimport { PresenceActionType } from './PresenceActionType.enum';\nimport { PresenceCategory } from './PresenceCategory.enum';\n\nexport const userJoin = (payload: PresenceEventMessage): JoinEventAction => ({\n  type: PresenceActionType.JOIN_EVENT,\n  payload,\n});\n\nexport const userLeave = (payload: PresenceEventMessage): LeaveEventAction => ({\n  type: PresenceActionType.LEAVE_EVENT,\n  payload,\n});\n\nexport const userTimeout = (\n  payload: PresenceEventMessage\n): TimeoutEventAction => ({\n  type: PresenceActionType.TIMEOUT_EVENT,\n  payload,\n});\n\nexport const userStateChange = (\n  payload: PresenceEventMessage\n): StateChangeEventAction => ({\n  type: PresenceActionType.STATE_CHANGE_EVENT,\n  payload,\n});\n\nexport const createPresenceListener = (\n  dispatch: Dispatch<PresenceListenerActions>\n): Pubnub.ListenerParameters => ({\n  presence: (payload) => {\n    switch (payload.action) {\n      case PresenceCategory.JOIN:\n        dispatch(userJoin(payload));\n        break;\n      case PresenceCategory.LEAVE:\n        dispatch(userLeave(payload));\n        break;\n      case PresenceCategory.TIMEOUT:\n        dispatch(userTimeout(payload));\n        break;\n      case PresenceCategory.STATE_CHANGE:\n        dispatch(userStateChange(payload));\n        break;\n      default:\n        break;\n    }\n  },\n});\n","import Pubnub from 'pubnub';\nimport { Dispatch } from 'redux';\nimport { SignalReceivedAction, Signal } from './SignalActions';\nimport { SignalActionType } from './SignalActionType.enum';\n\nexport const signalReceived = <SignalType extends Signal>(\n  payload: SignalType\n): SignalReceivedAction<SignalType> => ({\n  type: SignalActionType.SIGNAL_RECEIVED,\n  payload,\n});\n\nexport const createSignalListener = <SignalType extends Signal>(\n  dispatch: Dispatch<SignalReceivedAction<SignalType>>\n): Pubnub.ListenerParameters => ({\n  signal: (payload) =>\n    dispatch(signalReceived<SignalType>((payload as unknown) as SignalType)),\n});\n","export enum ErrorStatusCategory {\n  PN_NETWORK_ISSUES_CATEGORY = 'PNNetworkIssuesCategory',\n  PN_ACCES_DENIED_CATEGORY = 'PNAccessDeniedCategory',\n  PN_MALFORMED_RESPONSE_CATEGORY = 'PNMalformedResponseCategory',\n  PN_BAD_REQUEST_CATEGORY = 'PNBadRequestCategory',\n  PN_DECRYPTION_ERROR_CATEGORY = 'PNDecryptionErrorCategory',\n  PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY = 'PNRequestMessageCountExceedCategory',\n  PN_UNKNOWN_CATEGORY = 'PNUnknownCategory',\n}\n","export enum ErrorStatusActionType {\n  NETWORK_ISSUES_EVENT = 'pubnub/NETWORK_ISSUES_EVENT',\n  ACCESS_DENIED_EVENT = 'pubnub/ACCESS_DENIED_EVENT',\n  MALFORMED_RESPONSE_EVENT = 'pubnub/MALFORMED_RESPONSE_EVENT',\n  BAD_REQUEST_EVENT = 'pubnub/BAD_REQUEST_EVENT',\n  DECRYPTION_ERROR_EVENT = 'pubnub/DECRYPTION_ERROR_EVENT',\n  TIMEOUT_CONNECTION_EVENT = 'pubnub/TIMEOUT_CONNECTION_EVENT',\n  REQUEST_MESSAGE_COUNT_EXCEED_EVENT = 'pubnub/REQUEST_MESSAGE_COUNT_EXCEED_EVENT',\n  UNKNOWN_EVENT = 'pubnub/UNKNOWN_EVENT',\n}\n","import { Dispatch } from 'redux';\nimport { ErrorStatusCategory } from './ErrorStatusCategory.enum';\nimport { ErrorStatusActionType } from './ErrorStatusActionType.enum';\nimport {\n  NetworkIssuesEventAction,\n  AccessDeniedEventAction,\n  MalformedResponseEventAction,\n  BadRequestEventAction,\n  DecryptionErrorEventAction,\n  TimeoutConnectionEventAction,\n  RequestMessageCountExceedEventAction,\n  UnknownEventAction,\n  ErrorStatusResponse,\n} from './ErrorStatusActions';\n\nexport const networkIssues = (\n  payload: ErrorStatusResponse\n): NetworkIssuesEventAction => ({\n  type: ErrorStatusActionType.NETWORK_ISSUES_EVENT,\n  payload,\n});\n\nexport const accessDenied = (\n  payload: ErrorStatusResponse\n): AccessDeniedEventAction => ({\n  type: ErrorStatusActionType.ACCESS_DENIED_EVENT,\n  payload,\n});\n\nexport const malformedResponse = (\n  payload: ErrorStatusResponse\n): MalformedResponseEventAction => ({\n  type: ErrorStatusActionType.MALFORMED_RESPONSE_EVENT,\n  payload,\n});\n\nexport const badRequest = (\n  payload: ErrorStatusResponse\n): BadRequestEventAction => ({\n  type: ErrorStatusActionType.BAD_REQUEST_EVENT,\n  payload,\n});\n\nexport const decryptionError = (\n  payload: ErrorStatusResponse\n): DecryptionErrorEventAction => ({\n  type: ErrorStatusActionType.DECRYPTION_ERROR_EVENT,\n  payload,\n});\n\nexport const timeoutConnection = (\n  payload: ErrorStatusResponse\n): TimeoutConnectionEventAction => ({\n  type: ErrorStatusActionType.TIMEOUT_CONNECTION_EVENT,\n  payload,\n});\n\nexport const requestMessageCountExceeded = (\n  payload: ErrorStatusResponse\n): RequestMessageCountExceedEventAction => ({\n  type: ErrorStatusActionType.REQUEST_MESSAGE_COUNT_EXCEED_EVENT,\n  payload,\n});\n\nexport const unknown = (payload: ErrorStatusResponse): UnknownEventAction => ({\n  type: ErrorStatusActionType.UNKNOWN_EVENT,\n  payload,\n});\n\nexport type ErrorStatusListenerActions =\n  | NetworkIssuesEventAction\n  | AccessDeniedEventAction\n  | MalformedResponseEventAction\n  | BadRequestEventAction\n  | RequestMessageCountExceedEventAction\n  | DecryptionErrorEventAction\n  | TimeoutConnectionEventAction\n  | UnknownEventAction;\n\nexport const createErrorStatusListener = (\n  dispatch: Dispatch<ErrorStatusListenerActions>\n) => ({\n  status: (payload: ErrorStatusResponse) => {\n    switch (payload.category) {\n      case ErrorStatusCategory.PN_ACCES_DENIED_CATEGORY:\n        dispatch(accessDenied(payload));\n        break;\n      case ErrorStatusCategory.PN_MALFORMED_RESPONSE_CATEGORY:\n        dispatch(malformedResponse(payload));\n        break;\n      case ErrorStatusCategory.PN_BAD_REQUEST_CATEGORY:\n        dispatch(badRequest(payload));\n        break;\n      case ErrorStatusCategory.PN_DECRYPTION_ERROR_CATEGORY:\n        dispatch(decryptionError(payload));\n        break;\n      case ErrorStatusCategory.PN_REQUEST_MESSAGE_COUNT_EXCEEDED_CATEGORY:\n        dispatch(requestMessageCountExceeded(payload));\n        break;\n      case ErrorStatusCategory.PN_UNKNOWN_CATEGORY:\n        dispatch(unknown(payload));\n        break;\n      default:\n        break;\n    }\n  },\n});\n","export enum NetworkStatusActionType {\n  NETWORK_UP_EVENT = 'pubnub/NETWORK_UP_EVENT',\n  NETWORK_DOWN_EVENT = 'pubnub/NETWORK_DOWN_EVENT',\n}\n","export enum NetworkStatusCategory {\n  PN_NETWORK_UP_CATEGORY = 'PNNetworkUpCategory',\n  PN_NETWORK_DOWN_CATEGORY = 'PNNetworkDownCategory',\n  PN_RECONNECTED_CATEGORY = 'PNReconnectedCategory',\n  PN_CONNECTED_CATEGORY = 'PNConnectedCategory',\n  PN_TIMEOUT_CATEGORY = 'PNTimeoutCategory',\n}\n","import { Dispatch } from 'redux';\nimport {\n  NetworkUpEventAction,\n  NetworkDownEventAction,\n  NetworkStatusResponse,\n} from './NetworkStatusActions';\nimport { NetworkStatusActionType } from './NetworkStatusActionType.enum';\nimport { NetworkStatusCategory } from './NetworkStatusCategory.enum';\n\nexport const networkUp = (): NetworkUpEventAction => ({\n  type: NetworkStatusActionType.NETWORK_UP_EVENT,\n});\n\nexport const networkDown = (): NetworkDownEventAction => ({\n  type: NetworkStatusActionType.NETWORK_DOWN_EVENT,\n});\n\nexport type NetworkStatusListenerActions =\n  | NetworkUpEventAction\n  | NetworkDownEventAction;\n\nexport const createNetworkStatusListener = (\n  dispatch: Dispatch<NetworkStatusListenerActions>\n) => ({\n  status: (payload: NetworkStatusResponse) => {\n    switch (payload.category) {\n      case NetworkStatusCategory.PN_NETWORK_UP_CATEGORY:\n        dispatch(networkUp());\n        break;\n      case NetworkStatusCategory.PN_NETWORK_DOWN_CATEGORY:\n        dispatch(networkDown());\n        break;\n      case NetworkStatusCategory.PN_RECONNECTED_CATEGORY:\n        dispatch(networkUp());\n        break;\n      case NetworkStatusCategory.PN_CONNECTED_CATEGORY:\n        dispatch(networkUp());\n        break;\n      case NetworkStatusCategory.PN_TIMEOUT_CATEGORY:\n        dispatch(networkDown());\n        break;\n      default:\n        break;\n    }\n  },\n});\n","export enum SubscriptionStatusActionType {\n  RECONNECTED_EVENT = 'pubnub/RECONNECTED_EVENT',\n  CONNECTED_EVENT = 'pubnub/CONNECTED_EVENT',\n}\n","export enum SubscriptionStatusCategory {\n  PN_CONNECTED_CATEGORY = 'PNConnectedCategory',\n  PN_RECONNECTED_CATEGORY = 'PNReconnectedCategory',\n}\n","import { Dispatch } from 'redux';\nimport {\n  ReconnectedAction,\n  ConnectedAction,\n  SubscriptionStatusResponse,\n} from './SubscribeStatusActions';\nimport { SubscriptionStatusActionType } from './SubscriptionStatusActionType.enum';\nimport { SubscriptionStatusCategory } from './SubscriptionStatusCategory.enum';\n\nexport const reconnected = (\n  payload: SubscriptionStatusResponse\n): ReconnectedAction => ({\n  type: SubscriptionStatusActionType.RECONNECTED_EVENT,\n  payload,\n});\n\nexport const connected = (\n  payload: SubscriptionStatusResponse\n): ConnectedAction => ({\n  type: SubscriptionStatusActionType.CONNECTED_EVENT,\n  payload,\n});\n\nexport type SubscriptionStatusListenerActions =\n  | ReconnectedAction\n  | ConnectedAction;\n\nexport const createSubscriptionStatusListener = (\n  dispatch: Dispatch<SubscriptionStatusListenerActions>\n) => ({\n  status: (payload: SubscriptionStatusResponse) => {\n    switch (payload.category) {\n      case SubscriptionStatusCategory.PN_CONNECTED_CATEGORY:\n        dispatch(connected(payload));\n        break;\n      case SubscriptionStatusCategory.PN_RECONNECTED_CATEGORY:\n        dispatch(reconnected(payload));\n        break;\n      default:\n        break;\n    }\n  },\n});\n","import Pubnub, {\n  PresenceEvent,\n  SignalEvent,\n  MessageActionEvent,\n  StatusEvent,\n  ObjectsEvent,\n} from 'pubnub';\n\n/**\n * Combines multiple listener objects into one object that supports all of them.\n *\n * @param listeners Array of listener objects.\n * @returns The combined listener Object.\n */\nexport const combineListeners = (...listeners: Pubnub.ListenerParameters[]) => {\n  return Object.assign({}, ...mergeListenersByType(listeners));\n};\n\n/**\n * Take a list of listeners and combine listeners of the same type together.\n *\n * @param listeners Array of listener objects.\n * @returns Array of listener objects with like types combined to single listener object.\n */\nconst mergeListenersByType = (\n  listeners: Pubnub.ListenerParameters[]\n): Pubnub.ListenerParameters[] => {\n  const result: Pubnub.ListenerParameters[] = [];\n  const incomingListeners: {\n    [key in keyof Pubnub.ListenerParameters]: Pubnub.ListenerParameters[];\n  } = {};\n\n  // group the listeners by type so we can combine them\n  listeners.forEach((listener) => {\n    const allowedListeners = [\n      'status',\n      'message',\n      'presence',\n      'signal',\n      'messageAction',\n      'objects',\n    ] as const;\n    for (const listenerType of allowedListeners) {\n      if (listener[listenerType] !== undefined) {\n        if (incomingListeners[listenerType] === undefined) {\n          incomingListeners[listenerType] = [];\n        }\n\n        incomingListeners[listenerType]?.push(listener);\n      }\n    }\n  });\n\n  // merge the grouped listeners and add to the result list\n  Object.entries(incomingListeners).forEach(\n    ([listenerType, listenersOfType]) => {\n      if (listenersOfType && listenersOfType.length === 1) {\n        // only one listener for this type so add directly to the result list\n        result.push(listenersOfType[0]);\n      } else if (listenersOfType && listenersOfType.length > 1) {\n        // multiple listeners for this type so combine them and add to the result list\n        result.push(\n          createCombinedListener(\n            listenerType as keyof Pubnub.ListenerParameters,\n            listenersOfType\n          )\n        );\n      }\n    }\n  );\n\n  return result;\n};\n\n/**\n * Take a list of listeners of the same type and combine to single listener object.\n * For example an array of status listener objects combined to a single status listener object.\n *\n * @param listenerType The listener type.\n * @param listeners The Array of listeners of the same type.\n */\nconst createCombinedListener = (\n  listenerType: keyof Pubnub.ListenerParameters,\n  listeners: Pubnub.ListenerParameters[]\n): Pubnub.ListenerParameters => {\n  // returns a single listener which invokes each of the incomming listeners\n  return {\n    [listenerType]: (\n      payload: MessageEvent &\n        PresenceEvent &\n        SignalEvent &\n        StatusEvent &\n        MessageActionEvent &\n        ObjectsEvent\n    ) => {\n      listeners.forEach((listener) => {\n        const currentListener = listener[listenerType];\n\n        if (currentListener !== undefined) {\n          currentListener(payload);\n        }\n      });\n    },\n  };\n};\n","import { Dispatch } from 'redux';\nimport { createMessageListener } from '../message/MessageListener';\nimport { createPresenceListener } from '../presence/PresenceListener';\nimport { createSignalListener } from '../signal/SignalListener';\nimport { createErrorStatusListener } from '../errorStatus/ErrorStatusListener';\nimport { createNetworkStatusListener } from '../networkStatus/NetworkStatusListener';\nimport { createSubscriptionStatusListener } from '../subscriptionStatus/SubscriptionStatusListener';\nimport { createMembershipListener } from '../membership/MembershipListener';\nimport { createChannelDataListener } from '../channel/ChannelDataListener';\nimport { createUserDataListener } from '../user/UserDataListener';\nimport { combineListeners } from '../../foundations/CombineListeners';\n\nexport const createPubNubListener = (dispatch: Dispatch) =>\n  combineListeners(\n    createMessageListener(dispatch),\n    createPresenceListener(dispatch),\n    createSignalListener(dispatch),\n    createErrorStatusListener(dispatch),\n    createErrorStatusListener(dispatch),\n    createNetworkStatusListener(dispatch),\n    createSubscriptionStatusListener(dispatch),\n    createUserDataListener(dispatch),\n    createChannelDataListener(dispatch),\n    createMembershipListener(dispatch)\n  );\n","import {\n  Message,\n  MessageActions,\n  FetchMessageHistorySuccess,\n} from './MessageActions';\nimport { MessageActionType } from './MessageActionType.enum';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport type MessageState<MessageType extends Message> = {\n  byId: {\n    [channel: string]: MessageType[];\n  };\n};\n\nconst createInitialState = <\n  MessageType extends Message\n>(): MessageState<MessageType> => ({\n  byId: {},\n});\n\nconst messageReceived = <MessageType extends Message>(\n  state: MessageState<MessageType>,\n  payload: MessageType\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  if (newState.byId[payload.channel] === undefined) {\n    newState.byId[payload.channel] = [];\n  }\n\n  newState.byId[payload.channel] = [...newState.byId[payload.channel], payload];\n\n  return newState;\n};\n\nconst messageHistoryRetrieved = <\n  MessageContentType,\n  MessageType extends Message\n>(\n  state: MessageState<MessageType>,\n  payload: FetchMessageHistorySuccess<MessageContentType>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  if (newState.byId[payload.request.channel] === undefined) {\n    newState.byId[payload.request.channel] = [];\n  }\n\n  const results: MessageType[] = payload.response.messages.map(\n    (m) =>\n      (({\n        channel: payload.request.channel,\n        message: m.entry as MessageContentType,\n        timetoken: m.timetoken,\n      } as unknown) as MessageType)\n  );\n\n  newState.byId[payload.request.channel] = [\n    ...newState.byId[payload.request.channel],\n    ...results,\n  ];\n\n  return newState;\n};\n\nexport const createMessageReducer = <\n  MessageType extends Message = Message,\n  MessageContentType extends object = {},\n  MessageMetaType extends object = {},\n  Meta extends ActionMeta = AnyMeta\n>() => (\n  state: MessageState<MessageType> = createInitialState<MessageType>(),\n  action: MessageActions<MessageType, MessageContentType, MessageMetaType, Meta>\n): MessageState<MessageType> => {\n  switch (action.type) {\n    case MessageActionType.MESSAGE_RECEIVED:\n      return messageReceived<MessageType>(state, action.payload);\n    case MessageActionType.MESSAGE_HISTORY_RETRIEVED:\n      return messageHistoryRetrieved<MessageContentType, MessageType>(\n        state,\n        action.payload\n      );\n    default:\n      return state;\n  }\n};\n","import { Signal, SignalActions } from './SignalActions';\nimport { SignalActionType } from './SignalActionType.enum';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\n\nexport type SignalState<SignalType extends Signal> = {\n  byId: {\n    [channel: string]: SignalType[];\n  };\n};\n\nconst createInitialState = <\n  SignalType extends Signal\n>(): SignalState<SignalType> => ({\n  byId: {},\n});\n\nconst signalReceived = <SignalType extends Signal>(\n  state: SignalState<SignalType>,\n  payload: SignalType\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  if (newState.byId[payload.channel] === undefined) {\n    newState.byId[payload.channel] = [];\n  }\n\n  newState.byId[payload.channel] = [...newState.byId[payload.channel], payload];\n\n  return newState;\n};\n\nexport const createSignalReducer = <\n  SignalType extends Signal = Signal,\n  SignalContentType extends object = {},\n  Meta extends ActionMeta = AnyMeta\n>() => (\n  state: SignalState<SignalType> = createInitialState<SignalType>(),\n  action: SignalActions<SignalType, SignalContentType, Meta>\n): SignalState<SignalType> => {\n  switch (action.type) {\n    case SignalActionType.SIGNAL_RECEIVED:\n      return signalReceived<SignalType>(state, action.payload);\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport { PresenceActionType } from './PresenceActionType.enum';\nimport {\n  PresenceListenerActions,\n  PresenceEventMessage,\n  Presence,\n  HereNowResponse,\n  HereNowSuccess,\n  HereNowRetrievedAction,\n  PresenceStateRetrievedAction,\n} from './PresenceActions';\nimport { PresenceState } from './PresenceState';\n\nexport interface PresencebyIdState<ReceivedPresence extends Presence> {\n  byId: {\n    [channelId: string]: {\n      name: string;\n      occupants: ReceivedPresence[];\n      occupancy: number;\n    };\n  };\n  totalOccupancy: number;\n}\n\nconst createInitialState = () => {\n  return {\n    byId: {},\n    totalOccupancy: 0,\n  };\n};\n\nconst hereNow = <ReceivedPresence extends Presence<PresenceState>>(\n  state: PresencebyIdState<ReceivedPresence>,\n  payload: HereNowSuccess<ReceivedPresence>\n) => {\n  const newState = {\n    byId: {\n      ...state.byId,\n      ...payload.response.channels,\n    },\n    totalOccupancy: payload.response.totalOccupancy,\n  };\n\n  return newState;\n};\n\nconst getState = <ReceivedPresence extends Presence<PresenceState>>(\n  state: PresencebyIdState<ReceivedPresence>,\n  payload: HereNowResponse<ReceivedPresence>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n    totalOccupancy: state.totalOccupancy,\n  };\n\n  Object.keys(payload.channels).forEach((channel) => {\n    // update occupant state if exists\n    if (newState.byId[channel]) {\n      newState.byId[channel] = payload.channels[channel];\n    }\n  });\n\n  return newState;\n};\n\nconst userJoined = <ReceivedPresence extends Presence<PresenceState>>(\n  state: PresencebyIdState<ReceivedPresence>,\n  payload: PresenceEventMessage<ReceivedPresence>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n    totalOccupancy: state.totalOccupancy,\n  };\n\n  let occupants: ReceivedPresence[] = [];\n\n  // remove occupant if exists\n  if (newState.byId[payload.channel]) {\n    occupants = newState.byId[payload.channel].occupants;\n\n    newState.byId[payload.channel].occupants = occupants.filter(\n      (occupant) => occupant.uuid !== payload.uuid\n    );\n\n    newState.byId[payload.channel].occupancy =\n      newState.byId[payload.channel].occupants.length;\n\n    if (occupants.length === newState.byId[payload.channel].occupants.length) {\n      newState.totalOccupancy++;\n    }\n  } else {\n    newState.totalOccupancy++;\n  }\n\n  // add occupant and update occupancy\n  newState.byId[payload.channel] = {\n    name: payload.channel,\n    occupants: [\n      ...occupants,\n      {\n        uuid: payload.uuid,\n        state: payload.state,\n      } as ReceivedPresence,\n    ],\n    occupancy: payload.occupancy,\n  };\n\n  return newState;\n};\n\nconst userLeft = <ReceivedPresence extends Presence<PresenceState>>(\n  state: PresencebyIdState<ReceivedPresence>,\n  payload: PresenceEventMessage<ReceivedPresence>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n    totalOccupancy: state.totalOccupancy,\n  };\n\n  // remove occupant if exists\n  if (newState.byId[payload.channel]) {\n    const occupants = newState.byId[payload.channel].occupants;\n\n    newState.byId[payload.channel].occupants = occupants.filter(\n      (occupant) => occupant.uuid !== payload.uuid\n    );\n\n    if (occupants.length > newState.byId[payload.channel].occupants.length) {\n      newState.byId[payload.channel].occupancy--;\n      newState.totalOccupancy--;\n    }\n  }\n\n  return newState;\n};\n\nconst userStateChange = <ReceivedPresence extends Presence<PresenceState>>(\n  state: PresencebyIdState<ReceivedPresence>,\n  payload: PresenceEventMessage<ReceivedPresence>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n    totalOccupancy: state.totalOccupancy,\n  };\n\n  // update occupant state if exists\n  if (newState.byId[payload.channel]) {\n    const occupants = newState.byId[payload.channel].occupants;\n\n    occupants.forEach((occupant) => {\n      if (occupant.uuid === payload.uuid) {\n        occupant.state = payload.state;\n      }\n    });\n  }\n\n  return newState;\n};\n\nexport type PresenceActions<RetrievedPresence extends Presence> =\n  | HereNowRetrievedAction<RetrievedPresence>\n  | PresenceStateRetrievedAction<RetrievedPresence>\n  | PresenceListenerActions;\n\nexport type PresenceReducer<\n  StoredPresence extends Presence,\n  PresenceAction extends AnyAction\n> = (\n  state: PresencebyIdState<StoredPresence> | undefined,\n  action: PresenceAction\n) => PresencebyIdState<StoredPresence>;\n\nexport const createPresenceReducer = <\n  StoredPresence extends Presence<PresenceState> = Presence,\n  PresenceAction extends AnyAction = PresenceActions<StoredPresence>\n>(): PresenceReducer<StoredPresence, PresenceAction> => (\n  state: PresencebyIdState<StoredPresence> = createInitialState(),\n  action: PresenceAction\n): PresencebyIdState<StoredPresence> => {\n  switch (action.type) {\n    case PresenceActionType.HERE_NOW_RETRIEVED:\n      return hereNow<StoredPresence>(state, action.payload);\n    case PresenceActionType.PRESENCE_STATE_RETRIEVED:\n      return getState<StoredPresence>(state, action.payload);\n    case PresenceActionType.JOIN_EVENT:\n      return userJoined<StoredPresence>(state, action.payload);\n    case PresenceActionType.LEAVE_EVENT:\n    case PresenceActionType.TIMEOUT_EVENT:\n      return userLeft<StoredPresence>(state, action.payload);\n    case PresenceActionType.STATE_CHANGE_EVENT:\n      return userStateChange<StoredPresence>(state, action.payload);\n    default:\n      return state;\n  }\n};\n","import { NetworkStatusListenerActions } from './NetworkStatusListener';\nimport { NetworkStatusActionType } from './NetworkStatusActionType.enum';\n\nexport interface NetworkStatusState {\n  isConnected: boolean;\n}\n\ntype NetworkStatusInitializerFunction = () => boolean;\n\nexport const createNetworkStatusReducer = (\n  initializer: NetworkStatusInitializerFunction | boolean\n) => {\n  let initialState: NetworkStatusState;\n\n  if (typeof initializer === 'boolean') {\n    initialState = { isConnected: initializer };\n  } else if (typeof initializer === 'function') {\n    initialState = { isConnected: initializer() };\n    if (typeof initialState.isConnected !== 'boolean') {\n      throw new Error(\n        'The initializer function must return a boolean value (true or false)'\n      );\n    }\n  } else {\n    throw new Error(\n      'The initializer parameter must be a boolean value (true or false) or function'\n    );\n  }\n\n  return function networkStatusReducer(\n    state = initialState,\n    action: NetworkStatusListenerActions\n  ): NetworkStatusState {\n    switch (action.type) {\n      case NetworkStatusActionType.NETWORK_UP_EVENT:\n        return {\n          isConnected: true,\n        };\n      case NetworkStatusActionType.NETWORK_DOWN_EVENT:\n        return {\n          isConnected: false,\n        };\n      default:\n        return state;\n    }\n  };\n};\n","import { AnyAction } from 'redux';\nimport {\n  UserDataActions,\n  UserDataListenerActions,\n  UserDataSuccess,\n  DeleteUserDataSuccess,\n  FetchAllUserDataSuccess,\n  FetchUserDataSuccess,\n  UserData,\n  UserDataEventMessage,\n  SetUserDataEventMessage,\n} from './UserDataActions';\nimport { UserDataActionType } from './UserDataActionType.enum';\nimport {\n  ChannelMembersActions,\n  FetchChannelMembersSuccess,\n} from 'features/members/ChannelMembersActions';\nimport { MembershipActions } from 'features/membership/MembershipActions';\nimport { ChannelMembersActionType } from '../members/ChannelMembersActionType.enum';\nimport { AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom, GetUserCustom } from 'foundations/ObjectsCustom';\n\nexport interface UserDataByIdState<UserDataType extends UserData> {\n  byId: {\n    [uuid: string]: UserDataType;\n  };\n}\n\nconst createInitialState = () => ({\n  byId: {},\n});\n\nconst UserDataSet = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: UserDataSuccess<GetUserCustom<UserDataType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  // partial update\n  newState.byId[payload.response.data.id] = {\n    ...state.byId[payload.response.data.id],\n    ...payload.response.data,\n  };\n\n  return newState;\n};\n\nconst UserDataRemoved = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: DeleteUserDataSuccess\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  delete newState.byId[payload.request.uuid];\n\n  return newState;\n};\n\nconst allUserDataRetrieved = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: FetchAllUserDataSuccess<GetUserCustom<UserDataType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  payload.response.data.forEach((item) => {\n    newState.byId[item.id] = (item as unknown) as UserDataType;\n  });\n\n  return newState;\n};\n\nconst UserDataRetrieved = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: FetchUserDataSuccess<GetUserCustom<UserDataType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  newState.byId[payload.response.data.id] = (payload.response\n    .data as unknown) as UserDataType;\n\n  return newState;\n};\n\nconst UserDataSetEventReceived = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: SetUserDataEventMessage<GetUserCustom<UserDataType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  // partial update\n  newState.byId[payload.data.id] = {\n    ...state.byId[payload.data.id],\n    ...payload.data,\n  };\n\n  return newState;\n};\n\nconst UserDataRemovedEventReceived = <UserDataType extends UserData>(\n  state: UserDataByIdState<UserDataType>,\n  payload: UserDataEventMessage<GetUserCustom<UserDataType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  delete newState.byId[payload.data.id];\n\n  return newState;\n};\n\nconst membersRetrieved = <\n  UserDataType extends UserData,\n  MembershipCustom extends ObjectsCustom\n>(\n  state: UserDataByIdState<UserDataType>,\n  payload: FetchChannelMembersSuccess<\n    MembershipCustom,\n    GetUserCustom<UserDataType>\n  >\n) => {\n  let newState = state;\n\n  if (payload.response.data.length > 0) {\n    newState = {\n      byId: {\n        ...state.byId,\n      },\n    };\n\n    for (let i = 0; i < payload.response.data.length; i++) {\n      const currentMember = payload.response.data[i];\n\n      // important: consumers *must* include UUIDFields for the state to be updated\n      if (currentMember.uuid && 'eTag' in currentMember.uuid) {\n        newState.byId[\n          currentMember.uuid.id\n        ] = (currentMember.uuid as unknown) as UserDataType;\n      }\n    }\n  }\n\n  return newState;\n};\n\ntype UserDataReducerActions<\n  UserCustom extends ObjectsCustom,\n  MembershipCustom extends ObjectsCustom\n> =\n  | UserDataActions<UserCustom, AnyMeta>\n  | UserDataListenerActions<UserCustom>\n  | ChannelMembersActions<UserCustom, MembershipCustom, AnyMeta>\n  | MembershipActions<UserCustom, MembershipCustom, AnyMeta>;\n\nexport type UserDataReducer<\n  UserDataType extends UserData,\n  UserDataAction extends AnyAction\n> = (\n  state: UserDataByIdState<UserDataType> | undefined,\n  action: UserDataAction\n) => UserDataByIdState<UserDataType>;\n\nexport const createUserDataReducer = <\n  UserDataType extends UserData = UserData,\n  MembershipCustom extends ObjectsCustom = ObjectsCustom,\n  UserDataAction extends AnyAction = UserDataReducerActions<\n    GetUserCustom<UserDataType>,\n    MembershipCustom\n  >\n>(): UserDataReducer<UserDataType, UserDataAction> => (\n  state: UserDataByIdState<UserDataType> = createInitialState(),\n  action: UserDataAction\n): UserDataByIdState<UserDataType> => {\n  switch (action.type) {\n    case UserDataActionType.USER_DATA_SET:\n      return UserDataSet<UserDataType>(state, action.payload);\n    case UserDataActionType.USER_DATA_REMOVED:\n      return UserDataRemoved<UserDataType>(state, action.payload);\n    case UserDataActionType.ALL_USER_DATA_RETRIEVED:\n      return allUserDataRetrieved<UserDataType>(state, action.payload);\n    case UserDataActionType.USER_DATA_RETRIEVED:\n      return UserDataRetrieved<UserDataType>(state, action.payload);\n    case UserDataActionType.USER_DATA_SET_EVENT:\n      return UserDataSetEventReceived<UserDataType>(state, action.payload);\n    case UserDataActionType.USER_DATA_REMOVED_EVENT:\n      return UserDataRemovedEventReceived<UserDataType>(state, action.payload);\n    case ChannelMembersActionType.CHANNEL_MEMBERS_RETRIEVED:\n      return membersRetrieved<UserDataType, MembershipCustom>(\n        state,\n        action.payload\n      );\n    default:\n      return state;\n  }\n};\n","import {\n  AllUserDataRetrievedAction,\n  FetchAllUserDataSuccess,\n} from './UserDataActions';\nimport { UserDataActionType } from './UserDataActionType.enum';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\ninterface UsersListState {\n  uuids: string[];\n}\n\nconst createInitialState = (): UsersListState => ({\n  uuids: [],\n});\n\nconst allUserDataRetrieved = <UserCustom extends ObjectsCustom>(\n  payload: FetchAllUserDataSuccess<UserCustom>\n) => ({ uuids: payload.response.data.map((uuid) => uuid.id) });\n\nexport const createUsersListReducer = <\n  UserCustom extends ObjectsCustom = ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>() => (\n  state: UsersListState = createInitialState(),\n  action: AllUserDataRetrievedAction<UserCustom, Meta>\n): UsersListState => {\n  switch (action.type) {\n    case UserDataActionType.ALL_USER_DATA_RETRIEVED:\n      return allUserDataRetrieved(action.payload);\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport {\n  ChannelDataActions,\n  ChannelDataListenerActions,\n  SetChannelDataSuccess,\n  RemoveChannelSuccess,\n  FetchAllChannelDataSuccess,\n  FetchChannelDataSuccess,\n  Channel,\n  SetChannelDataEventMessage,\n  RemoveChannelDataEventMessage,\n} from './ChannelDataActions';\nimport { ChannelDataActionType } from './ChannelDataActionType.enum';\nimport {\n  MembershipActions,\n  FetchMembershipsSuccess,\n  MembershipsRetrievedAction,\n} from '../membership/MembershipActions';\nimport { MembershipActionType } from '../membership/MembershipActionType.enum';\nimport { AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom, GetChannelCustom } from 'foundations/ObjectsCustom';\n\nexport type ChannelsByIdState<ChannelType extends Channel> = {\n  byId: {\n    [channelId: string]: ChannelType;\n  };\n};\n\nconst createInitialState = () => ({\n  byId: {},\n});\n\nconst channelDataSet = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: SetChannelDataSuccess<GetChannelCustom<ChannelType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  // partial update\n  newState.byId[payload.response.data.id] = {\n    ...state.byId[payload.response.data.id],\n    ...payload.response.data,\n  };\n\n  return newState;\n};\n\nconst channelDataRemoved = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: RemoveChannelSuccess\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  delete newState.byId[payload.request.channel];\n\n  return newState;\n};\n\nconst allChannelDataRetrieved = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: FetchAllChannelDataSuccess<GetChannelCustom<ChannelType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  payload.response.data.forEach((item) => {\n    newState.byId[item.id] = (item as unknown) as ChannelType;\n  });\n\n  return newState;\n};\n\nconst channelDataRetrieved = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: FetchChannelDataSuccess<GetChannelCustom<ChannelType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  newState.byId[payload.response.data.id] = (payload.response\n    .data as unknown) as ChannelType;\n\n  return newState;\n};\n\nconst channelDataSetEventReceived = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: SetChannelDataEventMessage<GetChannelCustom<ChannelType>>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  // partial update\n  newState.byId[payload.data.id] = {\n    ...state.byId[payload.data.id],\n    ...payload.data,\n  };\n\n  return newState;\n};\n\nconst channelDataRemovedEventReceived = <ChannelType extends Channel>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: RemoveChannelDataEventMessage\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  delete newState.byId[payload.data.id];\n\n  return newState;\n};\n\nconst membershipRetrieved = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelType extends Channel\n>(\n  state: ChannelsByIdState<ChannelType>,\n  payload: FetchMembershipsSuccess<\n    MembershipCustom,\n    GetChannelCustom<ChannelType>\n  >\n) => {\n  let newState = state;\n\n  if (payload.response.data.length > 0) {\n    newState = {\n      byId: {\n        ...state.byId,\n      },\n    };\n\n    for (let i = 0; i < payload.response.data.length; i++) {\n      const currentMembership = payload.response.data[i];\n\n      // important: consumers *must* include ChannelFields for the state to be updated\n      if (currentMembership.channel && 'eTag' in currentMembership.channel) {\n        newState.byId[\n          currentMembership.channel.id\n        ] = (currentMembership.channel as unknown) as ChannelType;\n      }\n    }\n  }\n\n  return newState;\n};\n\ntype ChannelDataReducerActions<\n  ChannelCustom extends ObjectsCustom,\n  MembershipCustom extends ObjectsCustom\n> =\n  | ChannelDataActions<ChannelCustom, AnyMeta>\n  | ChannelDataListenerActions<ChannelCustom>\n  | MembershipsRetrievedAction<ChannelCustom, MembershipCustom, AnyMeta>\n  | MembershipActions<ChannelCustom, MembershipCustom, AnyMeta>;\n\nexport type ChannelDataReducer<\n  ChannelType extends Channel,\n  ChannelAction extends AnyAction\n> = (\n  state: ChannelsByIdState<ChannelType> | undefined,\n  action: ChannelAction\n) => ChannelsByIdState<ChannelType>;\n\nexport const createChannelDataReducer = <\n  ChannelType extends Channel = Channel,\n  MembershipCustom extends ObjectsCustom = ObjectsCustom,\n  ChannelAction extends AnyAction = ChannelDataReducerActions<\n    GetChannelCustom<ChannelType>,\n    MembershipCustom\n  >\n>(): ChannelDataReducer<ChannelType, ChannelAction> => (\n  state: ChannelsByIdState<ChannelType> = createInitialState(),\n  action: ChannelAction\n): ChannelsByIdState<ChannelType> => {\n  switch (action.type) {\n    case ChannelDataActionType.CHANNEL_DATA_SET:\n      return channelDataSet<ChannelType>(state, action.payload);\n    case ChannelDataActionType.CHANNEL_DATA_REMOVED:\n      return channelDataRemoved<ChannelType>(state, action.payload);\n    case ChannelDataActionType.ALL_CHANNEL_DATA_RETRIEVED:\n      return allChannelDataRetrieved<ChannelType>(state, action.payload);\n    case ChannelDataActionType.CHANNEL_DATA_RETRIEVED:\n      return channelDataRetrieved<ChannelType>(state, action.payload);\n    case ChannelDataActionType.CHANNEL_DATA_SET_EVENT:\n      return channelDataSetEventReceived<ChannelType>(state, action.payload);\n    case ChannelDataActionType.CHANNEL_DATA_REMOVED_EVENT:\n      return channelDataRemovedEventReceived<ChannelType>(\n        state,\n        action.payload\n      );\n    case MembershipActionType.MEMBERSHIPS_RETRIEVED:\n      return membershipRetrieved<MembershipCustom, ChannelType>(\n        state,\n        action.payload\n      );\n    default:\n      return state;\n  }\n};\n","import {\n  AllChannelDataRetrievedAction,\n  FetchAllChannelDataSuccess,\n} from './ChannelDataActions';\nimport { ChannelDataActionType } from './ChannelDataActionType.enum';\nimport { ActionMeta, AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\ninterface ChannelListState {\n  channelIds: string[];\n}\n\nconst createInitialState = (): ChannelListState => ({\n  channelIds: [],\n});\n\nconst allChannelDataRetrieved = <ChannelCustom extends ObjectsCustom>(\n  payload: FetchAllChannelDataSuccess<ChannelCustom>\n) => ({ channelIds: payload.response.data.map((channel) => channel.id) });\n\nexport const createChannelsListReducer = <\n  ChannelCustom extends ObjectsCustom = ObjectsCustom,\n  Meta extends ActionMeta = AnyMeta\n>() => (\n  state: ChannelListState = createInitialState(),\n  action: AllChannelDataRetrievedAction<ChannelCustom, Meta>\n): ChannelListState => {\n  switch (action.type) {\n    case ChannelDataActionType.ALL_CHANNEL_DATA_RETRIEVED:\n      return allChannelDataRetrieved<ChannelCustom>(action.payload);\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport {\n  FetchMembershipsSuccess,\n  SetMembershipsSuccess,\n  MembershipListenerActions,\n  MembershipActions,\n  MembershipEventMessage,\n  SetMembershipEventMessage,\n} from './MembershipActions';\nimport { MembershipActionType } from './MembershipActionType.enum';\nimport { AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport type MembershipByUuidState<MembershipCustom extends ObjectsCustom> = {\n  byId: {\n    [uuid: string]: {\n      id: string;\n      custom: MembershipCustom | null;\n    }[];\n  };\n};\n\nconst createInitialState = () => ({\n  byId: {},\n});\n\nconst uuidRemovedFromChannel = <MembershipCustom extends ObjectsCustom>(\n  state: MembershipByUuidState<MembershipCustom>,\n  payload: MembershipEventMessage<MembershipCustom>\n) => {\n  if (\n    state.byId[payload.data.uuid.id] &&\n    state.byId[payload.data.uuid.id].filter(\n      (membership) => membership.id === payload.data.channel.id\n    ).length > 0\n  ) {\n    const newState = {\n      byId: { ...state.byId },\n    };\n\n    newState.byId[payload.data.uuid.id] = newState.byId[\n      payload.data.uuid.id\n    ].filter((membership) => membership.id !== payload.data.channel.id);\n\n    return newState;\n  }\n\n  return state;\n};\n\nconst uuidMembershipUpdatedOnChannel = <MembershipCustom extends ObjectsCustom>(\n  state: MembershipByUuidState<MembershipCustom>,\n  payload: SetMembershipEventMessage<MembershipCustom>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  let clonedUUID = [...(newState.byId[payload.data.uuid.id] || [])];\n\n  let exists = false;\n  clonedUUID = clonedUUID.map((channel) => {\n    if (channel.id === payload.data.channel.id) {\n      exists = true;\n      return {\n        ...channel,\n        custom: payload.data.custom,\n      };\n    } else {\n      return channel;\n    }\n  });\n  if (!exists) {\n    clonedUUID.push({\n      id: payload.data.channel.id,\n      custom: payload.data.custom,\n    });\n  }\n\n  newState.byId[payload.data.uuid.id] = clonedUUID;\n\n  return newState;\n};\n\nconst membershipResult = <\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom\n>(\n  state: MembershipByUuidState<MembershipCustom>,\n  payload:\n    | FetchMembershipsSuccess<MembershipCustom, ChannelCustom>\n    | SetMembershipsSuccess<MembershipCustom, ChannelCustom>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  const memberships = payload.response.data.map((complete) => ({\n    id: complete.channel.id,\n    custom: complete.custom || null,\n  }));\n\n  newState.byId[payload.request.uuid] = memberships;\n\n  return newState;\n};\n\ntype MembershipReducerActions<\n  MembershipCustom extends ObjectsCustom,\n  ChannelCustom extends ObjectsCustom\n> =\n  | MembershipActions<MembershipCustom, ChannelCustom, AnyMeta>\n  | MembershipListenerActions<MembershipCustom>;\n\nexport type MembershipReducer<\n  MembershipCustom extends ObjectsCustom,\n  MembershipAction extends AnyAction\n> = (\n  state: MembershipByUuidState<MembershipCustom> | undefined,\n  action: MembershipAction\n) => MembershipByUuidState<MembershipCustom>;\n\nexport const createMembershipReducer = <\n  MembershipCustom extends ObjectsCustom = ObjectsCustom,\n  ChannelCustom extends ObjectsCustom = ObjectsCustom,\n  MembershipAction extends AnyAction = MembershipReducerActions<\n    MembershipCustom,\n    ChannelCustom\n  >\n>(): MembershipReducer<MembershipCustom, MembershipAction> => (\n  state = createInitialState(),\n  action: MembershipAction\n): MembershipByUuidState<MembershipCustom> => {\n  switch (action.type) {\n    case MembershipActionType.MEMBERSHIPS_RETRIEVED:\n    case MembershipActionType.MEMBERSHIPS_SET:\n    case MembershipActionType.MEMBERSHIPS_REMOVED:\n      return membershipResult<MembershipCustom, ChannelCustom>(\n        state,\n        action.payload\n      );\n    case MembershipActionType.MEMBERSHIP_SET_EVENT:\n      return uuidMembershipUpdatedOnChannel<MembershipCustom>(\n        state,\n        action.payload\n      );\n    case MembershipActionType.MEMBERSHIP_REMOVED_EVENT:\n      return uuidRemovedFromChannel<MembershipCustom>(state, action.payload);\n    default:\n      return state;\n  }\n};\n","import { AnyAction } from 'redux';\nimport {\n  ChannelMembersActions,\n  FetchChannelMembersSuccess,\n  SetChannelMembersSuccess,\n} from './ChannelMembersActions';\nimport { ChannelMembersActionType } from './ChannelMembersActionType.enum';\nimport {\n  MembershipListenerActions,\n  SetMembershipEventMessage,\n  RemoveMembershipEventMessage,\n} from 'features/membership/MembershipActions';\nimport { MembershipActionType } from '../membership/MembershipActionType.enum';\nimport { AnyMeta } from 'foundations/ActionMeta';\nimport { ObjectsCustom } from 'foundations/ObjectsCustom';\n\nexport type MembersByChannelIdState<MembershipCustom extends ObjectsCustom> = {\n  byId: {\n    [channelId: string]: { id: string; custom: MembershipCustom | null }[];\n  };\n};\n\nconst createInitialState = () => ({\n  byId: {},\n});\n\nconst channelMembershipRemoveEventRecieved = <\n  MembershipCustom extends ObjectsCustom\n>(\n  state: MembersByChannelIdState<MembershipCustom>,\n  payload: RemoveMembershipEventMessage\n) => {\n  if (\n    state.byId[payload.data.channel.id] &&\n    state.byId[payload.data.channel.id].filter(\n      (membership) => membership.id === payload.data.uuid.id\n    ).length > 0\n  ) {\n    const newState = {\n      byId: { ...state.byId },\n    };\n\n    newState.byId[payload.data.channel.id] = newState.byId[\n      payload.data.channel.id\n    ].filter((membership) => membership.id !== payload.data.uuid.id);\n\n    return newState;\n  }\n\n  return state;\n};\n\nconst channelMembershipSetEventRecieved = <\n  MembershipCustom extends ObjectsCustom\n>(\n  state: MembersByChannelIdState<MembershipCustom>,\n  payload: SetMembershipEventMessage<MembershipCustom>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  let clonedChannel = [...(newState.byId[payload.data.channel.id] || [])];\n\n  let exists = false;\n  clonedChannel = clonedChannel.map((uuid) => {\n    if (uuid.id === payload.data.uuid.id) {\n      exists = true;\n      return {\n        id: uuid.id,\n        custom: payload.data.custom,\n      };\n    } else {\n      return uuid;\n    }\n  });\n  if (!exists) {\n    clonedChannel.push({\n      id: payload.data.uuid.id,\n      custom: payload.data.custom,\n    });\n  }\n\n  newState.byId[payload.data.channel.id] = clonedChannel;\n\n  return newState;\n};\n\nconst channelMembersResult = <\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom\n>(\n  state: MembersByChannelIdState<MembershipCustom>,\n  payload:\n    | FetchChannelMembersSuccess<MembershipCustom, UserCustom>\n    | SetChannelMembersSuccess<MembershipCustom, UserCustom>\n) => {\n  const newState = {\n    byId: { ...state.byId },\n  };\n\n  const memberships = payload.response.data.map((complete) => ({\n    id: complete.uuid.id,\n    custom: complete.custom || null,\n  }));\n\n  newState.byId[payload.request.channel] = memberships;\n\n  return newState;\n};\n\ntype ChannelMembersReducerActions<\n  MembershipCustom extends ObjectsCustom,\n  UserCustom extends ObjectsCustom\n> =\n  | ChannelMembersActions<MembershipCustom, UserCustom, AnyMeta>\n  | MembershipListenerActions<MembershipCustom>;\n\nexport type ChannelMembersReducer<\n  MembershipCustom extends ObjectsCustom,\n  MembersAction extends AnyAction\n> = (\n  state: MembersByChannelIdState<MembershipCustom> | undefined,\n  action: MembersAction\n) => MembersByChannelIdState<MembershipCustom>;\n\nexport const createChannelMembersReducer = <\n  MembershipCustom extends ObjectsCustom = ObjectsCustom,\n  UserCustom extends ObjectsCustom = ObjectsCustom,\n  MembersAction extends AnyAction = ChannelMembersReducerActions<\n    MembershipCustom,\n    UserCustom\n  >\n>(): ChannelMembersReducer<MembershipCustom, MembersAction> => (\n  state = createInitialState(),\n  action: MembersAction\n): MembersByChannelIdState<MembershipCustom> => {\n  switch (action.type) {\n    case ChannelMembersActionType.CHANNEL_MEMBERS_RETRIEVED:\n    case ChannelMembersActionType.CHANNEL_MEMBERS_SET:\n    case ChannelMembersActionType.CHANNEL_MEMBERS_REMOVED:\n      return channelMembersResult<MembershipCustom, UserCustom>(\n        state,\n        action.payload\n      );\n    case MembershipActionType.MEMBERSHIP_SET_EVENT:\n      return channelMembershipSetEventRecieved<MembershipCustom>(\n        state,\n        action.payload\n      );\n    case MembershipActionType.MEMBERSHIP_REMOVED_EVENT:\n      return channelMembershipRemoveEventRecieved<MembershipCustom>(\n        state,\n        action.payload\n      );\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
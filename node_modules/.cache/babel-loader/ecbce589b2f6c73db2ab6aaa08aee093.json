{"ast":null,"code":"var _jsxFileName = \"/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/typingIndicator/TypingIndicatorDisplay/TypingIndicatorDisplay.tsx\";\nimport React from \"react\";\nimport { getTypingIndicatorsById, TYPING_INDICATOR_DURATION_SECONDS } from \"../typingIndicatorModel\";\nimport { getCurrentConversationId } from \"features/currentConversation/currentConversationModel\";\nimport { getUsersById } from \"features/users/userModel\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { Wrapper } from \"./TypingIndicatorDisplay.style\";\nexport const getCurrentConversationTypingIndicators = createSelector([getTypingIndicatorsById, getCurrentConversationId, getUsersById], (typingIndicators, conversationId, users) => {\n  return typingIndicators[conversationId] ? Object.values(Object.values(typingIndicators[conversationId] || []).filter(typingIndicator => typingIndicator.channel === conversationId).reduce((grouped, typingIndicator) => {\n    grouped[typingIndicator.publisher] = typingIndicator;\n    return grouped;\n  }, {})).filter(typingIndicator => Date.now() - typingIndicator.timetoken / 10000 < TYPING_INDICATOR_DURATION_SECONDS * 1000).map(typingIndicator => {\n    return { ...typingIndicator,\n      timetoken: String(typingIndicator.timetoken),\n      sender: users[typingIndicator.publisher || \"\"] || (typingIndicator.publisher ? {\n        id: typingIndicator.publisher,\n        name: typingIndicator.publisher\n      } : {\n        id: \"unknown\",\n        name: \"unknown\"\n      })\n    };\n  }) : [];\n});\n/**\n * Display a Message based on its type\n */\n\nexport const TypingIndicatorDisplay = () => {\n  const typingIndicators = useSelector(getCurrentConversationTypingIndicators);\n  const loggedInUser = useSelector(getLoggedInUserId);\n\n  if (typingIndicators.length === 0) {\n    return /*#__PURE__*/React.createElement(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 12\n      }\n    }, \"\\xA0\");\n  } else if (typingIndicators.length === 1) {\n    const {\n      sender: {\n        name,\n        id\n      }\n    } = typingIndicators[0];\n    return /*#__PURE__*/React.createElement(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, id === loggedInUser ? `You are` : `${name} is`, \" typing ...\");\n  } else {\n    return /*#__PURE__*/React.createElement(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 12\n      }\n    }, \"Multiple users typing ...\");\n  }\n};","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/typingIndicator/TypingIndicatorDisplay/TypingIndicatorDisplay.tsx"],"names":["React","getTypingIndicatorsById","TYPING_INDICATOR_DURATION_SECONDS","getCurrentConversationId","getUsersById","getLoggedInUserId","useSelector","createSelector","Wrapper","getCurrentConversationTypingIndicators","typingIndicators","conversationId","users","Object","values","filter","typingIndicator","channel","reduce","grouped","publisher","Date","now","timetoken","map","String","sender","id","name","TypingIndicatorDisplay","loggedInUser","length"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,uBADF,EAIEC,iCAJF,QAKO,yBALP;AAMA,SAASC,wBAAT,QAAyC,uDAAzC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,iBAAT,QAAkC,6CAAlC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAASC,OAAT,QAAwB,gCAAxB;AAWA,OAAO,MAAMC,sCAAsC,GAAGF,cAAc,CAClE,CAACN,uBAAD,EAA0BE,wBAA1B,EAAoDC,YAApD,CADkE,EAElE,CAACM,gBAAD,EAAmBC,cAAnB,EAAmCC,KAAnC,KAAwE;AACtE,SAAOF,gBAAgB,CAACC,cAAD,CAAhB,GACHE,MAAM,CAACC,MAAP,CACED,MAAM,CAACC,MAAP,CAAcJ,gBAAgB,CAACC,cAAD,CAAhB,IAAoC,EAAlD,EACGI,MADH,CAEKC,eAAD,IAAqBA,eAAe,CAACC,OAAhB,KAA4BN,cAFrD,EAIGO,MAJH,CAKI,CACEC,OADF,EAEEH,eAFF,KAGK;AACHG,IAAAA,OAAO,CAACH,eAAe,CAACI,SAAjB,CAAP,GAAqCJ,eAArC;AACA,WAAOG,OAAP;AACD,GAXL,EAYI,EAZJ,CADF,EAgBGJ,MAhBH,CAiBKC,eAAD,IACEK,IAAI,CAACC,GAAL,KAAaN,eAAe,CAACO,SAAhB,GAA4B,KAAzC,GACArB,iCAAiC,GAAG,IAnB1C,EAqBGsB,GArBH,CAqBQR,eAAD,IAAqB;AACxB,WAAO,EACL,GAAGA,eADE;AAELO,MAAAA,SAAS,EAAEE,MAAM,CAACT,eAAe,CAACO,SAAjB,CAFZ;AAGLG,MAAAA,MAAM,EACJd,KAAK,CAACI,eAAe,CAACI,SAAhB,IAA6B,EAA9B,CAAL,KACCJ,eAAe,CAACI,SAAhB,GACG;AACEO,QAAAA,EAAE,EAAEX,eAAe,CAACI,SADtB;AAEEQ,QAAAA,IAAI,EAAEZ,eAAe,CAACI;AAFxB,OADH,GAKG;AACEO,QAAAA,EAAE,EAAE,SADN;AAEEC,QAAAA,IAAI,EAAE;AAFR,OANJ;AAJG,KAAP;AAeD,GArCH,CADG,GAuCH,EAvCJ;AAwCD,CA3CiE,CAA7D;AA8CP;;;;AAGA,OAAO,MAAMC,sBAAsB,GAAG,MAAM;AAC1C,QAAMnB,gBAA2C,GAAGJ,WAAW,CAC7DG,sCAD6D,CAA/D;AAGA,QAAMqB,YAAY,GAAGxB,WAAW,CAACD,iBAAD,CAAhC;;AAEA,MAAIK,gBAAgB,CAACqB,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,wBAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,GAFD,MAEO,IAAIrB,gBAAgB,CAACqB,MAAjB,KAA4B,CAAhC,EAAmC;AACxC,UAAM;AACJL,MAAAA,MAAM,EAAE;AAAEE,QAAAA,IAAF;AAAQD,QAAAA;AAAR;AADJ,QAEFjB,gBAAgB,CAAC,CAAD,CAFpB;AAGA,wBACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGiB,EAAE,KAAKG,YAAP,GAAuB,SAAvB,GAAmC,GAAEF,IAAK,KAD7C,gBADF;AAKD,GATM,MASA;AACL,wBAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAP;AACD;AACF,CApBM","sourcesContent":["import React from \"react\";\nimport {\n  getTypingIndicatorsById,\n  TypingIndicator,\n  TypingIndicatorEnvelope,\n  TYPING_INDICATOR_DURATION_SECONDS,\n} from \"../typingIndicatorModel\";\nimport { getCurrentConversationId } from \"features/currentConversation/currentConversationModel\";\nimport { getUsersById } from \"features/users/userModel\";\nimport { getLoggedInUserId } from \"features/authentication/authenticationModel\";\nimport { useSelector } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { Wrapper } from \"./TypingIndicatorDisplay.style\";\n\nexport interface TypingIndicatorFragment {\n  sender: {\n    id: string;\n    name: string;\n  };\n  timetoken: string;\n  message: TypingIndicator;\n}\n\nexport const getCurrentConversationTypingIndicators = createSelector(\n  [getTypingIndicatorsById, getCurrentConversationId, getUsersById],\n  (typingIndicators, conversationId, users): TypingIndicatorFragment[] => {\n    return typingIndicators[conversationId]\n      ? Object.values(\n          Object.values(typingIndicators[conversationId] || [])\n            .filter(\n              (typingIndicator) => typingIndicator.channel === conversationId\n            )\n            .reduce(\n              (\n                grouped: { [key: string]: TypingIndicatorEnvelope },\n                typingIndicator\n              ) => {\n                grouped[typingIndicator.publisher] = typingIndicator;\n                return grouped;\n              },\n              {}\n            )\n        )\n          .filter(\n            (typingIndicator) =>\n              Date.now() - typingIndicator.timetoken / 10000 <\n              TYPING_INDICATOR_DURATION_SECONDS * 1000\n          )\n          .map((typingIndicator) => {\n            return {\n              ...typingIndicator,\n              timetoken: String(typingIndicator.timetoken),\n              sender:\n                users[typingIndicator.publisher || \"\"] ||\n                (typingIndicator.publisher\n                  ? {\n                      id: typingIndicator.publisher,\n                      name: typingIndicator.publisher,\n                    }\n                  : {\n                      id: \"unknown\",\n                      name: \"unknown\",\n                    }),\n            };\n          })\n      : [];\n  }\n);\n\n/**\n * Display a Message based on its type\n */\nexport const TypingIndicatorDisplay = () => {\n  const typingIndicators: TypingIndicatorFragment[] = useSelector(\n    getCurrentConversationTypingIndicators\n  );\n  const loggedInUser = useSelector(getLoggedInUserId);\n\n  if (typingIndicators.length === 0) {\n    return <Wrapper>&nbsp;</Wrapper>;\n  } else if (typingIndicators.length === 1) {\n    const {\n      sender: { name, id },\n    } = typingIndicators[0];\n    return (\n      <Wrapper>\n        {id === loggedInUser ? `You are` : `${name} is`} typing ...\n      </Wrapper>\n    );\n  } else {\n    return <Wrapper>Multiple users typing ...</Wrapper>;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/joinedConversations/ConversationDescription/ConversationDescription.tsx\";\nimport React, { useContext } from \"react\";\nimport { Wrapper, Body, ConversationIcon, Name, Description, Content } from \"./ConversationDescription.style\";\nimport { ThemeContext } from \"styled-components\";\nimport getUniqueColor from \"foundations/utilities/getUniqueColor\";\n/**\n * This describes the data that this component needs to display a\n * description of a conversation\n */\n\n/**\n * Display a short desscription of a conversation as it would appear in\n * a list of conversations.  Notify the parent component if a click is\n * detected on the description.\n *\n * Similiar to ConversationItem but with different style and less functionality\n */\nconst ConversationDescription = ({\n  conversation,\n  onClick\n}) => {\n  const theme = useContext(ThemeContext);\n  const color = getUniqueColor(conversation.name, theme.colors.avatars);\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ConversationIcon, {\n    color: color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"#\"), /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Name, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, conversation.name), /*#__PURE__*/React.createElement(Description, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, conversation.description))));\n};\n\nexport { ConversationDescription };","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/features/joinedConversations/ConversationDescription/ConversationDescription.tsx"],"names":["React","useContext","Wrapper","Body","ConversationIcon","Name","Description","Content","ThemeContext","getUniqueColor","ConversationDescription","conversation","onClick","theme","color","name","colors","avatars","description"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SACEC,OADF,EAEEC,IAFF,EAGEC,gBAHF,EAIEC,IAJF,EAKEC,WALF,EAMEC,OANF,QAOO,iCAPP;AAQA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AAEA;;;;;AAkBA;;;;;;;AAOA,MAAMC,uBAAuB,GAAG,CAAC;AAC/BC,EAAAA,YAD+B;AAE/BC,EAAAA;AAF+B,CAAD,KAGI;AAClC,QAAMC,KAAK,GAAGZ,UAAU,CAACO,YAAD,CAAxB;AACA,QAAMM,KAAK,GAAGL,cAAc,CAC1BE,YAAY,CAACI,IADa,EAEzBF,KAAK,CAACG,MAAN,CAAaC,OAFY,CAA5B;AAIA,sBACE,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEL,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEE,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,eAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOH,YAAY,CAACI,IAApB,CADF,eAEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcJ,YAAY,CAACO,WAA3B,CAFF,CAFF,CADF,CADF;AAWD,CApBD;;AAsBA,SAASR,uBAAT","sourcesContent":["import React, { useContext } from \"react\";\nimport {\n  Wrapper,\n  Body,\n  ConversationIcon,\n  Name,\n  Description,\n  Content\n} from \"./ConversationDescription.style\";\nimport { ThemeContext } from \"styled-components\";\nimport getUniqueColor from \"foundations/utilities/getUniqueColor\";\n\n/**\n * This describes the data that this component needs to display a\n * description of a conversation\n */\nexport interface ConversationDescriptionFragment {\n  id: string;\n  name: string;\n  description: string;\n}\n\n/**\n * Define the properties required to produce a conversation description\n */\ninterface ConversationDescriptionProps {\n  conversation: ConversationDescriptionFragment;\n  onClick: () => void;\n}\n\n/**\n * Display a short desscription of a conversation as it would appear in\n * a list of conversations.  Notify the parent component if a click is\n * detected on the description.\n *\n * Similiar to ConversationItem but with different style and less functionality\n */\nconst ConversationDescription = ({\n  conversation,\n  onClick\n}: ConversationDescriptionProps) => {\n  const theme = useContext(ThemeContext);\n  const color = getUniqueColor(\n    conversation.name,\n    (theme.colors.avatars as unknown) as string[]\n  );\n  return (\n    <Wrapper onClick={onClick}>\n      <Body>\n        <ConversationIcon color={color}>#</ConversationIcon>\n        <Content>\n          <Name>{conversation.name}</Name>\n          <Description>{conversation.description}</Description>\n        </Content>\n      </Body>\n    </Wrapper>\n  );\n};\n\nexport { ConversationDescription };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { loggingIn, loginSucceeded } from \"./authenticationModel\";\nimport { fetchUserData, fetchMemberships } from \"pubnub-redux\";\nimport { getConversationsByUserId } from \"features/joinedConversations/joinedConversationModel\";\nexport const login = uuid => {\n  return (dispatch, getState, context) => {\n    dispatch(loggingIn()); // Show the login screen for a minimum amount of time as a splash screen\n    //const timer = new Promise(resolve => setTimeout(resolve, 2000));\n    // Set the UUID of the current user to ensure that presence works correctly\n\n    context.pubnub.api.setUUID(uuid); // ensure that the current user exists while also populating the store\n    // with their information.\n\n    const isLoginSuccessful = dispatch(fetchUserData({\n      uuid\n    })).then(() => {\n      // Subscribe to the user's channel to receive events involving this user\n      context.pubnub.api.subscribe({\n        channels: [uuid],\n        withPresence: true\n      });\n    }).then(() => {\n      return dispatch( // Load the conversations that this user has joined\n      fetchMemberships({\n        uuid: uuid,\n        include: {\n          channelFields: true,\n          customChannelFields: false,\n          customFields: false,\n          totalCount: false\n        }\n      }));\n    }).then(() => {\n      // Subscribe to messages on the user's joined conversations\n      const conversationChannels = getConversationsByUserId(getState())[uuid].map(membership => membership.id);\n      context.pubnub.api.subscribe({\n        channels: conversationChannels,\n        withPresence: true\n      });\n    });\n    return Promise.all([isLoginSuccessful]).then(() => {\n      dispatch(loginSucceeded({\n        loggedInUserId: uuid\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/chatcat/typescript-ref-app-team-chat/src/features/authentication/loginCommand.ts"],"names":["loggingIn","loginSucceeded","fetchUserData","fetchMemberships","getConversationsByUserId","login","uuid","dispatch","getState","context","pubnub","api","setUUID","isLoginSuccessful","then","subscribe","channels","withPresence","include","channelFields","customChannelFields","customFields","totalCount","conversationChannels","map","membership","id","Promise","all","loggedInUserId"],"mappings":"AACA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,uBAA1C;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,cAAhD;AACA,SAASC,wBAAT,QAAyC,sDAAzC;AAEA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAA8C;AACjE,SAAO,CAACC,QAAD,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;AACtCF,IAAAA,QAAQ,CAACP,SAAS,EAAV,CAAR,CADsC,CAGtC;AACA;AAEA;;AACAS,IAAAA,OAAO,CAACC,MAAR,CAAeC,GAAf,CAAmBC,OAAnB,CAA2BN,IAA3B,EAPsC,CAStC;AACA;;AACA,UAAMO,iBAAiB,GAAGN,QAAQ,CAACL,aAAa,CAAC;AAAEI,MAAAA;AAAF,KAAD,CAAd,CAAR,CACvBQ,IADuB,CAClB,MAAM;AACV;AACAL,MAAAA,OAAO,CAACC,MAAR,CAAeC,GAAf,CAAmBI,SAAnB,CAA6B;AAC3BC,QAAAA,QAAQ,EAAE,CAACV,IAAD,CADiB;AAE3BW,QAAAA,YAAY,EAAE;AAFa,OAA7B;AAID,KAPuB,EAQvBH,IARuB,CAQlB,MAAM;AACV,aAAOP,QAAQ,EACb;AACAJ,MAAAA,gBAAgB,CAAC;AACfG,QAAAA,IAAI,EAAEA,IADS;AAEfY,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAE,IADR;AAEPC,UAAAA,mBAAmB,EAAE,KAFd;AAGPC,UAAAA,YAAY,EAAE,KAHP;AAIPC,UAAAA,UAAU,EAAE;AAJL;AAFM,OAAD,CAFH,CAAf;AAYD,KArBuB,EAsBvBR,IAtBuB,CAsBlB,MAAM;AACV;AACA,YAAMS,oBAAoB,GAAGnB,wBAAwB,CAACI,QAAQ,EAAT,CAAxB,CAC3BF,IAD2B,EAE3BkB,GAF2B,CAEtBC,UAAD,IAAgBA,UAAU,CAACC,EAFJ,CAA7B;AAIAjB,MAAAA,OAAO,CAACC,MAAR,CAAeC,GAAf,CAAmBI,SAAnB,CAA6B;AAC3BC,QAAAA,QAAQ,EAAEO,oBADiB;AAE3BN,QAAAA,YAAY,EAAE;AAFa,OAA7B;AAID,KAhCuB,CAA1B;AAkCA,WAAOU,OAAO,CAACC,GAAR,CAAY,CAACf,iBAAD,CAAZ,EAAiCC,IAAjC,CAAsC,MAAM;AACjDP,MAAAA,QAAQ,CAACN,cAAc,CAAC;AAAE4B,QAAAA,cAAc,EAAEvB;AAAlB,OAAD,CAAf,CAAR;AACD,KAFM,CAAP;AAGD,GAhDD;AAiDD,CAlDM","sourcesContent":["import { ThunkAction } from \"main/storeTypes\";\nimport { loggingIn, loginSucceeded } from \"./authenticationModel\";\nimport { fetchUserData, fetchMemberships } from \"pubnub-redux\";\nimport { getConversationsByUserId } from \"features/joinedConversations/joinedConversationModel\";\n\nexport const login = (uuid: string): ThunkAction<Promise<void>> => {\n  return (dispatch, getState, context) => {\n    dispatch(loggingIn());\n\n    // Show the login screen for a minimum amount of time as a splash screen\n    //const timer = new Promise(resolve => setTimeout(resolve, 2000));\n\n    // Set the UUID of the current user to ensure that presence works correctly\n    context.pubnub.api.setUUID(uuid);\n\n    // ensure that the current user exists while also populating the store\n    // with their information.\n    const isLoginSuccessful = dispatch(fetchUserData({ uuid }))\n      .then(() => {\n        // Subscribe to the user's channel to receive events involving this user\n        context.pubnub.api.subscribe({\n          channels: [uuid],\n          withPresence: true,\n        });\n      })\n      .then(() => {\n        return dispatch(\n          // Load the conversations that this user has joined\n          fetchMemberships({\n            uuid: uuid,\n            include: {\n              channelFields: true,\n              customChannelFields: false,\n              customFields: false,\n              totalCount: false,\n            },\n          })\n        );\n      })\n      .then(() => {\n        // Subscribe to messages on the user's joined conversations\n        const conversationChannels = getConversationsByUserId(getState())[\n          uuid\n        ].map((membership) => membership.id);\n\n        context.pubnub.api.subscribe({\n          channels: conversationChannels,\n          withPresence: true,\n        });\n      });\n\n    return Promise.all([isLoginSuccessful]).then(() => {\n      dispatch(loginSucceeded({ loggedInUserId: uuid }));\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
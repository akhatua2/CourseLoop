{"ast":null,"code":"/**\n * Define the types of messages that this application is designed to work with.\n *\n * This application only defines \"text\" messages, but you can add more here.\n */\nexport let MessageType;\n/**\n * BaseMessage defines a structure that ALL messages that the application works should conform to.\n */\n\n(function (MessageType) {\n  MessageType[\"Text\"] = \"text\";\n  MessageType[\"Giphy\"] = \"giphy\";\n})(MessageType || (MessageType = {}));\n\nexport let AttachmentType;\n\n(function (AttachmentType) {\n  AttachmentType[\"Image\"] = \"image\";\n  AttachmentType[\"Video\"] = \"video\";\n  AttachmentType[\"Link\"] = \"link\";\n})(AttachmentType || (AttachmentType = {}));\n/**\n * Customize the PubNub message envelope declaration to include our custom message types\n * and define which fields from the envelope this application will have access to.\n *\n * Fields that are not included in this list may appear in the data but will be ignored by\n * the application.  To remove the fields entirely (for example to use less memory),\n *  use a filter on the incoming messages from subscribe.\n */","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/sharedTypes/messageModel.ts"],"names":["MessageType","AttachmentType"],"mappings":"AACA;;;;;AAKA,WAAYA,WAAZ;AAKA;;;;WALYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AA4BZ,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c;AA2FZ","sourcesContent":["import { IGif } from \"@giphy/js-types\";\n/**\n * Define the types of messages that this application is designed to work with.\n *\n * This application only defines \"text\" messages, but you can add more here.\n */\nexport enum MessageType {\n  Text = \"text\",\n  Giphy = \"giphy\",\n}\n\n/**\n * BaseMessage defines a structure that ALL messages that the application works should conform to.\n */\nexport interface BaseMessage {\n  /**\n   * An indicator of the type of this message, which must appear in the MessageType enum.\n   */\n  type: MessageType;\n\n  /**\n   * The user id of the user that sent this message\n   */\n  senderId: string;\n}\n\nexport interface Image {\n  source: string;\n}\n\nexport interface Video {\n  source: string;\n}\n\nexport enum AttachmentType {\n  Image = \"image\",\n  Video = \"video\",\n  Link = \"link\",\n}\n\nexport interface BaseAttachment {\n  type: AttachmentType;\n}\n\nexport interface ImageAttachment extends BaseAttachment {\n  type: AttachmentType.Image;\n  image: Image;\n}\n\nexport interface VideoAttachment extends BaseAttachment {\n  type: AttachmentType.Video;\n  video: Video;\n  preview?: Image;\n}\n\nexport type MediaAttachment = ImageAttachment | VideoAttachment;\n\nexport interface Provider {\n  name: string;\n  url: string;\n}\n\nexport interface LinkAttachment {\n  type: AttachmentType.Link;\n  url: string;\n  provider: Provider;\n  title?: string;\n  description?: string;\n  author?: Provider;\n  icon?: Image;\n  image?: Image;\n  video?: Video;\n}\n\nexport type Attachment = MediaAttachment | LinkAttachment;\n\n/**\n * Defines a text message with a UTF-8 encoding\n */\nexport interface TextMessage extends BaseMessage {\n  /**\n   * type must be \"text\"\n   */\n  type: MessageType.Text;\n\n  /**\n   * The message content with a UTF-8 unicode encoding\n   */\n  text: string;\n\n  /**\n   * Message attachments (images and links)\n   */\n  attachments?: Attachment[];\n}\n\nexport interface GiphyMessage extends BaseMessage {\n  type: MessageType.Giphy;\n  query: string;\n  gif: IGif;\n}\n\n/**\n * This is a union of all of the message types that the application works with.\n *\n * To add a new message type, add a new type identifier to the MessageType enum.\n *\n *    MyCustomMessageType = \"my-custom-message-type\",\n *\n * Then declare a new message type that extends BaseMessage that uses the enum\n *\n *     export interface MyCustomMessage extends BaseMessage {\n *       type: MessageType.MyCustomMessageType;\n *       myField: string;\n *     }\n *\n * Then add that type to this AppMessage union type\n *    export type AppMessage = TextMessage | MyCustomMessage;\n *\n * You will also need to modify the application to work with your new message type.\n * Using your IDE to find references to AppMessage will help find those areas you\n * need to modify.\n */\nexport type AppMessage = TextMessage | GiphyMessage;\n\n/**\n * Customize the PubNub message envelope declaration to include our custom message types\n * and define which fields from the envelope this application will have access to.\n *\n * Fields that are not included in this list may appear in the data but will be ignored by\n * the application.  To remove the fields entirely (for example to use less memory),\n *  use a filter on the incoming messages from subscribe.\n */\n"]},"metadata":{},"sourceType":"module"}
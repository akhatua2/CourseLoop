{"ast":null,"code":"var _jsxFileName = \"/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/main/App.tsx\";\nimport React, { useEffect } from \"react\";\nimport GlobalStyles from \"main/styles/GlobalStyles\";\nimport Normalize from \"main/styles/Normalize\";\nimport { ApplicationRouter } from \"./Router\";\nimport { appTheme } from \"./Theme\";\nimport Pubnub from \"pubnub\";\nimport { createPubNubListener } from \"pubnub-redux\";\nimport { PubNubProvider } from \"pubnub-react\";\nimport { Provider } from \"react-redux\";\nimport { createAppStore } from \"main/store\";\nimport keyConfiguration from \"config/pubnub-keys\";\nimport { ThemeProvider } from \"styled-components\";\nimport { createTypingIndicatorsListener } from \"features/typingIndicator/typingIndicatorModel\";\nconst pubnubConfig = Object.assign({}, {\n  // Ensure that subscriptions will be retained if the network connection is lost\n  restore: true,\n  heartbeatInterval: 0\n}, keyConfiguration);\nconst pubnub = new Pubnub(pubnubConfig);\nconst store = createAppStore({\n  pubnub: {\n    api: pubnub\n  }\n});\n\nconst leaveApplication = () => {\n  // This is required to show the current user leave immediately rather than\n  // wating for the timeout period\n  pubnub.unsubscribeAll();\n};\n\nconst App = () => {\n  useEffect(() => {\n    // Start listening for messages and events from PubNub\n    pubnub.addListener(createPubNubListener(store.dispatch));\n    pubnub.addListener(createTypingIndicatorsListener(store.dispatch));\n    return leaveApplication;\n  }, []);\n  useEffect(() => {\n    window.addEventListener(\"beforeunload\", leaveApplication);\n  }, []);\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: appTheme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PubNubProvider, {\n    client: pubnub,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Normalize, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(GlobalStyles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ApplicationRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport { App };","map":{"version":3,"sources":["/Users/sidrajaram/Desktop/hackillinois/Course_Loop/src/main/App.tsx"],"names":["React","useEffect","GlobalStyles","Normalize","ApplicationRouter","appTheme","Pubnub","createPubNubListener","PubNubProvider","Provider","createAppStore","keyConfiguration","ThemeProvider","createTypingIndicatorsListener","pubnubConfig","Object","assign","restore","heartbeatInterval","pubnub","store","api","leaveApplication","unsubscribeAll","App","addListener","dispatch","window","addEventListener"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,SAASC,iBAAT,QAAkC,UAAlC;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,oBAAT,QAAqC,cAArC;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SAASC,8BAAT,QAA+C,+CAA/C;AAEA,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CACnB,EADmB,EAEnB;AACE;AACAC,EAAAA,OAAO,EAAE,IAFX;AAGEC,EAAAA,iBAAiB,EAAE;AAHrB,CAFmB,EAOnBP,gBAPmB,CAArB;AASA,MAAMQ,MAAM,GAAG,IAAIb,MAAJ,CAAWQ,YAAX,CAAf;AAEA,MAAMM,KAAK,GAAGV,cAAc,CAAC;AAC3BS,EAAAA,MAAM,EAAE;AACNE,IAAAA,GAAG,EAAEF;AADC;AADmB,CAAD,CAA5B;;AAMA,MAAMG,gBAAgB,GAAG,MAAM;AAC7B;AACA;AACAH,EAAAA,MAAM,CAACI,cAAP;AACD,CAJD;;AAMA,MAAMC,GAAG,GAAG,MAAM;AAChBvB,EAAAA,SAAS,CAAC,MAAM;AACd;AACAkB,IAAAA,MAAM,CAACM,WAAP,CAAmBlB,oBAAoB,CAACa,KAAK,CAACM,QAAP,CAAvC;AACAP,IAAAA,MAAM,CAACM,WAAP,CAAmBZ,8BAA8B,CAACO,KAAK,CAACM,QAAP,CAAjD;AACA,WAAOJ,gBAAP;AACD,GALQ,EAKN,EALM,CAAT;AAOArB,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,MAAM,CAACC,gBAAP,CAAwB,cAAxB,EAAwCN,gBAAxC;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEjB,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEe,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAED,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,CADF,CADF;AAWD,CAvBD;;AAyBA,SAASK,GAAT","sourcesContent":["import React, { useEffect } from \"react\";\nimport GlobalStyles from \"main/styles/GlobalStyles\";\nimport Normalize from \"main/styles/Normalize\";\nimport { ApplicationRouter } from \"./Router\";\nimport { appTheme } from \"./Theme\";\nimport Pubnub from \"pubnub\";\nimport { createPubNubListener } from \"pubnub-redux\";\nimport { PubNubProvider } from \"pubnub-react\";\nimport { Provider } from \"react-redux\";\nimport { createAppStore } from \"main/store\";\nimport keyConfiguration from \"config/pubnub-keys\";\nimport { ThemeProvider } from \"styled-components\";\nimport { createTypingIndicatorsListener } from \"features/typingIndicator/typingIndicatorModel\";\n\nconst pubnubConfig = Object.assign(\n  {},\n  {\n    // Ensure that subscriptions will be retained if the network connection is lost\n    restore: true,\n    heartbeatInterval: 0,\n  },\n  keyConfiguration\n);\nconst pubnub = new Pubnub(pubnubConfig);\n\nconst store = createAppStore({\n  pubnub: {\n    api: pubnub,\n  },\n});\n\nconst leaveApplication = () => {\n  // This is required to show the current user leave immediately rather than\n  // wating for the timeout period\n  pubnub.unsubscribeAll();\n};\n\nconst App = () => {\n  useEffect(() => {\n    // Start listening for messages and events from PubNub\n    pubnub.addListener(createPubNubListener(store.dispatch));\n    pubnub.addListener(createTypingIndicatorsListener(store.dispatch));\n    return leaveApplication;\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"beforeunload\", leaveApplication);\n  }, []);\n\n  return (\n    <ThemeProvider theme={appTheme}>\n      <Provider store={store}>\n        <PubNubProvider client={pubnub}>\n          <Normalize />\n          <GlobalStyles />\n          <ApplicationRouter />\n        </PubNubProvider>\n      </Provider>\n    </ThemeProvider>\n  );\n};\n\nexport { App };\n"]},"metadata":{},"sourceType":"module"}